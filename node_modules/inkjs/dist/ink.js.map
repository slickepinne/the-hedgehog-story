{"version":3,"file":"ink.js","sources":["../src/engine/Path.ts","../src/engine/Debug.ts","../src/engine/TypeAssertion.ts","../src/engine/NullException.ts","../src/engine/Object.ts","../src/engine/StringBuilder.ts","../src/engine/InkList.ts","../src/engine/StoryException.ts","../src/engine/TryGetResult.ts","../src/engine/Value.ts","../src/engine/Container.ts","../src/engine/SearchResult.ts","../src/engine/ControlCommand.ts","../src/engine/PushPop.ts","../src/engine/Glue.ts","../src/engine/Pointer.ts","../src/engine/Divert.ts","../src/engine/ChoicePoint.ts","../src/engine/VariableReference.ts","../src/engine/VariableAssignment.ts","../src/engine/Void.ts","../src/engine/NativeFunctionCall.ts","../src/engine/Tag.ts","../src/engine/Choice.ts","../src/engine/ListDefinition.ts","../src/engine/ListDefinitionsOrigin.ts","../src/engine/JsonSerialisation.ts","../src/engine/CallStack.ts","../src/engine/VariablesState.ts","../src/engine/PRNG.ts","../src/engine/StatePatch.ts","../src/engine/SimpleJson.ts","../src/engine/Story.ts","../src/engine/StoryState.ts","../src/engine/StopWatch.ts"],"sourcesContent":["export class Path {\n  public static parentId = \"^\";\n\n  public _isRelative: boolean;\n  public _components: Path.Component[];\n  public _componentsString: string | null;\n\n  constructor();\n  constructor(componentsString: string);\n  constructor(head: Path.Component, tail: Path);\n  constructor(head: Path.Component[], relative?: boolean);\n  constructor() {\n    this._components = [];\n    this._componentsString = null;\n    this._isRelative = false;\n\n    if (typeof arguments[0] == \"string\") {\n      let componentsString = arguments[0] as string;\n      this.componentsString = componentsString;\n    } else if (\n      arguments[0] instanceof Path.Component &&\n      arguments[1] instanceof Path\n    ) {\n      let head = arguments[0] as Path.Component;\n      let tail = arguments[1] as Path;\n      this._components.push(head);\n      this._components = this._components.concat(tail._components);\n    } else if (arguments[0] instanceof Array) {\n      let head = arguments[0] as Path.Component[];\n      let relative = !!arguments[1] as boolean;\n      this._components = this._components.concat(head);\n      this._isRelative = relative;\n    }\n  }\n  get isRelative() {\n    return this._isRelative;\n  }\n  get componentCount(): number {\n    return this._components.length;\n  }\n  get head(): Path.Component | null {\n    if (this._components.length > 0) {\n      return this._components[0];\n    } else {\n      return null;\n    }\n  }\n  get tail(): Path {\n    if (this._components.length >= 2) {\n      // careful, the original code uses length-1 here. This is because the second argument of\n      // List.GetRange is a number of elements to extract, wherease Array.slice uses an index\n      let tailComps = this._components.slice(1, this._components.length);\n      return new Path(tailComps);\n    } else {\n      return Path.self;\n    }\n  }\n  get length(): number {\n    return this._components.length;\n  }\n  get lastComponent(): Path.Component | null {\n    let lastComponentIdx = this._components.length - 1;\n    if (lastComponentIdx >= 0) {\n      return this._components[lastComponentIdx];\n    } else {\n      return null;\n    }\n  }\n  get containsNamedComponent(): boolean {\n    for (let i = 0, l = this._components.length; i < l; i++) {\n      if (!this._components[i].isIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static get self(): Path {\n    let path = new Path();\n    path._isRelative = true;\n    return path;\n  }\n\n  public GetComponent(index: number): Path.Component {\n    return this._components[index];\n  }\n  public PathByAppendingPath(pathToAppend: Path): Path {\n    let p = new Path();\n\n    let upwardMoves = 0;\n    for (let i = 0; i < pathToAppend._components.length; ++i) {\n      if (pathToAppend._components[i].isParent) {\n        upwardMoves++;\n      } else {\n        break;\n      }\n    }\n\n    for (let i = 0; i < this._components.length - upwardMoves; ++i) {\n      p._components.push(this._components[i]);\n    }\n\n    for (let i = upwardMoves; i < pathToAppend._components.length; ++i) {\n      p._components.push(pathToAppend._components[i]);\n    }\n\n    return p;\n  }\n  get componentsString(): string {\n    if (this._componentsString == null) {\n      this._componentsString = this._components.join(\".\");\n      if (this.isRelative)\n        this._componentsString = \".\" + this._componentsString;\n    }\n\n    return this._componentsString;\n  }\n  set componentsString(value: string) {\n    this._components.length = 0;\n\n    this._componentsString = value;\n\n    if (this._componentsString == null || this._componentsString == \"\") return;\n\n    if (this._componentsString[0] == \".\") {\n      this._isRelative = true;\n      this._componentsString = this._componentsString.substring(1);\n    }\n\n    let componentStrings = this._componentsString.split(\".\");\n    for (let str of componentStrings) {\n      // we need to distinguish between named components that start with a number, eg \"42somewhere\", and indexed components\n      // the normal parseInt won't do for the detection because it's too relaxed.\n      // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n      if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(str)) {\n        this._components.push(new Path.Component(parseInt(str)));\n      } else {\n        this._components.push(new Path.Component(str));\n      }\n    }\n  }\n  public toString(): string {\n    return this.componentsString;\n  }\n  public Equals(otherPath: Path | null): boolean {\n    if (otherPath == null) return false;\n\n    if (otherPath._components.length != this._components.length) return false;\n\n    if (otherPath.isRelative != this.isRelative) return false;\n\n    // the original code uses SequenceEqual here, so we need to iterate over the components manually.\n    for (let i = 0, l = otherPath._components.length; i < l; i++) {\n      // it's not quite clear whether this test should use Equals or a simple == operator,\n      // see https://github.com/y-lohse/inkjs/issues/22\n      if (!otherPath._components[i].Equals(this._components[i])) return false;\n    }\n\n    return true;\n  }\n  public PathByAppendingComponent(c: Path.Component): Path {\n    let p = new Path();\n    p._components.push.apply(p._components, this._components);\n    p._components.push(c);\n    return p;\n  }\n}\n\nexport namespace Path {\n  export class Component {\n    public readonly index: number;\n    public readonly name: string | null;\n\n    constructor(indexOrName: string | number) {\n      this.index = -1;\n      this.name = null;\n      if (typeof indexOrName == \"string\") {\n        this.name = indexOrName;\n      } else {\n        this.index = indexOrName;\n      }\n    }\n    get isIndex(): boolean {\n      return this.index >= 0;\n    }\n    get isParent(): boolean {\n      return this.name == Path.parentId;\n    }\n\n    public static ToParent(): Component {\n      return new Component(Path.parentId);\n    }\n    public toString(): string | null {\n      if (this.isIndex) {\n        return this.index.toString();\n      } else {\n        return this.name;\n      }\n    }\n    public Equals(otherComp: Component): boolean {\n      if (otherComp != null && otherComp.isIndex == this.isIndex) {\n        if (this.isIndex) {\n          return this.index == otherComp.index;\n        } else {\n          return this.name == otherComp.name;\n        }\n      }\n\n      return false;\n    }\n  }\n}\n","export namespace Debug {\n  export function AssertType<T>(\n    variable: any,\n    type: new () => T,\n    message: string\n  ): void | never {\n    Assert(variable instanceof type, message);\n  }\n\n  export function Assert(condition: boolean, message?: string): void | never {\n    if (!condition) {\n      if (typeof message !== \"undefined\") {\n        console.warn(message);\n      }\n\n      if (console.trace) {\n        console.trace();\n      }\n\n      throw new Error(\"\");\n    }\n  }\n}\n","import { INamedContent } from \"./INamedContent\";\n\nexport function asOrNull<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | null {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    return null;\n  }\n}\n\nexport function asOrThrows<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | never {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    throw new Error(`${obj} is not of type ${type}`);\n  }\n}\n\nexport function asNumberOrThrows(obj: any) {\n  if (typeof obj === \"number\") {\n    return obj as number;\n  } else {\n    throw new Error(`${obj} is not a number`);\n  }\n}\n\n// So here, in the reference implementation, contentObj is casted to an INamedContent\n// but here we use js-style duck typing: if it implements the same props as the interface,\n// we treat it as valid.\nexport function asINamedContentOrNull(obj: any): INamedContent | null {\n  if (obj.hasValidName && obj.name) {\n    return obj as INamedContent;\n  }\n\n  return null;\n}\n\nexport function nullIfUndefined<T>(obj: T | undefined): T | null {\n  if (typeof obj === \"undefined\") {\n    return null;\n  }\n\n  return obj;\n}\n\nexport function isEquatable(type: any) {\n  return typeof type === \"object\" && typeof type.Equals === \"function\";\n}\n\nfunction unsafeTypeAssertion<T>(\n  obj: any,\n  type: (new () => T) | (Function & { prototype: T })\n) {\n  return obj as T;\n}\n","/**\n * In the original C# code, a SystemException would be thrown when passing\n * null to methods expected a valid instance. Javascript has no such\n * concept, but TypeScript will not allow `null` to be passed to methods\n * explicitely requiring a valid type.\n *\n * Whenever TypeScript complain about the possibility of a `null` value,\n * check the offending value and it it's null, throw this exception using\n * `throwNullException(name: string)`.\n */\nexport class NullException extends Error {}\n\n/**\n * Throw a NullException.\n *\n * @param name a short description of the offending value (often its name within the code).\n */\nexport function throwNullException(name: string): never {\n  throw new NullException(`${name} is null or undefined`);\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { Debug } from \"./Debug\";\nimport { asOrNull, asINamedContentOrNull } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SearchResult } from \"./SearchResult\";\nimport { DebugMetadata } from \"./DebugMetadata\";\n\nexport class InkObject {\n  public parent: InkObject | null = null;\n\n  get debugMetadata(): DebugMetadata | null {\n    if (this._debugMetadata === null) {\n      if (this.parent) {\n        return this.parent.debugMetadata;\n      }\n    }\n\n    return this._debugMetadata;\n  }\n\n  set debugMetadata(value) {\n    this._debugMetadata = value;\n  }\n\n  get ownDebugMetadata() {\n    return this._debugMetadata;\n  }\n\n  private _debugMetadata: DebugMetadata | null = null;\n\n  public DebugLineNumberOfPath(path: Path) {\n    if (path === null) return null;\n\n    // Try to get a line number from debug metadata\n    let root = this.rootContentContainer;\n    if (root) {\n      let targetContent = root.ContentAtPath(path).obj;\n      if (targetContent) {\n        let dm = targetContent.debugMetadata;\n        if (dm !== null) {\n          return dm.startLineNumber;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  get path() {\n    if (this._path == null) {\n      if (this.parent == null) {\n        this._path = new Path();\n      } else {\n        let comps: Path.Component[] = [];\n\n        let child: InkObject = this;\n        let container = asOrNull(child.parent, Container);\n\n        while (container !== null) {\n          let namedChild = asINamedContentOrNull(child);\n          if (namedChild != null && namedChild.hasValidName) {\n            comps.unshift(new Path.Component(namedChild.name));\n          } else {\n            comps.unshift(new Path.Component(container.content.indexOf(child)));\n          }\n\n          child = container;\n          container = asOrNull(container.parent, Container);\n        }\n\n        this._path = new Path(comps);\n      }\n    }\n\n    return this._path;\n  }\n  private _path: Path | null = null;\n\n  public ResolvePath(path: Path | null): SearchResult {\n    if (path === null) return throwNullException(\"path\");\n    if (path.isRelative) {\n      let nearestContainer = asOrNull(this, Container);\n\n      if (nearestContainer === null) {\n        Debug.Assert(\n          this.parent !== null,\n          \"Can't resolve relative path because we don't have a parent\"\n        );\n        nearestContainer = asOrNull(this.parent, Container);\n        Debug.Assert(\n          nearestContainer !== null,\n          \"Expected parent to be a container\"\n        );\n        Debug.Assert(path.GetComponent(0).isParent);\n        path = path.tail;\n      }\n\n      if (nearestContainer === null) {\n        return throwNullException(\"nearestContainer\");\n      }\n      return nearestContainer.ContentAtPath(path);\n    } else {\n      let contentContainer = this.rootContentContainer;\n      if (contentContainer === null) {\n        return throwNullException(\"contentContainer\");\n      }\n      return contentContainer.ContentAtPath(path);\n    }\n  }\n\n  public ConvertPathToRelative(globalPath: Path) {\n    let ownPath = this.path;\n\n    let minPathLength = Math.min(globalPath.length, ownPath.length);\n    let lastSharedPathCompIndex = -1;\n\n    for (let i = 0; i < minPathLength; ++i) {\n      let ownComp = ownPath.GetComponent(i);\n      let otherComp = globalPath.GetComponent(i);\n\n      if (ownComp.Equals(otherComp)) {\n        lastSharedPathCompIndex = i;\n      } else {\n        break;\n      }\n    }\n\n    // No shared path components, so just use global path\n    if (lastSharedPathCompIndex == -1) return globalPath;\n\n    let numUpwardsMoves = ownPath.componentCount - 1 - lastSharedPathCompIndex;\n\n    let newPathComps: Path.Component[] = [];\n\n    for (let up = 0; up < numUpwardsMoves; ++up)\n      newPathComps.push(Path.Component.ToParent());\n\n    for (\n      let down = lastSharedPathCompIndex + 1;\n      down < globalPath.componentCount;\n      ++down\n    )\n      newPathComps.push(globalPath.GetComponent(down));\n\n    let relativePath = new Path(newPathComps, true);\n    return relativePath;\n  }\n\n  public CompactPathString(otherPath: Path) {\n    let globalPathStr = null;\n    let relativePathStr = null;\n\n    if (otherPath.isRelative) {\n      relativePathStr = otherPath.componentsString;\n      globalPathStr = this.path.PathByAppendingPath(otherPath).componentsString;\n    } else {\n      let relativePath = this.ConvertPathToRelative(otherPath);\n      relativePathStr = relativePath.componentsString;\n      globalPathStr = otherPath.componentsString;\n    }\n\n    if (relativePathStr.length < globalPathStr.length) return relativePathStr;\n    else return globalPathStr;\n  }\n\n  get rootContentContainer() {\n    let ancestor: InkObject = this;\n    while (ancestor.parent) {\n      ancestor = ancestor.parent;\n    }\n    return asOrNull(ancestor, Container);\n  }\n\n  public Copy(): InkObject {\n    throw Error(\"Not Implemented: Doesn't support copying\");\n  }\n  // SetChild works slightly diferently in the js implementation.\n  // Since we can't pass an objets property by reference, we instead pass\n  // the object and the property string.\n  // TODO: This method can probably be rewritten with type-safety in mind.\n  public SetChild(obj: any, prop: any, value: any) {\n    if (obj[prop]) obj[prop] = null;\n\n    obj[prop] = value;\n\n    if (obj[prop]) obj[prop].parent = this;\n  }\n}\n","export class StringBuilder {\n  private string: string;\n\n  constructor(str?: string) {\n    str = typeof str !== \"undefined\" ? str.toString() : \"\";\n    this.string = str;\n  }\n  get Length(): number {\n    return this.string.length;\n  }\n  public Append(str: string | null) {\n    if (str !== null) {\n      this.string += str;\n    }\n  }\n  public AppendLine(str?: string) {\n    if (typeof str !== \"undefined\") this.Append(str);\n    this.string += \"\\n\";\n  }\n  public AppendFormat(format: string, ...args: any[]) {\n    // taken from http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\n    this.string += format.replace(/{(\\d+)}/g, (match: string, num: number) =>\n      typeof args[num] != \"undefined\" ? args[num] : match\n    );\n  }\n  public toString(): string {\n    return this.string;\n  }\n}\n","import { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Story } from \"./Story\";\n\nexport class InkListItem implements IInkListItem {\n  // InkListItem is a struct\n\n  public readonly originName: string | null = null;\n  public readonly itemName: string | null = null;\n\n  constructor(originName: string | null, itemName: string | null);\n  constructor(fullName: string | null);\n  constructor() {\n    if (typeof arguments[1] !== \"undefined\") {\n      let originName = arguments[0] as string | null;\n      let itemName = arguments[1] as string | null;\n\n      this.originName = originName;\n      this.itemName = itemName;\n    } else if (arguments[0]) {\n      let fullName = arguments[0] as string;\n\n      let nameParts = fullName.toString().split(\".\");\n      this.originName = nameParts[0];\n      this.itemName = nameParts[1];\n    }\n  }\n  public static get Null() {\n    return new InkListItem(null, null);\n  }\n  public get isNull() {\n    return this.originName == null && this.itemName == null;\n  }\n  get fullName() {\n    return (\n      (this.originName !== null ? this.originName : \"?\") + \".\" + this.itemName\n    );\n  }\n  public toString(): string {\n    return this.fullName;\n  }\n  public Equals(obj: InkListItem) {\n    if (obj instanceof InkListItem) {\n      let otherItem = obj;\n      return (\n        otherItem.itemName == this.itemName &&\n        otherItem.originName == this.originName\n      );\n    }\n\n    return false;\n  }\n\n  // These methods did not exist in the original C# code. Their purpose is to\n  // make `InkListItem` mimics the value-type semantics of the original\n  // struct. Please refer to the end of this file, for a more in-depth\n  // explanation.\n\n  /**\n   * Returns a shallow clone of the current instance.\n   */\n  public copy() {\n    return new InkListItem(this.originName, this.itemName);\n  }\n  /**\n   * Returns a `SerializedInkListItem` representing the current\n   * instance. The result is intended to be used as a key inside a Map.\n   */\n  public serialized(): SerializedInkListItem {\n    // We are simply using a JSON representation as a value-typed key.\n    return JSON.stringify({\n      originName: this.originName,\n      itemName: this.itemName,\n    });\n  }\n\n  /**\n   * Reconstructs a `InkListItem` from the given SerializedInkListItem.\n   */\n  public static fromSerializedKey(key: SerializedInkListItem): InkListItem {\n    let obj = JSON.parse(key);\n    if (!InkListItem.isLikeInkListItem(obj)) return InkListItem.Null;\n\n    let inkListItem = obj as IInkListItem;\n\n    return new InkListItem(inkListItem.originName, inkListItem.itemName);\n  }\n\n  /**\n   * Determines whether the given item is sufficiently `InkListItem`-like\n   * to be used as a template when reconstructing the InkListItem.\n   */\n  private static isLikeInkListItem(item: any) {\n    if (typeof item !== \"object\") return false;\n    if (!item.hasOwnProperty(\"originName\") || !item.hasOwnProperty(\"itemName\"))\n      return false;\n    if (typeof item.originName !== \"string\" && typeof item.originName !== null)\n      return false;\n    if (typeof item.itemName !== \"string\" && typeof item.itemName !== null)\n      return false;\n\n    return true;\n  }\n}\n\nexport class InkList extends Map<SerializedInkListItem, number> {\n  public origins: ListDefinition[] | null = null;\n  public _originNames: string[] | null = [];\n\n  constructor();\n  constructor(otherList: InkList);\n  constructor(singleOriginListName: string, originStory: Story);\n  constructor(singleElement: KeyValuePair<InkListItem, number>);\n  constructor() {\n    // Trying to be smart here, this emulates the constructor inheritance found\n    // in the original code, but only if otherList is an InkList. IIFE FTW.\n    super(\n      (() => {\n        if (arguments[0] instanceof InkList) {\n          return arguments[0];\n        } else {\n          return [];\n        }\n      })()\n    );\n\n    if (arguments[0] instanceof InkList) {\n      let otherList = arguments[0] as InkList;\n\n      if (otherList._originNames) {\n        this._originNames = otherList._originNames.slice();\n      }\n    } else if (typeof arguments[0] === \"string\") {\n      let singleOriginListName = arguments[0] as string;\n      let originStory = arguments[1]; /* as Story */\n      this.SetInitialOriginName(singleOriginListName);\n\n      let def = originStory.listDefinitions.TryListGetDefinition(\n        singleOriginListName,\n        null\n      );\n      if (def.exists) {\n        this.origins = [def.result];\n      } else {\n        throw new Error(\n          \"InkList origin could not be found in story when constructing new list: \" +\n            singleOriginListName\n        );\n      }\n    } else if (\n      typeof arguments[0] === \"object\" &&\n      arguments[0].hasOwnProperty(\"Key\") &&\n      arguments[0].hasOwnProperty(\"Value\")\n    ) {\n      let singleElement = arguments[0] as KeyValuePair<InkListItem, number>;\n      this.Add(singleElement.Key, singleElement.Value);\n    }\n  }\n\n  public AddItem(itemOrItemName: InkListItem | string | null) {\n    if (itemOrItemName instanceof InkListItem) {\n      let item = itemOrItemName;\n\n      if (item.originName == null) {\n        this.AddItem(item.itemName);\n        return;\n      }\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (origin.name == item.originName) {\n          let intVal = origin.TryGetValueForItem(item, 0);\n          if (intVal.exists) {\n            this.Add(item, intVal.result);\n            return;\n          } else {\n            throw new Error(\n              \"Could not add the item \" +\n                item +\n                \" to this list because it doesn't exist in the original list definition in ink.\"\n            );\n          }\n        }\n      }\n\n      throw new Error(\n        \"Failed to add item to list because the item was from a new list definition that wasn't previously known to this list. Only items from previously known lists can be used, so that the int value can be found.\"\n      );\n    } else {\n      let itemName = itemOrItemName as string | null;\n\n      let foundListDef: ListDefinition | null = null;\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (itemName === null) return throwNullException(\"itemName\");\n\n        if (origin.ContainsItemWithName(itemName)) {\n          if (foundListDef != null) {\n            throw new Error(\n              \"Could not add the item \" +\n                itemName +\n                \" to this list because it could come from either \" +\n                origin.name +\n                \" or \" +\n                foundListDef.name\n            );\n          } else {\n            foundListDef = origin;\n          }\n        }\n      }\n\n      if (foundListDef == null)\n        throw new Error(\n          \"Could not add the item \" +\n            itemName +\n            \" to this list because it isn't known to any list definitions previously associated with this list.\"\n        );\n\n      let item = new InkListItem(foundListDef.name, itemName);\n      let itemVal = foundListDef.ValueForItem(item);\n      this.Add(item, itemVal);\n    }\n  }\n  public ContainsItemNamed(itemName: string | null) {\n    for (let [key] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (item.itemName == itemName) return true;\n    }\n\n    return false;\n  }\n  public ContainsKey(key: InkListItem) {\n    return this.has(key.serialized());\n  }\n  public Add(key: InkListItem, value: number) {\n    let serializedKey = key.serialized();\n    if (this.has(serializedKey)) {\n      // Throw an exception to match the C# behavior.\n      throw new Error(`The Map already contains an entry for ${key}`);\n    }\n    this.set(serializedKey, value);\n  }\n  public Remove(key: InkListItem) {\n    return this.delete(key.serialized());\n  }\n  get Count() {\n    return this.size;\n  }\n  get originOfMaxItem(): ListDefinition | null {\n    if (this.origins == null) return null;\n\n    let maxOriginName = this.maxItem.Key.originName;\n    let result = null;\n    this.origins.every((origin) => {\n      if (origin.name == maxOriginName) {\n        result = origin;\n        return false;\n      } else return true;\n    });\n\n    return result;\n  }\n  get originNames(): string[] {\n    if (this.Count > 0) {\n      if (this._originNames == null && this.Count > 0) this._originNames = [];\n      else {\n        if (!this._originNames) this._originNames = [];\n        this._originNames.length = 0;\n      }\n\n      for (let [key] of this) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.originName === null)\n          return throwNullException(\"item.originName\");\n        this._originNames.push(item.originName);\n      }\n    }\n\n    return this._originNames as string[];\n  }\n  public SetInitialOriginName(initialOriginName: string) {\n    this._originNames = [initialOriginName];\n  }\n  public SetInitialOriginNames(initialOriginNames: string[]) {\n    if (initialOriginNames == null) this._originNames = null;\n    else this._originNames = initialOriginNames.slice(); // store a copy\n  }\n  get maxItem() {\n    let max: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (max.Key.isNull || value > max.Value)\n        max = { Key: item, Value: value };\n    }\n\n    return max;\n  }\n  get minItem() {\n    let min: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (min.Key.isNull || value < min.Value) {\n        min = { Key: item, Value: value };\n      }\n    }\n    return min;\n  }\n  get inverse() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          if (!this.ContainsKey(item)) list.Add(item, value);\n        }\n      }\n    }\n    return list;\n  }\n  get all() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          list.set(item.serialized(), value);\n        }\n      }\n    }\n    return list;\n  }\n  public Union(otherList: InkList) {\n    let union = new InkList(this);\n    for (let [key, value] of otherList) {\n      union.set(key, value);\n    }\n    return union;\n  }\n  public Intersect(otherList: InkList) {\n    let intersection = new InkList();\n    for (let [key, value] of this) {\n      if (otherList.has(key)) intersection.set(key, value);\n    }\n\n    return intersection;\n  }\n  public Without(listToRemove: InkList) {\n    let result = new InkList(this);\n    for (let [key] of listToRemove) {\n      result.delete(key);\n    }\n\n    return result;\n  }\n  public Contains(otherList: InkList) {\n    for (let [key] of otherList) {\n      if (!this.has(key)) return false;\n    }\n\n    return true;\n  }\n  public GreaterThan(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return this.minItem.Value > otherList.maxItem.Value;\n  }\n  public GreaterThanOrEquals(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return (\n      this.minItem.Value >= otherList.minItem.Value &&\n      this.maxItem.Value >= otherList.maxItem.Value\n    );\n  }\n  public LessThan(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return this.maxItem.Value < otherList.minItem.Value;\n  }\n  public LessThanOrEquals(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return (\n      this.maxItem.Value <= otherList.maxItem.Value &&\n      this.minItem.Value <= otherList.minItem.Value\n    );\n  }\n  public MaxAsList() {\n    if (this.Count > 0) return new InkList(this.maxItem);\n    else return new InkList();\n  }\n  public MinAsList() {\n    if (this.Count > 0) return new InkList(this.minItem);\n    else return new InkList();\n  }\n  public ListWithSubRange(minBound: any, maxBound: any) {\n    if (this.Count == 0) return new InkList();\n\n    let ordered = this.orderedItems;\n\n    let minValue = 0;\n    let maxValue = Number.MAX_SAFE_INTEGER;\n\n    if (Number.isInteger(minBound)) {\n      minValue = minBound;\n    } else {\n      if (minBound instanceof InkList && minBound.Count > 0)\n        minValue = minBound.minItem.Value;\n    }\n\n    if (Number.isInteger(maxBound)) {\n      maxValue = maxBound;\n    } else {\n      if (minBound instanceof InkList && minBound.Count > 0)\n        maxValue = maxBound.maxItem.Value;\n    }\n\n    let subList = new InkList();\n    subList.SetInitialOriginNames(this.originNames);\n    for (let item of ordered) {\n      if (item.Value >= minValue && item.Value <= maxValue) {\n        subList.Add(item.Key, item.Value);\n      }\n    }\n\n    return subList;\n  }\n  public Equals(otherInkList: InkList) {\n    if (otherInkList instanceof InkList === false) return false;\n    if (otherInkList.Count != this.Count) return false;\n\n    for (let [key] of this) {\n      if (!otherInkList.has(key)) return false;\n    }\n\n    return true;\n  }\n  // GetHashCode not implemented\n  get orderedItems() {\n    // List<KeyValuePair<InkListItem, int>>\n    let ordered = new Array<KeyValuePair<InkListItem, number>>();\n\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      ordered.push({ Key: item, Value: value });\n    }\n\n    ordered.sort((x, y) => {\n      if (x.Key.originName === null) {\n        return throwNullException(\"x.Key.originName\");\n      }\n      if (y.Key.originName === null) {\n        return throwNullException(\"y.Key.originName\");\n      }\n\n      if (x.Value == y.Value) {\n        return x.Key.originName.localeCompare(y.Key.originName);\n      } else {\n        // TODO: refactor this bit into a numberCompareTo method?\n        if (x.Value < y.Value) return -1;\n        return x.Value > y.Value ? 1 : 0;\n      }\n    });\n\n    return ordered;\n  }\n  public toString() {\n    let ordered = this.orderedItems;\n\n    let sb = new StringBuilder();\n    for (let i = 0; i < ordered.length; i++) {\n      if (i > 0) sb.Append(\", \");\n\n      let item = ordered[i].Key;\n      if (item.itemName === null) return throwNullException(\"item.itemName\");\n      sb.Append(item.itemName);\n    }\n\n    return sb.toString();\n  }\n  // casting a InkList to a Number, for somereason, actually gives a number.\n  // This messes up the type detection when creating a Value from a InkList.\n  // Returning NaN here prevents that.\n  public valueOf() {\n    return NaN;\n  }\n}\n\n/**\n * In the original C# code, `InkListItem` was defined as value type, meaning\n * that two `InkListItem` would be considered equal as long as they held the\n * same values. This doesn't hold true in Javascript, as `InkListItem` is a\n * reference type (Javascript doesn't allow the creation of custom value types).\n *\n * The key equality of Map objects is based on the \"SameValueZero\" algorithm;\n * since `InkListItem` is a value type, two keys will only be considered\n * equal if they are, in fact, the same object. As we are trying to emulate\n * the original behavior as close as possible, this will lead to unforeseen\n * side effects.\n *\n * In order to have a key equality based on value semantics, we'll convert\n * `InkListItem` to a valid string representation and use this representation\n * as a key (strings are value types in Javascript). Rather than using the\n * type `string` directly, we'll alias it to `SerializedInkListItem` and use\n * this type as the key for our Map-based `InkList`.\n *\n * Reducing `InkListItem` to a JSON representation would not be bulletproof\n * in the general case, but for our needs it works well. The major downside of\n * this method is that we will have to to reconstruct the original `InkListItem`\n * every time we'll need to access its properties.\n */\nexport type SerializedInkListItem = string;\n\n/**\n * An interface inherited by `InkListItem`, defining exposed\n * properties. It's mainly used when deserializing a `InkListItem` from its\n * key (`SerializedInkListItem`)\n */\ninterface IInkListItem {\n  readonly originName: string | null;\n  readonly itemName: string | null;\n}\nexport interface KeyValuePair<K, V> {\n  Key: K;\n  Value: V;\n}\n","export class StoryException extends Error {\n  public useEndLineNumber: boolean;\n  public message: string;\n  public name: string;\n\n  constructor(message: string) {\n    super(message);\n    this.useEndLineNumber = false;\n    this.message = message;\n    this.name = \"StoryException\";\n  }\n}\n","/**\n * This interface normalize the `TryGet` behavior found in the original\n * C# project. Any `TryGet` method will return a object conforming to this\n * interface.\n *\n * The original function returns a boolean and has a second parameter called\n * item that is an `out`. Both are needed and we can't just return the item\n * because it'll always be truthy. Instead, we return an object containing\n * whether the result exists (`exists`) and the result itself (`result`).\n *\n * For instance a `TryGet` prototype would look like this:\n```\nTryGetItemWithValue(val: number, item: InkListItem): TryGetResult<InkListItem>{\n```\n *\n * On the other hand, dealing with the result can be done in the following way:\n```\nvar item = item.TryGetItemWithValue(intVal, InkListItem.Null);\nif (item.exists) {\n\tconsole.log(item.result)\n}\n```\n *\n */\nexport interface TryGetResult<T> {\n  result: T;\n  exists: boolean;\n}\n\nexport function tryGetValueFromMap<K, V>(\n  map: Map<K, V> | null,\n  key: K,\n  /* out */ value: V\n): TryGetResult<V> {\n  if (map === null) {\n    return { result: value, exists: false };\n  }\n\n  let val = map.get(key);\n\n  if (typeof val === \"undefined\") {\n    return { result: value, exists: false };\n  } else {\n    return { result: val, exists: true };\n  }\n}\n\nexport function tryParseInt(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseInt(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n\nexport function tryParseFloat(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseFloat(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { StoryException } from \"./StoryException\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { tryParseInt, tryParseFloat } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport abstract class AbstractValue extends InkObject {\n  public abstract get valueType(): ValueType;\n  public abstract get isTruthy(): boolean;\n  public abstract get valueObject(): any;\n\n  public abstract Cast(newType: ValueType): Value<any>;\n\n  public static Create(\n    val: any,\n    preferredNumberType?: ValueType\n  ): Value<any> | null {\n    // This code doesn't exist in upstream and is simply here to enforce\n    // the creation of the proper number value.\n    // If `preferredNumberType` is not provided or if value doesn't match\n    // `preferredNumberType`, this conditional does nothing.\n    if (preferredNumberType) {\n      if (\n        preferredNumberType === (ValueType.Int as ValueType) &&\n        Number.isInteger(Number(val))\n      ) {\n        return new IntValue(Number(val));\n      } else if (\n        preferredNumberType === (ValueType.Float as ValueType) &&\n        !isNaN(val)\n      ) {\n        return new FloatValue(Number(val));\n      }\n    }\n\n    // Implicitly convert bools into ints\n    if (typeof val === \"boolean\") {\n      let b = !!val;\n      val = b ? 1 : 0;\n    }\n\n    // https://github.com/y-lohse/inkjs/issues/425\n    // Changed condition sequence, because Number('') is\n    // parsed to 0, which made setting string to empty\n    // impossible\n    if (typeof val === \"string\") {\n      return new StringValue(String(val));\n    } else if (Number.isInteger(Number(val))) {\n      return new IntValue(Number(val));\n    } else if (!isNaN(val)) {\n      return new FloatValue(Number(val));\n    } else if (val instanceof Path) {\n      return new DivertTargetValue(asOrThrows(val, Path));\n    } else if (val instanceof InkList) {\n      return new ListValue(asOrThrows(val, InkList));\n    }\n\n    return null;\n  }\n  public Copy() {\n    return asOrThrows(AbstractValue.Create(this), InkObject);\n  }\n  public BadCastException(targetType: ValueType) {\n    return new StoryException(\n      \"Can't cast \" +\n        this.valueObject +\n        \" from \" +\n        this.valueType +\n        \" to \" +\n        targetType\n    );\n  }\n}\n\nexport abstract class Value<\n  T extends { toString: () => string }\n> extends AbstractValue {\n  public value: T | null;\n\n  constructor(val: T | null) {\n    super();\n    this.value = val;\n  }\n  public get valueObject() {\n    return this.value;\n  }\n  public toString() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.toString();\n  }\n}\n\nexport class IntValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0);\n  }\n  public get isTruthy() {\n    return this.value != 0;\n  }\n  public get valueType() {\n    return ValueType.Int;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Float) {\n      return new FloatValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class FloatValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0.0);\n  }\n  public get isTruthy() {\n    return this.value != 0.0;\n  }\n  public get valueType() {\n    return ValueType.Float;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      return new IntValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class StringValue extends Value<string> {\n  public _isNewline: boolean;\n  public _isInlineWhitespace: boolean;\n\n  constructor(val: string) {\n    super(val || \"\");\n\n    this._isNewline = this.value == \"\\n\";\n    this._isInlineWhitespace = true;\n\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (this.value.length > 0) {\n      this.value.split(\"\").every((c) => {\n        if (c != \" \" && c != \"\\t\") {\n          this._isInlineWhitespace = false;\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }\n  public get valueType() {\n    return ValueType.String;\n  }\n  public get isTruthy() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.length > 0;\n  }\n  public get isNewline() {\n    return this._isNewline;\n  }\n  public get isInlineWhitespace() {\n    return this._isInlineWhitespace;\n  }\n  public get isNonWhitespace() {\n    return !this.isNewline && !this.isInlineWhitespace;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      let parsedInt = tryParseInt(this.value);\n      if (parsedInt.exists) {\n        return new IntValue(parsedInt.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    if (newType == ValueType.Float) {\n      let parsedFloat = tryParseFloat(this.value);\n      if (parsedFloat.exists) {\n        return new FloatValue(parsedFloat.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class DivertTargetValue extends Value<Path> {\n  constructor(targetPath: Path) {\n    super(targetPath);\n  }\n  public get valueType() {\n    return ValueType.DivertTarget;\n  }\n  public get targetPath() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set targetPath(value: Path) {\n    this.value = value;\n  }\n  public get isTruthy(): never {\n    throw new Error(\"Shouldn't be checking the truthiness of a divert target\");\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"DivertTargetValue(\" + this.targetPath + \")\";\n  }\n}\n\nexport class VariablePointerValue extends Value<string> {\n  public _contextIndex: number;\n\n  constructor(variableName: string, contextIndex: number = -1) {\n    super(variableName);\n\n    this._contextIndex = contextIndex;\n  }\n\n  public get contextIndex() {\n    return this._contextIndex;\n  }\n  public set contextIndex(value: number) {\n    this._contextIndex = value;\n  }\n  public get variableName() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set variableName(value: string) {\n    this.value = value;\n  }\n  public get valueType() {\n    return ValueType.VariablePointer;\n  }\n\n  public get isTruthy(): never {\n    throw new Error(\n      \"Shouldn't be checking the truthiness of a variable pointer\"\n    );\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"VariablePointerValue(\" + this.variableName + \")\";\n  }\n  public Copy() {\n    return new VariablePointerValue(this.variableName, this.contextIndex);\n  }\n}\n\nexport class ListValue extends Value<InkList> {\n  public get isTruthy() {\n    if (this.value === null) {\n      return throwNullException(\"this.value\");\n    }\n    return this.value.Count > 0;\n  }\n  public get valueType() {\n    return ValueType.List;\n  }\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == ValueType.Int) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new IntValue(0);\n      else return new IntValue(max.Value);\n    } else if (newType == ValueType.Float) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new FloatValue(0.0);\n      else return new FloatValue(max.Value);\n    } else if (newType == ValueType.String) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new StringValue(\"\");\n      else {\n        return new StringValue(max.Key.toString());\n      }\n    }\n\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  constructor();\n  constructor(list: InkList);\n  constructor(listOrSingleItem: InkListItem, singleValue: number);\n  constructor(listOrSingleItem?: InkListItem | InkList, singleValue?: number) {\n    super(null);\n\n    if (!listOrSingleItem && !singleValue) {\n      this.value = new InkList();\n    } else if (listOrSingleItem instanceof InkList) {\n      this.value = new InkList(listOrSingleItem);\n    } else if (\n      listOrSingleItem instanceof InkListItem &&\n      typeof singleValue === \"number\"\n    ) {\n      this.value = new InkList({\n        Key: listOrSingleItem,\n        Value: singleValue,\n      });\n    }\n  }\n  public static RetainListOriginsForAssignment(\n    oldValue: InkObject | null,\n    newValue: InkObject\n  ) {\n    let oldList = asOrNull(oldValue, ListValue);\n    let newList = asOrNull(newValue, ListValue);\n\n    if (newList && newList.value === null)\n      return throwNullException(\"newList.value\");\n    if (oldList && oldList.value === null)\n      return throwNullException(\"oldList.value\");\n\n    // When assigning the empty list, try to retain any initial origin names\n    if (oldList && newList && newList.value!.Count == 0)\n      newList.value!.SetInitialOriginNames(oldList.value!.originNames);\n  }\n}\n\nexport enum ValueType {\n  Int = 0,\n  Float = 1,\n  List = 2,\n  String = 3,\n  DivertTarget = 4,\n  VariablePointer = 5,\n}\n","import { StringValue } from \"./Value\";\nimport { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { INamedContent } from \"./INamedContent\";\nimport { InkObject } from \"./Object\";\nimport { SearchResult } from \"./SearchResult\";\nimport { Path } from \"./Path\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { asINamedContentOrNull, asOrNull, asOrThrows } from \"./TypeAssertion\";\n\nexport class Container extends InkObject implements INamedContent {\n  public name: string = \"\";\n\n  public _content: InkObject[] = [];\n  public namedContent: Map<string, INamedContent> = new Map();\n\n  public visitsShouldBeCounted: boolean = false;\n  public turnIndexShouldBeCounted: boolean = false;\n  public countingAtStartOnly: boolean = false;\n\n  public _pathToFirstLeafContent: Path | null = null;\n\n  get hasValidName() {\n    return this.name != null && this.name.length > 0;\n  }\n  get content() {\n    return this._content;\n  }\n  set content(value: InkObject[]) {\n    this.AddContent(value);\n  }\n  get namedOnlyContent() {\n    let namedOnlyContentDict: Map<string, InkObject> | null = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      let inkObject = asOrThrows(value, InkObject);\n      namedOnlyContentDict.set(key, inkObject);\n    }\n\n    for (let c of this.content) {\n      let named = asINamedContentOrNull(c);\n      if (named != null && named.hasValidName) {\n        namedOnlyContentDict.delete(named.name);\n      }\n    }\n\n    if (namedOnlyContentDict.size == 0) namedOnlyContentDict = null;\n\n    return namedOnlyContentDict;\n  }\n  set namedOnlyContent(value: Map<string, InkObject> | null) {\n    let existingNamedOnly = this.namedOnlyContent;\n    if (existingNamedOnly != null) {\n      for (let [key] of existingNamedOnly) {\n        this.namedContent.delete(key);\n      }\n    }\n\n    if (value == null) return;\n\n    for (let [, val] of value) {\n      let named = asINamedContentOrNull(val);\n      if (named != null) this.AddToNamedContentOnly(named);\n    }\n  }\n  get countFlags(): number {\n    let flags: Container.CountFlags = 0;\n    if (this.visitsShouldBeCounted) flags |= Container.CountFlags.Visits;\n    if (this.turnIndexShouldBeCounted) flags |= Container.CountFlags.Turns;\n    if (this.countingAtStartOnly) flags |= Container.CountFlags.CountStartOnly;\n\n    if (flags == Container.CountFlags.CountStartOnly) {\n      flags = 0;\n    }\n\n    return flags;\n  }\n  set countFlags(value: number) {\n    let flag: Container.CountFlags = value;\n    if ((flag & Container.CountFlags.Visits) > 0)\n      this.visitsShouldBeCounted = true;\n    if ((flag & Container.CountFlags.Turns) > 0)\n      this.turnIndexShouldBeCounted = true;\n    if ((flag & Container.CountFlags.CountStartOnly) > 0)\n      this.countingAtStartOnly = true;\n  }\n  get pathToFirstLeafContent() {\n    if (this._pathToFirstLeafContent == null)\n      this._pathToFirstLeafContent = this.path.PathByAppendingPath(\n        this.internalPathToFirstLeafContent\n      );\n\n    return this._pathToFirstLeafContent;\n  }\n  get internalPathToFirstLeafContent() {\n    let components: Path.Component[] = [];\n    let container: Container = this;\n    while (container instanceof Container) {\n      if (container.content.length > 0) {\n        components.push(new Path.Component(0));\n        container = container.content[0] as Container;\n      }\n    }\n    return new Path(components);\n  }\n\n  public AddContent(contentObjOrList: InkObject | InkObject[]) {\n    if (contentObjOrList instanceof Array) {\n      let contentList = contentObjOrList as InkObject[];\n\n      for (let c of contentList) {\n        this.AddContent(c);\n      }\n    } else {\n      let contentObj = contentObjOrList as InkObject;\n      this._content.push(contentObj);\n\n      if (contentObj.parent) {\n        throw new Error(\"content is already in \" + contentObj.parent);\n      }\n\n      contentObj.parent = this;\n\n      this.TryAddNamedContent(contentObj);\n    }\n  }\n  public TryAddNamedContent(contentObj: InkObject) {\n    let namedContentObj = asINamedContentOrNull(contentObj);\n    if (namedContentObj != null && namedContentObj.hasValidName) {\n      this.AddToNamedContentOnly(namedContentObj);\n    }\n  }\n  public AddToNamedContentOnly(namedContentObj: INamedContent) {\n    Debug.AssertType(\n      namedContentObj,\n      InkObject,\n      \"Can only add Runtime.Objects to a Runtime.Container\"\n    );\n    let runtimeObj = asOrThrows(namedContentObj, InkObject);\n    runtimeObj.parent = this;\n\n    this.namedContent.set(namedContentObj.name, namedContentObj);\n  }\n  public ContentAtPath(\n    path: Path,\n    partialPathStart: number = 0,\n    partialPathLength: number = -1\n  ) {\n    if (partialPathLength == -1) partialPathLength = path.length;\n\n    let result = new SearchResult();\n    result.approximate = false;\n\n    let currentContainer: Container | null = this;\n    let currentObj: InkObject = this;\n\n    for (let i = partialPathStart; i < partialPathLength; ++i) {\n      let comp = path.GetComponent(i);\n      if (currentContainer == null) {\n        result.approximate = true;\n        break;\n      }\n\n      let foundObj: InkObject | null = currentContainer.ContentWithPathComponent(\n        comp\n      );\n\n      if (foundObj == null) {\n        result.approximate = true;\n        break;\n      }\n\n      currentObj = foundObj;\n      currentContainer = asOrNull(foundObj, Container);\n    }\n\n    result.obj = currentObj;\n\n    return result;\n  }\n  public InsertContent(contentObj: InkObject, index: number) {\n    this.content[index] = contentObj;\n\n    if (contentObj.parent) {\n      throw new Error(\"content is already in \" + contentObj.parent);\n    }\n\n    contentObj.parent = this;\n\n    this.TryAddNamedContent(contentObj);\n  }\n  public AddContentsOfContainer(otherContainer: Container) {\n    this.content = this.content.concat(otherContainer.content);\n\n    for (let obj of otherContainer.content) {\n      obj.parent = this;\n      this.TryAddNamedContent(obj);\n    }\n  }\n  public ContentWithPathComponent(component: Path.Component): InkObject | null {\n    if (component.isIndex) {\n      if (component.index >= 0 && component.index < this.content.length) {\n        return this.content[component.index];\n      } else {\n        return null;\n      }\n    } else if (component.isParent) {\n      return this.parent;\n    } else {\n      if (component.name === null) {\n        return throwNullException(\"component.name\");\n      }\n      let foundContent = tryGetValueFromMap(\n        this.namedContent,\n        component.name,\n        null\n      );\n      if (foundContent.exists) {\n        return asOrThrows(foundContent.result, InkObject);\n      } else {\n        return null;\n      }\n    }\n  }\n  public BuildStringOfHierarchy(): string;\n  public BuildStringOfHierarchy(\n    sb: StringBuilder,\n    indentation: number,\n    pointedObj: InkObject | null\n  ): string;\n  public BuildStringOfHierarchy() {\n    let sb: StringBuilder;\n    if (arguments.length == 0) {\n      sb = new StringBuilder();\n      this.BuildStringOfHierarchy(sb, 0, null);\n      return sb.toString();\n    }\n\n    sb = arguments[0] as StringBuilder;\n    let indentation = arguments[1] as number;\n    let pointedObj = arguments[2] as InkObject | null;\n\n    function appendIndentation() {\n      const spacesPerIndent = 4; // Truly const in the original code\n      for (let i = 0; i < spacesPerIndent * indentation; ++i) {\n        sb.Append(\" \");\n      }\n    }\n\n    appendIndentation();\n    sb.Append(\"[\");\n\n    if (this.hasValidName) {\n      sb.AppendFormat(\" ({0})\", this.name);\n    }\n\n    if (this == pointedObj) {\n      sb.Append(\"  <---\");\n    }\n\n    sb.AppendLine();\n\n    indentation++;\n\n    for (let i = 0; i < this.content.length; ++i) {\n      let obj = this.content[i];\n\n      if (obj instanceof Container) {\n        let container = obj as Container;\n\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n      } else {\n        appendIndentation();\n        if (obj instanceof StringValue) {\n          sb.Append('\"');\n          sb.Append(obj.toString().replace(\"\\n\", \"\\\\n\"));\n          sb.Append('\"');\n        } else {\n          sb.Append(obj.toString());\n        }\n      }\n\n      if (i != this.content.length - 1) {\n        sb.Append(\",\");\n      }\n\n      if (!(obj instanceof Container) && obj == pointedObj) {\n        sb.Append(\"  <---\");\n      }\n\n      sb.AppendLine();\n    }\n\n    let onlyNamed: Map<string, INamedContent> = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      if (this.content.indexOf(asOrThrows(value, InkObject)) >= 0) {\n        continue;\n      } else {\n        onlyNamed.set(key, value);\n      }\n    }\n\n    if (onlyNamed.size > 0) {\n      appendIndentation();\n      sb.AppendLine(\"-- named: --\");\n\n      for (let [, value] of onlyNamed) {\n        Debug.AssertType(\n          value,\n          Container,\n          \"Can only print out named Containers\"\n        );\n        let container = value as Container;\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n        sb.AppendLine();\n      }\n    }\n\n    indentation--;\n\n    appendIndentation();\n    sb.Append(\"]\");\n  }\n}\n\nexport namespace Container {\n  export enum CountFlags {\n    Visits = 1,\n    Turns = 2,\n    CountStartOnly = 4,\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class SearchResult {\n  public obj: InkObject | null = null;\n  public approximate: boolean = false;\n\n  get correctObj() {\n    return this.approximate ? null : this.obj;\n  }\n\n  get container() {\n    return this.obj instanceof Container ? this.obj : null;\n  }\n\n  public copy() {\n    let searchResult = new SearchResult();\n    searchResult.obj = this.obj;\n    searchResult.approximate = this.approximate;\n\n    return searchResult;\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class ControlCommand extends InkObject {\n  private _commandType: ControlCommand.CommandType;\n\n  get commandType(): ControlCommand.CommandType {\n    return this._commandType;\n  }\n\n  constructor(\n    commandType: ControlCommand.CommandType = ControlCommand.CommandType.NotSet\n  ) {\n    super();\n    this._commandType = commandType;\n  }\n\n  public Copy() {\n    return new ControlCommand(this.commandType);\n  }\n  public static EvalStart() {\n    return new ControlCommand(ControlCommand.CommandType.EvalStart);\n  }\n  public static EvalOutput() {\n    return new ControlCommand(ControlCommand.CommandType.EvalOutput);\n  }\n  public static EvalEnd() {\n    return new ControlCommand(ControlCommand.CommandType.EvalEnd);\n  }\n  public static Duplicate() {\n    return new ControlCommand(ControlCommand.CommandType.Duplicate);\n  }\n  public static PopEvaluatedValue() {\n    return new ControlCommand(ControlCommand.CommandType.PopEvaluatedValue);\n  }\n  public static PopFunction() {\n    return new ControlCommand(ControlCommand.CommandType.PopFunction);\n  }\n  public static PopTunnel() {\n    return new ControlCommand(ControlCommand.CommandType.PopTunnel);\n  }\n  public static BeginString() {\n    return new ControlCommand(ControlCommand.CommandType.BeginString);\n  }\n  public static EndString() {\n    return new ControlCommand(ControlCommand.CommandType.EndString);\n  }\n  public static NoOp() {\n    return new ControlCommand(ControlCommand.CommandType.NoOp);\n  }\n  public static ChoiceCount() {\n    return new ControlCommand(ControlCommand.CommandType.ChoiceCount);\n  }\n  public static Turns() {\n    return new ControlCommand(ControlCommand.CommandType.Turns);\n  }\n  public static TurnsSince() {\n    return new ControlCommand(ControlCommand.CommandType.TurnsSince);\n  }\n  public static ReadCount() {\n    return new ControlCommand(ControlCommand.CommandType.ReadCount);\n  }\n  public static Random() {\n    return new ControlCommand(ControlCommand.CommandType.Random);\n  }\n  public static SeedRandom() {\n    return new ControlCommand(ControlCommand.CommandType.SeedRandom);\n  }\n  public static VisitIndex() {\n    return new ControlCommand(ControlCommand.CommandType.VisitIndex);\n  }\n  public static SequenceShuffleIndex() {\n    return new ControlCommand(ControlCommand.CommandType.SequenceShuffleIndex);\n  }\n  public static StartThread() {\n    return new ControlCommand(ControlCommand.CommandType.StartThread);\n  }\n  public static Done() {\n    return new ControlCommand(ControlCommand.CommandType.Done);\n  }\n  public static End() {\n    return new ControlCommand(ControlCommand.CommandType.End);\n  }\n  public static ListFromInt() {\n    return new ControlCommand(ControlCommand.CommandType.ListFromInt);\n  }\n  public static ListRange() {\n    return new ControlCommand(ControlCommand.CommandType.ListRange);\n  }\n  public static ListRandom() {\n    return new ControlCommand(ControlCommand.CommandType.ListRandom);\n  }\n  public toString() {\n    return this.commandType.toString();\n  }\n}\n\nexport namespace ControlCommand {\n  export enum CommandType {\n    NotSet = -1,\n    EvalStart,\n    EvalOutput,\n    EvalEnd,\n    Duplicate,\n    PopEvaluatedValue,\n    PopFunction,\n    PopTunnel,\n    BeginString,\n    EndString,\n    NoOp,\n    ChoiceCount,\n    Turns,\n    TurnsSince,\n    Random,\n    SeedRandom,\n    VisitIndex,\n    SequenceShuffleIndex,\n    StartThread,\n    Done,\n    End,\n    ListFromInt,\n    ListRange,\n    ListRandom,\n    ReadCount,\n\n    TOTAL_VALUES,\n  }\n}\n","export enum PushPopType {\n  Tunnel = 0,\n  Function = 1,\n  FunctionEvaluationFromGame = 2,\n}\n","import { InkObject } from \"./Object\";\n\nexport class Glue extends InkObject {\n  public toString() {\n    return \"Glue\";\n  }\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\n\nexport class Pointer {\n  public container: Container | null = null;\n  public index: number = -1;\n\n  constructor();\n  constructor(container: Container | null, index: number);\n  constructor() {\n    if (arguments.length === 2) {\n      this.container = arguments[0];\n      this.index = arguments[1];\n    }\n  }\n\n  public Resolve(): InkObject | null {\n    if (this.index < 0) return this.container;\n    if (this.container == null) return null;\n    if (this.container.content.length == 0) return this.container;\n    if (this.index >= this.container.content.length) return null;\n\n    return this.container.content[this.index];\n  }\n\n  get isNull(): boolean {\n    return this.container == null;\n  }\n\n  get path(): Path | null {\n    if (this.isNull) return null;\n\n    if (this.index >= 0)\n      return this.container!.path.PathByAppendingComponent(\n        new Path.Component(this.index)\n      );\n    else return this.container!.path;\n  }\n\n  public toString(): string {\n    if (!this.container) return \"Ink Pointer (null)\";\n\n    return (\n      \"Ink Pointer -> \" +\n      this.container.path.toString() +\n      \" -- index \" +\n      this.index\n    );\n  }\n\n  // This method does not exist in the original C# code, but is here to maintain the\n  // value semantics of Pointer.\n  public copy(): Pointer {\n    return new Pointer(this.container, this.index);\n  }\n\n  public static StartOf(container: Container | null): Pointer {\n    return new Pointer(container, 0);\n  }\n\n  public static get Null(): Pointer {\n    return new Pointer(null, -1);\n  }\n}\n","import { Path } from \"./Path\";\nimport { PushPopType } from \"./PushPop\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { InkObject } from \"./Object\";\nimport { Pointer } from \"./Pointer\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class Divert extends InkObject {\n  get targetPath() {\n    if (this._targetPath != null && this._targetPath.isRelative) {\n      let targetObj = this.targetPointer.Resolve();\n      if (targetObj) {\n        this._targetPath = targetObj.path;\n      }\n    }\n\n    return this._targetPath;\n  }\n  set targetPath(value: Path | null) {\n    this._targetPath = value;\n    this._targetPointer = Pointer.Null;\n  }\n\n  public _targetPath: Path | null = null;\n\n  get targetPointer() {\n    if (this._targetPointer.isNull) {\n      let targetObj = this.ResolvePath(this._targetPath).obj;\n\n      if (this._targetPath === null)\n        return throwNullException(\"this._targetPath\");\n      if (this._targetPath.lastComponent === null)\n        return throwNullException(\"this._targetPath.lastComponent\");\n\n      if (this._targetPath.lastComponent.isIndex) {\n        if (targetObj === null) return throwNullException(\"targetObj\");\n        this._targetPointer.container =\n          targetObj.parent instanceof Container ? targetObj.parent : null;\n        this._targetPointer.index = this._targetPath.lastComponent.index;\n      } else {\n        this._targetPointer = Pointer.StartOf(\n          targetObj instanceof Container ? targetObj : null\n        );\n      }\n    }\n\n    return this._targetPointer.copy();\n  }\n\n  public _targetPointer: Pointer = Pointer.Null;\n\n  get targetPathString() {\n    if (this.targetPath == null) return null;\n\n    return this.CompactPathString(this.targetPath);\n  }\n  set targetPathString(value: string | null) {\n    if (value == null) {\n      this.targetPath = null;\n    } else {\n      this.targetPath = new Path(value);\n    }\n  }\n\n  public variableDivertName: string | null = null;\n  get hasVariableTarget() {\n    return this.variableDivertName != null;\n  }\n\n  public pushesToStack: boolean = false;\n  public stackPushType: PushPopType = 0;\n\n  public isExternal: boolean = false;\n  public externalArgs: number = 0;\n\n  public isConditional: boolean = false;\n\n  constructor(stackPushType?: PushPopType) {\n    super();\n    this.pushesToStack = false;\n\n    if (typeof stackPushType !== \"undefined\") {\n      this.pushesToStack = true;\n      this.stackPushType = stackPushType;\n    }\n  }\n\n  public Equals(obj: Divert | null) {\n    let otherDivert = obj;\n    if (otherDivert instanceof Divert) {\n      if (this.hasVariableTarget == otherDivert.hasVariableTarget) {\n        if (this.hasVariableTarget) {\n          return this.variableDivertName == otherDivert.variableDivertName;\n        } else {\n          if (this.targetPath === null)\n            return throwNullException(\"this.targetPath\");\n          return this.targetPath.Equals(otherDivert.targetPath);\n        }\n      }\n    }\n    return false;\n  }\n\n  public toString() {\n    if (this.hasVariableTarget) {\n      return \"Divert(variable: \" + this.variableDivertName + \")\";\n    } else if (this.targetPath == null) {\n      return \"Divert(null)\";\n    } else {\n      let sb = new StringBuilder();\n\n      let targetStr = this.targetPath.toString();\n      // int? targetLineNum = DebugLineNumberOfPath (targetPath);\n      let targetLineNum = null;\n      if (targetLineNum != null) {\n        targetStr = \"line \" + targetLineNum;\n      }\n\n      sb.Append(\"Divert\");\n\n      if (this.isConditional) sb.Append(\"?\");\n\n      if (this.pushesToStack) {\n        if (this.stackPushType == PushPopType.Function) {\n          sb.Append(\" function\");\n        } else {\n          sb.Append(\" tunnel\");\n        }\n      }\n\n      sb.Append(\" -> \");\n      sb.Append(this.targetPathString);\n\n      sb.Append(\" (\");\n      sb.Append(targetStr);\n      sb.Append(\")\");\n\n      return sb.toString();\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ChoicePoint extends InkObject {\n  public _pathOnChoice: Path | null = null;\n  public hasCondition: boolean = false;\n  public hasStartContent: boolean = false;\n  public hasChoiceOnlyContent: boolean = false;\n  public isInvisibleDefault: boolean = false;\n  public onceOnly: boolean = true;\n\n  constructor(onceOnly: boolean = true) {\n    super();\n    this.onceOnly = onceOnly;\n  }\n  get pathOnChoice(): Path | null {\n    if (this._pathOnChoice != null && this._pathOnChoice.isRelative) {\n      let choiceTargetObj = this.choiceTarget;\n      if (choiceTargetObj) {\n        this._pathOnChoice = choiceTargetObj.path;\n      }\n    }\n    return this._pathOnChoice;\n  }\n  set pathOnChoice(value: Path | null) {\n    this._pathOnChoice = value;\n  }\n  get choiceTarget(): Container | null {\n    if (this._pathOnChoice === null)\n      return throwNullException(\"ChoicePoint._pathOnChoice\");\n    return this.ResolvePath(this._pathOnChoice).container;\n  }\n  get pathStringOnChoice(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    return this.CompactPathString(this.pathOnChoice);\n  }\n  set pathStringOnChoice(value: string) {\n    this.pathOnChoice = new Path(value);\n  }\n  get flags(): number {\n    let flags = 0;\n    if (this.hasCondition) flags |= 1;\n    if (this.hasStartContent) flags |= 2;\n    if (this.hasChoiceOnlyContent) flags |= 4;\n    if (this.isInvisibleDefault) flags |= 8;\n    if (this.onceOnly) flags |= 16;\n    return flags;\n  }\n  set flags(value: number) {\n    this.hasCondition = (value & 1) > 0;\n    this.hasStartContent = (value & 2) > 0;\n    this.hasChoiceOnlyContent = (value & 4) > 0;\n    this.isInvisibleDefault = (value & 8) > 0;\n    this.onceOnly = (value & 16) > 0;\n  }\n  public toString(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    // int? targetLineNum = DebugLineNumberOfPath (pathOnChoice);\n    let targetLineNum = null;\n    let targetString = this.pathOnChoice.toString();\n\n    if (targetLineNum != null) {\n      targetString = \" line \" + targetLineNum + \"(\" + targetString + \")\";\n    }\n\n    return \"Choice: -> \" + targetString;\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\n\nexport class VariableReference extends InkObject {\n  public name: string | null;\n  public pathForCount: Path | null = null;\n\n  get containerForCount() {\n    if (this.pathForCount === null) return null;\n    return this.ResolvePath(this.pathForCount).container;\n  }\n  get pathStringForCount() {\n    if (this.pathForCount === null) return null;\n\n    return this.CompactPathString(this.pathForCount);\n  }\n  set pathStringForCount(value: string | null) {\n    if (value === null) this.pathForCount = null;\n    else this.pathForCount = new Path(value);\n  }\n\n  constructor(name: string | null = null) {\n    super();\n    this.name = name;\n  }\n\n  public toString() {\n    if (this.name != null) {\n      return \"var(\" + this.name + \")\";\n    } else {\n      let pathStr = this.pathStringForCount;\n      return \"read_count(\" + pathStr + \")\";\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class VariableAssignment extends InkObject {\n  public readonly variableName: string | null;\n  public readonly isNewDeclaration: boolean;\n  public isGlobal: boolean;\n\n  constructor(variableName: string | null, isNewDeclaration: boolean) {\n    super();\n    this.variableName = variableName || null;\n    this.isNewDeclaration = !!isNewDeclaration;\n    this.isGlobal = false;\n  }\n\n  public toString(): string {\n    return \"VarAssign to \" + this.variableName;\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class Void extends InkObject {}\n","import { Value, ValueType, IntValue, ListValue } from \"./Value\";\nimport { StoryException } from \"./StoryException\";\nimport { Void } from \"./Void\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\n\ntype BinaryOp<T> = (left: T, right: T) => any;\ntype UnaryOp<T> = (val: T) => any;\n\nexport class NativeFunctionCall extends InkObject {\n  public static readonly Add: string = \"+\";\n  public static readonly Subtract: string = \"-\";\n  public static readonly Divide: string = \"/\";\n  public static readonly Multiply: string = \"*\";\n  public static readonly Mod: string = \"%\";\n  public static readonly Negate: string = \"_\";\n  public static readonly Equal: string = \"==\";\n  public static readonly Greater: string = \">\";\n  public static readonly Less: string = \"<\";\n  public static readonly GreaterThanOrEquals: string = \">=\";\n  public static readonly LessThanOrEquals: string = \"<=\";\n  public static readonly NotEquals: string = \"!=\";\n  public static readonly Not: string = \"!\";\n  public static readonly And: string = \"&&\";\n  public static readonly Or: string = \"||\";\n  public static readonly Min: string = \"MIN\";\n  public static readonly Max: string = \"MAX\";\n  public static readonly Pow: string = \"POW\";\n  public static readonly Floor: string = \"FLOOR\";\n  public static readonly Ceiling: string = \"CEILING\";\n  public static readonly Int: string = \"INT\";\n  public static readonly Float: string = \"FLOAT\";\n  public static readonly Has: string = \"?\";\n  public static readonly Hasnt: string = \"!?\";\n  public static readonly Intersect: string = \"^\";\n  public static readonly ListMin: string = \"LIST_MIN\";\n  public static readonly ListMax: string = \"LIST_MAX\";\n  public static readonly All: string = \"LIST_ALL\";\n  public static readonly Count: string = \"LIST_COUNT\";\n  public static readonly ValueOfList: string = \"LIST_VALUE\";\n  public static readonly Invert: string = \"LIST_INVERT\";\n\n  public static CallWithName(functionName: string) {\n    return new NativeFunctionCall(functionName);\n  }\n\n  public static CallExistsWithName(functionName: string) {\n    this.GenerateNativeFunctionsIfNecessary();\n    return this._nativeFunctions!.get(functionName);\n  }\n\n  get name() {\n    if (this._name === null)\n      return throwNullException(\"NativeFunctionCall._name\");\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n    if (!this._isPrototype) {\n      if (NativeFunctionCall._nativeFunctions === null)\n        throwNullException(\"NativeFunctionCall._nativeFunctions\");\n      else\n        this._prototype =\n          NativeFunctionCall._nativeFunctions.get(this._name) || null;\n    }\n  }\n  public _name: string | null = null;\n\n  get numberOfParameters() {\n    if (this._prototype) {\n      return this._prototype.numberOfParameters;\n    } else {\n      return this._numberOfParameters;\n    }\n  }\n  set numberOfParameters(value: number) {\n    this._numberOfParameters = value;\n  }\n  public _numberOfParameters: number = 0;\n\n  public Call(parameters: InkObject[]): InkObject | null {\n    if (this._prototype) {\n      return this._prototype.Call(parameters);\n    }\n\n    if (this.numberOfParameters != parameters.length) {\n      throw new Error(\"Unexpected number of parameters\");\n    }\n\n    let hasList = false;\n    for (let p of parameters) {\n      if (p instanceof Void)\n        throw new StoryException(\n          'Attempting to perform operation on a void value. Did you forget to \"return\" a value from a function you called here?'\n        );\n      if (p instanceof ListValue) hasList = true;\n    }\n\n    if (parameters.length == 2 && hasList) {\n      return this.CallBinaryListOperation(parameters);\n    }\n\n    let coercedParams = this.CoerceValuesToSingleType(parameters);\n    let coercedType = coercedParams[0].valueType;\n\n    if (coercedType == ValueType.Int) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.Float) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.String) {\n      return this.CallType<string>(coercedParams);\n    } else if (coercedType == ValueType.DivertTarget) {\n      return this.CallType<Path>(coercedParams);\n    } else if (coercedType == ValueType.List) {\n      return this.CallType<InkList>(coercedParams);\n    }\n\n    return null;\n  }\n\n  public CallType<T>(parametersOfSingleType: Array<Value<T>>) {\n    let param1 = asOrThrows(parametersOfSingleType[0], Value);\n    let valType = param1.valueType;\n\n    let val1 = param1 as Value<T>;\n\n    let paramCount = parametersOfSingleType.length;\n\n    if (paramCount == 2 || paramCount == 1) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let opForTypeObj = this._operationFuncs.get(valType);\n      if (!opForTypeObj) {\n        const key = ValueType[valType];\n        throw new StoryException(\n          \"Cannot perform operation \" + this.name + \" on \" + key\n        );\n      }\n\n      if (paramCount == 2) {\n        let param2 = asOrThrows(parametersOfSingleType[1], Value);\n\n        let val2 = param2 as Value<T>;\n\n        let opForType = opForTypeObj as BinaryOp<T>;\n\n        if (val1.value === null || val2.value === null)\n          return throwNullException(\"NativeFunctionCall.Call BinaryOp values\");\n        let resultVal = opForType(val1.value, val2.value);\n\n        return Value.Create(resultVal);\n      } else {\n        let opForType = opForTypeObj as UnaryOp<T>;\n\n        if (val1.value === null)\n          return throwNullException(\"NativeFunctionCall.Call UnaryOp value\");\n        let resultVal = opForType(val1.value);\n\n        // This code is different from upstream. Since JavaScript treats\n        // integers and floats as the same numbers, it's impossible\n        // to force an number to be either an integer or a float.\n        //\n        // It can be useful to force a specific number type\n        // (especially for divisions), so the result of INT() & FLOAT()\n        // is coerced to the the proper value type.\n        //\n        // Note that we also force all other unary operation to\n        // return the same value type, although this is only\n        // meaningful for numbers. See `Value.Create`.\n        if (this.name === NativeFunctionCall.Int) {\n          return Value.Create(resultVal, ValueType.Int);\n        } else if (this.name === NativeFunctionCall.Float) {\n          return Value.Create(resultVal, ValueType.Float);\n        } else {\n          return Value.Create(resultVal, param1.valueType);\n        }\n      }\n    } else {\n      throw new Error(\n        \"Unexpected number of parameters to NativeFunctionCall: \" +\n          parametersOfSingleType.length\n      );\n    }\n  }\n\n  public CallBinaryListOperation(parameters: InkObject[]) {\n    if (\n      (this.name == \"+\" || this.name == \"-\") &&\n      parameters[0] instanceof ListValue &&\n      parameters[1] instanceof IntValue\n    )\n      return this.CallListIncrementOperation(parameters);\n\n    let v1 = asOrThrows(parameters[0], Value);\n    let v2 = asOrThrows(parameters[1], Value);\n\n    if (\n      (this.name == \"&&\" || this.name == \"||\") &&\n      (v1.valueType != ValueType.List || v2.valueType != ValueType.List)\n    ) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let op = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n      if (op === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallBinaryListOperation op\"\n        );\n      let result = op(v1.isTruthy ? 1 : 0, v2.isTruthy ? 1 : 0);\n      return new IntValue(result);\n    }\n\n    if (v1.valueType == ValueType.List && v2.valueType == ValueType.List)\n      return this.CallType<InkList>([v1, v2]);\n\n    throw new StoryException(\n      \"Can not call use \" +\n        this.name +\n        \" operation on \" +\n        ValueType[v1.valueType] +\n        \" and \" +\n        ValueType[v2.valueType]\n    );\n  }\n\n  public CallListIncrementOperation(listIntParams: InkObject[]) {\n    let listVal = asOrThrows(listIntParams[0], ListValue);\n    let intVal = asOrThrows(listIntParams[1], IntValue);\n\n    let resultInkList = new InkList();\n\n    if (listVal.value === null)\n      return throwNullException(\n        \"NativeFunctionCall.CallListIncrementOperation listVal.value\"\n      );\n    for (let [listItemKey, listItemValue] of listVal.value) {\n      let listItem = InkListItem.fromSerializedKey(listItemKey);\n\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let intOp = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n\n      if (intVal.value === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation intVal.value\"\n        );\n      let targetInt = intOp(listItemValue, intVal.value);\n\n      let itemOrigin = null;\n      if (listVal.value.origins === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation listVal.value.origins\"\n        );\n      for (let origin of listVal.value.origins) {\n        if (origin.name == listItem.originName) {\n          itemOrigin = origin;\n          break;\n        }\n      }\n      if (itemOrigin != null) {\n        let incrementedItem = itemOrigin.TryGetItemWithValue(\n          targetInt,\n          InkListItem.Null\n        );\n        if (incrementedItem.exists)\n          resultInkList.Add(incrementedItem.result, targetInt);\n      }\n    }\n\n    return new ListValue(resultInkList);\n  }\n\n  public CoerceValuesToSingleType(parametersIn: InkObject[]) {\n    let valType = ValueType.Int;\n\n    let specialCaseList: null | ListValue = null;\n\n    for (let obj of parametersIn) {\n      let val = asOrThrows(obj, Value);\n      if (val.valueType > valType) {\n        valType = val.valueType;\n      }\n\n      if (val.valueType == ValueType.List) {\n        specialCaseList = asOrNull(val, ListValue);\n      }\n    }\n\n    let parametersOut = [];\n\n    if (ValueType[valType] == ValueType[ValueType.List]) {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        if (val.valueType == ValueType.List) {\n          parametersOut.push(val);\n        } else if (val.valueType == ValueType.Int) {\n          let intVal = parseInt(val.valueObject);\n\n          specialCaseList = asOrThrows(specialCaseList, ListValue);\n          if (specialCaseList.value === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType specialCaseList.value\"\n            );\n          let list = specialCaseList.value.originOfMaxItem;\n\n          if (list === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType list\"\n            );\n          let item = list.TryGetItemWithValue(intVal, InkListItem.Null);\n          if (item.exists) {\n            let castedValue = new ListValue(item.result, intVal);\n            parametersOut.push(castedValue);\n          } else\n            throw new StoryException(\n              \"Could not find List item with the value \" +\n                intVal +\n                \" in \" +\n                list.name\n            );\n        } else {\n          const key = ValueType[val.valueType];\n          throw new StoryException(\n            \"Cannot mix Lists and \" + key + \" values in this operation\"\n          );\n        }\n      }\n    } else {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        let castedValue = val.Cast(valType);\n        parametersOut.push(castedValue);\n      }\n    }\n\n    return parametersOut;\n  }\n\n  constructor(name: string);\n  constructor(name: string, numberOfParameters: number);\n  constructor();\n  constructor() {\n    super();\n\n    if (arguments.length === 0) {\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n    } else if (arguments.length === 1) {\n      let name = arguments[0];\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n      this.name = name;\n    } else if (arguments.length === 2) {\n      let name = arguments[0];\n      let numberOfParameters = arguments[1];\n\n      this._isPrototype = true;\n      this.name = name;\n      this.numberOfParameters = numberOfParameters;\n    }\n  }\n\n  public static Identity<T>(t: T): any {\n    return t;\n  }\n\n  public static GenerateNativeFunctionsIfNecessary() {\n    if (this._nativeFunctions == null) {\n      this._nativeFunctions = new Map();\n\n      // Int operations\n      this.AddIntBinaryOp(this.Add, (x, y) => x + y);\n      this.AddIntBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddIntBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddIntBinaryOp(this.Divide, (x, y) => Math.floor(x / y));\n      this.AddIntBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddIntUnaryOp(this.Negate, (x) => -x);\n\n      this.AddIntBinaryOp(this.Equal, (x, y) => (x == y ? 1 : 0));\n      this.AddIntBinaryOp(this.Greater, (x, y) => (x > y ? 1 : 0));\n      this.AddIntBinaryOp(this.Less, (x, y) => (x < y ? 1 : 0));\n      this.AddIntBinaryOp(this.GreaterThanOrEquals, (x, y) => (x >= y ? 1 : 0));\n      this.AddIntBinaryOp(this.LessThanOrEquals, (x, y) => (x <= y ? 1 : 0));\n      this.AddIntBinaryOp(this.NotEquals, (x, y) => (x != y ? 1 : 0));\n      this.AddIntUnaryOp(this.Not, (x) => (x == 0 ? 1 : 0));\n\n      this.AddIntBinaryOp(this.And, (x, y) => (x != 0 && y != 0 ? 1 : 0));\n      this.AddIntBinaryOp(this.Or, (x, y) => (x != 0 || y != 0 ? 1 : 0));\n\n      this.AddIntBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddIntBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddIntBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddIntUnaryOp(this.Floor, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Ceiling, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Int, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Float, (x) => x);\n\n      // Float operations\n      this.AddFloatBinaryOp(this.Add, (x, y) => x + y);\n      this.AddFloatBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddFloatBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddFloatBinaryOp(this.Divide, (x, y) => x / y);\n      this.AddFloatBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddFloatUnaryOp(this.Negate, (x) => -x);\n\n      this.AddFloatBinaryOp(this.Equal, (x, y) => (x == y ? 1 : 0));\n      this.AddFloatBinaryOp(this.Greater, (x, y) => (x > y ? 1 : 0));\n      this.AddFloatBinaryOp(this.Less, (x, y) => (x < y ? 1 : 0));\n      this.AddFloatBinaryOp(this.GreaterThanOrEquals, (x, y) =>\n        x >= y ? 1 : 0\n      );\n      this.AddFloatBinaryOp(this.LessThanOrEquals, (x, y) => (x <= y ? 1 : 0));\n      this.AddFloatBinaryOp(this.NotEquals, (x, y) => (x != y ? 1 : 0));\n      this.AddFloatUnaryOp(this.Not, (x) => (x == 0.0 ? 1 : 0));\n\n      this.AddFloatBinaryOp(this.And, (x, y) => (x != 0.0 && y != 0.0 ? 1 : 0));\n      this.AddFloatBinaryOp(this.Or, (x, y) => (x != 0.0 || y != 0.0 ? 1 : 0));\n\n      this.AddFloatBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddFloatBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddFloatBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddFloatUnaryOp(this.Floor, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Ceiling, (x) => Math.ceil(x));\n      this.AddFloatUnaryOp(this.Int, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Float, NativeFunctionCall.Identity);\n\n      // String operations\n      this.AddStringBinaryOp(this.Add, (x, y) => x + y); // concat\n      this.AddStringBinaryOp(this.Equal, (x, y) => (x === y ? 1 : 0));\n      this.AddStringBinaryOp(this.NotEquals, (x, y) => (!(x === y) ? 1 : 0));\n      this.AddStringBinaryOp(this.Has, (x, y) => (x.includes(y) ? 1 : 0));\n      this.AddStringBinaryOp(this.Hasnt, (x, y) => (x.includes(y) ? 0 : 1));\n\n      this.AddListBinaryOp(this.Add, (x, y) => x.Union(y));\n      this.AddListBinaryOp(this.Subtract, (x, y) => x.Without(y));\n      this.AddListBinaryOp(this.Has, (x, y) => (x.Contains(y) ? 1 : 0));\n      this.AddListBinaryOp(this.Hasnt, (x, y) => (x.Contains(y) ? 0 : 1));\n      this.AddListBinaryOp(this.Intersect, (x, y) => x.Intersect(y));\n\n      this.AddListBinaryOp(this.Equal, (x, y) => (x.Equals(y) ? 1 : 0));\n      this.AddListBinaryOp(this.Greater, (x, y) => (x.GreaterThan(y) ? 1 : 0));\n      this.AddListBinaryOp(this.Less, (x, y) => (x.LessThan(y) ? 1 : 0));\n      this.AddListBinaryOp(this.GreaterThanOrEquals, (x, y) =>\n        x.GreaterThanOrEquals(y) ? 1 : 0\n      );\n      this.AddListBinaryOp(this.LessThanOrEquals, (x, y) =>\n        x.LessThanOrEquals(y) ? 1 : 0\n      );\n      this.AddListBinaryOp(this.NotEquals, (x, y) => (!x.Equals(y) ? 1 : 0));\n\n      this.AddListBinaryOp(this.And, (x, y) =>\n        x.Count > 0 && y.Count > 0 ? 1 : 0\n      );\n      this.AddListBinaryOp(this.Or, (x, y) =>\n        x.Count > 0 || y.Count > 0 ? 1 : 0\n      );\n\n      this.AddListUnaryOp(this.Not, (x) => (x.Count == 0 ? 1 : 0));\n\n      this.AddListUnaryOp(this.Invert, (x) => x.inverse);\n      this.AddListUnaryOp(this.All, (x) => x.all);\n      this.AddListUnaryOp(this.ListMin, (x) => x.MinAsList());\n      this.AddListUnaryOp(this.ListMax, (x) => x.MaxAsList());\n      this.AddListUnaryOp(this.Count, (x) => x.Count);\n      this.AddListUnaryOp(this.ValueOfList, (x) => x.maxItem.Value);\n\n      let divertTargetsEqual = (d1: Path, d2: Path) => (d1.Equals(d2) ? 1 : 0);\n      let divertTargetsNotEqual = (d1: Path, d2: Path) =>\n        d1.Equals(d2) ? 0 : 1;\n      this.AddOpToNativeFunc(\n        this.Equal,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsEqual\n      );\n      this.AddOpToNativeFunc(\n        this.NotEquals,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsNotEqual\n      );\n    }\n  }\n\n  public AddOpFuncForType(\n    valType: ValueType,\n    op: UnaryOp<number | InkList> | BinaryOp<number | string | InkList | Path>\n  ): void {\n    if (this._operationFuncs == null) {\n      this._operationFuncs = new Map();\n    }\n\n    this._operationFuncs.set(valType, op);\n  }\n\n  public static AddOpToNativeFunc(\n    name: string,\n    args: number,\n    valType: ValueType,\n    op: UnaryOp<any> | BinaryOp<any>\n  ): void {\n    if (this._nativeFunctions === null)\n      return throwNullException(\"NativeFunctionCall._nativeFunctions\");\n    let nativeFunc = this._nativeFunctions.get(name);\n    if (!nativeFunc) {\n      nativeFunc = new NativeFunctionCall(name, args);\n      this._nativeFunctions.set(name, nativeFunc);\n    }\n\n    nativeFunc.AddOpFuncForType(valType, op);\n  }\n\n  public static AddIntBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Int, op);\n  }\n  public static AddIntUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Int, op);\n  }\n\n  public static AddFloatBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Float, op);\n  }\n  public static AddFloatUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Float, op);\n  }\n\n  public static AddStringBinaryOp(name: string, op: BinaryOp<string>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.String, op);\n  }\n\n  public static AddListBinaryOp(name: string, op: BinaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.List, op);\n  }\n  public static AddListUnaryOp(name: string, op: UnaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.List, op);\n  }\n\n  public toString() {\n    return 'Native \"' + this.name + '\"';\n  }\n\n  public _prototype: NativeFunctionCall | null = null;\n  public _isPrototype: boolean = false;\n  public _operationFuncs: Map<\n    ValueType,\n    BinaryOp<any> | UnaryOp<any>\n  > | null = null;\n  public static _nativeFunctions: Map<string, NativeFunctionCall> | null = null;\n}\n","import { InkObject } from \"./Object\";\n\nexport class Tag extends InkObject {\n  public readonly text: string;\n\n  constructor(tagText: string) {\n    super();\n    this.text = tagText.toString() || \"\";\n  }\n\n  public toString(): string {\n    return \"# \" + this.text;\n  }\n}\n","import { Path } from \"./Path\";\nimport { CallStack } from \"./CallStack\";\nimport { throwNullException } from \"./NullException\";\nimport { InkObject } from \"./Object\";\n\nexport class Choice extends InkObject {\n  public text: string = \"\";\n  public index: number = 0;\n  public threadAtGeneration: CallStack.Thread | null = null;\n  public sourcePath: string = \"\";\n  public targetPath: Path | null = null;\n  public isInvisibleDefault: boolean = false;\n  public originalThreadIndex: number = 0;\n\n  get pathStringOnChoice(): string {\n    if (this.targetPath === null)\n      return throwNullException(\"Choice.targetPath\");\n    return this.targetPath.toString();\n  }\n  set pathStringOnChoice(value: string) {\n    this.targetPath = new Path(value);\n  }\n}\n","import { InkList, InkListItem, SerializedInkListItem } from \"./InkList\";\nimport { ListValue } from \"./Value\";\nimport { TryGetResult } from \"./TryGetResult\";\n\nexport class ListDefinition {\n  public _name: string;\n  public _items: Map<SerializedInkListItem, number> | null;\n  public _itemNameToValues: Map<string, number>;\n\n  constructor(name: string, items: Map<string, number> | null) {\n    this._name = name || \"\";\n    this._items = null;\n    this._itemNameToValues = items || new Map();\n  }\n  get name() {\n    return this._name;\n  }\n  get items() {\n    if (this._items == null) {\n      this._items = new Map();\n      for (let [key, value] of this._itemNameToValues) {\n        let item = new InkListItem(this.name, key);\n        this._items.set(item.serialized(), value);\n      }\n    }\n\n    return this._items;\n  }\n\n  public ValueForItem(item: InkListItem) {\n    if (!item.itemName) return 0;\n\n    let intVal = this._itemNameToValues.get(item.itemName);\n    if (typeof intVal !== \"undefined\") return intVal;\n    else return 0;\n  }\n  public ContainsItem(item: InkListItem) {\n    if (!item.itemName) return false;\n    if (item.originName != this.name) return false;\n\n    return this._itemNameToValues.has(item.itemName);\n  }\n  public ContainsItemWithName(itemName: string) {\n    return this._itemNameToValues.has(itemName);\n  }\n  public TryGetItemWithValue(\n    val: number,\n    /* out */ item: InkListItem\n  ): TryGetResult<InkListItem> {\n    for (let [key, value] of this._itemNameToValues) {\n      if (value == val) {\n        item = new InkListItem(this.name, key);\n        return { result: item, exists: true };\n      }\n    }\n\n    item = InkListItem.Null;\n    return { result: item, exists: false };\n  }\n  public TryGetValueForItem(\n    item: InkListItem,\n    /* out */ intVal: number\n  ): TryGetResult<number> {\n    if (!item.itemName) return { result: 0, exists: false };\n    let value = this._itemNameToValues.get(item.itemName);\n\n    if (!value) return { result: 0, exists: false };\n    return { result: value, exists: true };\n  }\n}\n","import { InkListItem } from \"./InkList\";\nimport { ListValue } from \"./Value\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { TryGetResult } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ListDefinitionsOrigin {\n  protected _lists: Map<string, ListDefinition>;\n  protected _allUnambiguousListValueCache: Map<string, ListValue>;\n\n  constructor(lists: ListDefinition[]) {\n    this._lists = new Map();\n    this._allUnambiguousListValueCache = new Map();\n\n    for (let list of lists) {\n      this._lists.set(list.name, list);\n\n      for (let [key, val] of list.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        let listValue = new ListValue(item, val);\n\n        if (!item.itemName) {\n          throw new Error(\"item.itemName is null or undefined.\");\n        }\n\n        this._allUnambiguousListValueCache.set(item.itemName, listValue);\n        this._allUnambiguousListValueCache.set(item.fullName, listValue);\n      }\n    }\n  }\n  get lists(): ListDefinition[] {\n    let listOfLists: ListDefinition[] = [];\n\n    for (let [, value] of this._lists) {\n      listOfLists.push(value);\n    }\n\n    return listOfLists;\n  }\n  public TryListGetDefinition(\n    name: string | null,\n    /* out */ def: ListDefinition | null\n  ): TryGetResult<ListDefinition | null> {\n    if (name === null) {\n      return { result: def, exists: false };\n    }\n    // initially, this function returns a boolean and the second parameter is an out.\n    let definition = this._lists.get(name);\n    if (!definition) return { result: def, exists: false };\n\n    return { result: definition, exists: true };\n  }\n  public FindSingleItemListWithName(name: string | null) {\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let val = this._allUnambiguousListValueCache.get(name);\n\n    if (typeof val !== \"undefined\") {\n      return val;\n    }\n\n    return null;\n  }\n}\n","import { Container } from \"./Container\";\nimport {\n  Value,\n  IntValue,\n  FloatValue,\n  StringValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n} from \"./Value\";\nimport { Glue } from \"./Glue\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { Divert } from \"./Divert\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { VariableReference } from \"./VariableReference\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { Path } from \"./Path\";\nimport { Choice } from \"./Choice\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { InkListItem, InkList } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull, asNumberOrThrows } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class JsonSerialisation {\n  public static JArrayToRuntimeObjList(\n    jArray: any[],\n    skipLast: boolean = false\n  ) {\n    let count = jArray.length;\n    if (skipLast) count--;\n\n    let list: InkObject[] = [];\n\n    for (let i = 0; i < count; i++) {\n      let jTok = jArray[i];\n      let runtimeObj = this.JTokenToRuntimeObject(jTok);\n      if (runtimeObj === null) {\n        return throwNullException(\"runtimeObj\");\n      }\n      list.push(runtimeObj);\n    }\n\n    return list;\n  }\n\n  public static WriteDictionaryRuntimeObjs(\n    writer: SimpleJson.Writer,\n    dictionary: Map<string, InkObject>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dictionary) {\n      writer.WritePropertyStart(key);\n      this.WriteRuntimeObject(writer, value);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteListRuntimeObjs(\n    writer: SimpleJson.Writer,\n    list: InkObject[]\n  ) {\n    writer.WriteArrayStart();\n    for (let value of list) {\n      this.WriteRuntimeObject(writer, value);\n    }\n    writer.WriteArrayEnd();\n  }\n\n  public static WriteIntDictionary(\n    writer: SimpleJson.Writer,\n    dict: Map<string, number>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dict) {\n      writer.WriteIntProperty(key, value);\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteRuntimeObject(\n    writer: SimpleJson.Writer,\n    obj: InkObject\n  ): void {\n    let container = asOrNull(obj, Container);\n    if (container) {\n      this.WriteRuntimeContainer(writer, container);\n      return;\n    }\n\n    let divert = asOrNull(obj, Divert);\n    if (divert) {\n      let divTypeKey = \"->\";\n      if (divert.isExternal) {\n        divTypeKey = \"x()\";\n      } else if (divert.pushesToStack) {\n        if (divert.stackPushType == PushPopType.Function) {\n          divTypeKey = \"f()\";\n        } else if (divert.stackPushType == PushPopType.Tunnel) {\n          divTypeKey = \"->t->\";\n        }\n      }\n\n      let targetStr;\n      if (divert.hasVariableTarget) {\n        targetStr = divert.variableDivertName;\n      } else {\n        targetStr = divert.targetPathString;\n      }\n\n      writer.WriteObjectStart();\n      writer.WriteProperty(divTypeKey, targetStr);\n\n      if (divert.hasVariableTarget) {\n        writer.WriteProperty(\"var\", true);\n      }\n\n      if (divert.isConditional) {\n        writer.WriteProperty(\"c\", true);\n      }\n\n      if (divert.externalArgs > 0) {\n        writer.WriteIntProperty(\"exArgs\", divert.externalArgs);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choicePoint = asOrNull(obj, ChoicePoint);\n    if (choicePoint) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"*\", choicePoint.pathStringOnChoice);\n      writer.WriteIntProperty(\"flg\", choicePoint.flags);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let intVal = asOrNull(obj, IntValue);\n    if (intVal) {\n      writer.WriteInt(intVal.value);\n      return;\n    }\n\n    let floatVal = asOrNull(obj, FloatValue);\n    if (floatVal) {\n      writer.WriteFloat(floatVal.value);\n      return;\n    }\n\n    let strVal = asOrNull(obj, StringValue);\n    if (strVal) {\n      if (strVal.isNewline) {\n        writer.Write(\"\\n\", false);\n      } else {\n        writer.WriteStringStart();\n        writer.WriteStringInner(\"^\");\n        writer.WriteStringInner(strVal.value);\n        writer.WriteStringEnd();\n      }\n      return;\n    }\n\n    let listVal = asOrNull(obj, ListValue);\n    if (listVal) {\n      this.WriteInkList(writer, listVal);\n      return;\n    }\n\n    let divTargetVal = asOrNull(obj, DivertTargetValue);\n    if (divTargetVal) {\n      writer.WriteObjectStart();\n      if (divTargetVal.value === null) {\n        return throwNullException(\"divTargetVal.value\");\n      }\n      writer.WriteProperty(\"^->\", divTargetVal.value.componentsString);\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let varPtrVal = asOrNull(obj, VariablePointerValue);\n    if (varPtrVal) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"^var\", varPtrVal.value);\n      writer.WriteIntProperty(\"ci\", varPtrVal.contextIndex);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let glue = asOrNull(obj, Glue);\n    if (glue) {\n      writer.Write(\"<>\");\n      return;\n    }\n\n    let controlCmd = asOrNull(obj, ControlCommand);\n    if (controlCmd) {\n      writer.Write(\n        JsonSerialisation._controlCommandNames[controlCmd.commandType]\n      );\n      return;\n    }\n\n    let nativeFunc = asOrNull(obj, NativeFunctionCall);\n    if (nativeFunc) {\n      let name = nativeFunc.name;\n\n      if (name == \"^\") name = \"L^\";\n\n      writer.Write(name);\n      return;\n    }\n\n    let varRef = asOrNull(obj, VariableReference);\n    if (varRef) {\n      writer.WriteObjectStart();\n      let readCountPath = varRef.pathStringForCount;\n      if (readCountPath != null) {\n        writer.WriteProperty(\"CNT?\", readCountPath);\n      } else {\n        writer.WriteProperty(\"VAR?\", varRef.name);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let varAss = asOrNull(obj, VariableAssignment);\n    if (varAss) {\n      writer.WriteObjectStart();\n\n      let key = varAss.isGlobal ? \"VAR=\" : \"temp=\";\n      writer.WriteProperty(key, varAss.variableName);\n\n      // Reassignment?\n      if (!varAss.isNewDeclaration) writer.WriteProperty(\"re\", true);\n\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let voidObj = asOrNull(obj, Void);\n    if (voidObj) {\n      writer.Write(\"void\");\n      return;\n    }\n\n    let tag = asOrNull(obj, Tag);\n    if (tag) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"#\", tag.text);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choice = asOrNull(obj, Choice);\n    if (choice) {\n      this.WriteChoice(writer, choice);\n      return;\n    }\n\n    throw new Error(\"Failed to convert runtime object to Json token: \" + obj);\n  }\n\n  public static JObjectToDictionaryRuntimeObjs(jObject: Record<string, any>) {\n    let dict: Map<string, InkObject> = new Map();\n\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        let inkObject = this.JTokenToRuntimeObject(jObject[key]);\n        if (inkObject === null) {\n          return throwNullException(\"inkObject\");\n        }\n        dict.set(key, inkObject);\n      }\n    }\n\n    return dict;\n  }\n\n  public static JObjectToIntDictionary(jObject: Record<string, any>) {\n    let dict: Map<string, number> = new Map();\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        dict.set(key, parseInt(jObject[key]));\n      }\n    }\n    return dict;\n  }\n\n  public static JTokenToRuntimeObject(token: any): InkObject | null {\n    if (typeof token === \"number\" && !isNaN(token)) {\n      return Value.Create(token);\n    }\n\n    if (typeof token === \"string\") {\n      let str = token.toString();\n\n      // String value\n      let firstChar = str[0];\n      if (firstChar == \"^\") return new StringValue(str.substring(1));\n      else if (firstChar == \"\\n\" && str.length == 1)\n        return new StringValue(\"\\n\");\n\n      // Glue\n      if (str == \"<>\") return new Glue();\n\n      // Control commands (would looking up in a hash set be faster?)\n      for (let i = 0; i < JsonSerialisation._controlCommandNames.length; ++i) {\n        let cmdName = JsonSerialisation._controlCommandNames[i];\n        if (str == cmdName) {\n          return new ControlCommand(i);\n        }\n      }\n\n      // Native functions\n      if (str == \"L^\") str = \"^\";\n      if (NativeFunctionCall.CallExistsWithName(str))\n        return NativeFunctionCall.CallWithName(str);\n\n      // Pop\n      if (str == \"->->\") return ControlCommand.PopTunnel();\n      else if (str == \"~ret\") return ControlCommand.PopFunction();\n\n      // Void\n      if (str == \"void\") return new Void();\n    }\n\n    if (typeof token === \"object\" && !Array.isArray(token)) {\n      let obj = token as Record<string, any>;\n      let propValue;\n\n      // Divert target value to path\n      if (obj[\"^->\"]) {\n        propValue = obj[\"^->\"];\n        return new DivertTargetValue(new Path(propValue.toString()));\n      }\n\n      // VariablePointerValue\n      if (obj[\"^var\"]) {\n        propValue = obj[\"^var\"];\n        let varPtr = new VariablePointerValue(propValue.toString());\n        if (\"ci\" in obj) {\n          propValue = obj[\"ci\"];\n          varPtr.contextIndex = parseInt(propValue);\n        }\n        return varPtr;\n      }\n\n      // Divert\n      let isDivert = false;\n      let pushesToStack = false;\n      let divPushType = PushPopType.Function;\n      let external = false;\n      if ((propValue = obj[\"->\"])) {\n        isDivert = true;\n      } else if ((propValue = obj[\"f()\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Function;\n      } else if ((propValue = obj[\"->t->\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Tunnel;\n      } else if ((propValue = obj[\"x()\"])) {\n        isDivert = true;\n        external = true;\n        pushesToStack = false;\n        divPushType = PushPopType.Function;\n      }\n\n      if (isDivert) {\n        let divert = new Divert();\n        divert.pushesToStack = pushesToStack;\n        divert.stackPushType = divPushType;\n        divert.isExternal = external;\n\n        let target = propValue.toString();\n\n        if ((propValue = obj[\"var\"])) divert.variableDivertName = target;\n        else divert.targetPathString = target;\n\n        divert.isConditional = !!obj[\"c\"];\n\n        if (external) {\n          if ((propValue = obj[\"exArgs\"]))\n            divert.externalArgs = parseInt(propValue);\n        }\n\n        return divert;\n      }\n\n      // Choice\n      if ((propValue = obj[\"*\"])) {\n        let choice = new ChoicePoint();\n        choice.pathStringOnChoice = propValue.toString();\n\n        if ((propValue = obj[\"flg\"])) choice.flags = parseInt(propValue);\n\n        return choice;\n      }\n\n      // Variable reference\n      if ((propValue = obj[\"VAR?\"])) {\n        return new VariableReference(propValue.toString());\n      } else if ((propValue = obj[\"CNT?\"])) {\n        let readCountVarRef = new VariableReference();\n        readCountVarRef.pathStringForCount = propValue.toString();\n        return readCountVarRef;\n      }\n\n      // Variable assignment\n      let isVarAss = false;\n      let isGlobalVar = false;\n      if ((propValue = obj[\"VAR=\"])) {\n        isVarAss = true;\n        isGlobalVar = true;\n      } else if ((propValue = obj[\"temp=\"])) {\n        isVarAss = true;\n        isGlobalVar = false;\n      }\n      if (isVarAss) {\n        let varName = propValue.toString();\n        let isNewDecl = !obj[\"re\"];\n        let varAss = new VariableAssignment(varName, isNewDecl);\n        varAss.isGlobal = isGlobalVar;\n        return varAss;\n      }\n      if (obj[\"#\"] !== undefined) {\n        propValue = obj[\"#\"];\n        return new Tag(propValue.toString());\n      }\n\n      // List value\n      if ((propValue = obj[\"list\"])) {\n        // var listContent = (Dictionary<string, object>)propValue;\n        let listContent = propValue as Record<string, any>;\n        let rawList = new InkList();\n        if ((propValue = obj[\"origins\"])) {\n          // var namesAsObjs = (List<object>)propValue;\n          let namesAsObjs = propValue as string[];\n          // rawList.SetInitialOriginNames(namesAsObjs.Cast<string>().ToList());\n          rawList.SetInitialOriginNames(namesAsObjs);\n        }\n\n        for (let key in listContent) {\n          if (listContent.hasOwnProperty(key)) {\n            let nameToVal = listContent[key];\n            let item = new InkListItem(key);\n            let val = parseInt(nameToVal);\n            rawList.Add(item, val);\n          }\n        }\n\n        return new ListValue(rawList);\n      }\n\n      if (obj[\"originalChoicePath\"] != null) return this.JObjectToChoice(obj);\n    }\n\n    // Array is always a Runtime.Container\n    if (Array.isArray(token)) {\n      return this.JArrayToContainer(token);\n    }\n\n    if (token === null || token === undefined) return null;\n\n    throw new Error(\n      \"Failed to convert token to runtime object: \" + JSON.stringify(token)\n    );\n  }\n\n  public static WriteRuntimeContainer(\n    writer: SimpleJson.Writer,\n    container: Container | null,\n    withoutName: boolean = false\n  ) {\n    writer.WriteArrayStart();\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    for (let c of container.content) this.WriteRuntimeObject(writer, c);\n\n    let namedOnlyContent = container.namedOnlyContent;\n    let countFlags = container.countFlags;\n    let hasNameProperty = container.name != null && !withoutName;\n\n    let hasTerminator =\n      namedOnlyContent != null || countFlags > 0 || hasNameProperty;\n    if (hasTerminator) {\n      writer.WriteObjectStart();\n    }\n\n    if (namedOnlyContent != null) {\n      for (let [key, value] of namedOnlyContent) {\n        let name = key;\n        let namedContainer = asOrNull(value, Container);\n        writer.WritePropertyStart(name);\n        this.WriteRuntimeContainer(writer, namedContainer, true);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (hasNameProperty) writer.WriteProperty(\"#n\", container.name);\n\n    if (hasTerminator) writer.WriteObjectEnd();\n    else writer.WriteNull();\n\n    writer.WriteArrayEnd();\n  }\n\n  public static JArrayToContainer(jArray: any[]) {\n    let container = new Container();\n    container.content = this.JArrayToRuntimeObjList(jArray, true);\n\n    let terminatingObj = jArray[jArray.length - 1] as Record<string, any>;\n    if (terminatingObj != null) {\n      let namedOnlyContent = new Map();\n\n      for (let key in terminatingObj) {\n        if (key == \"#f\") {\n          container.countFlags = parseInt(terminatingObj[key]);\n        } else if (key == \"#n\") {\n          container.name = terminatingObj[key].toString();\n        } else {\n          let namedContentItem = this.JTokenToRuntimeObject(\n            terminatingObj[key]\n          );\n          // var namedSubContainer = namedContentItem as Container;\n          let namedSubContainer = asOrNull(namedContentItem, Container);\n          if (namedSubContainer) namedSubContainer.name = key;\n          namedOnlyContent.set(key, namedContentItem);\n        }\n      }\n\n      container.namedOnlyContent = namedOnlyContent;\n    }\n\n    return container;\n  }\n\n  public static JObjectToChoice(jObj: Record<string, any>) {\n    let choice = new Choice();\n    choice.text = jObj[\"text\"].toString();\n    choice.index = parseInt(jObj[\"index\"]);\n    choice.sourcePath = jObj[\"originalChoicePath\"].toString();\n    choice.originalThreadIndex = parseInt(jObj[\"originalThreadIndex\"]);\n    choice.pathStringOnChoice = jObj[\"targetPath\"].toString();\n    return choice;\n  }\n\n  public static WriteChoice(writer: SimpleJson.Writer, choice: Choice) {\n    writer.WriteObjectStart();\n    writer.WriteProperty(\"text\", choice.text);\n    writer.WriteIntProperty(\"index\", choice.index);\n    writer.WriteProperty(\"originalChoicePath\", choice.sourcePath);\n    writer.WriteIntProperty(\"originalThreadIndex\", choice.originalThreadIndex);\n    writer.WriteProperty(\"targetPath\", choice.pathStringOnChoice);\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteInkList(writer: SimpleJson.Writer, listVal: ListValue) {\n    let rawList = listVal.value;\n    if (rawList === null) {\n      return throwNullException(\"rawList\");\n    }\n\n    writer.WriteObjectStart();\n    writer.WritePropertyStart(\"list\");\n    writer.WriteObjectStart();\n\n    for (let [key, val] of rawList) {\n      let item = InkListItem.fromSerializedKey(key);\n      let itemVal = val;\n\n      if (item.itemName === null) {\n        return throwNullException(\"item.itemName\");\n      }\n\n      writer.WritePropertyNameStart();\n      writer.WritePropertyNameInner(item.originName ? item.originName : \"?\");\n      writer.WritePropertyNameInner(\".\");\n      writer.WritePropertyNameInner(item.itemName);\n      writer.WritePropertyNameEnd();\n\n      writer.Write(itemVal);\n\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    writer.WritePropertyEnd();\n\n    if (\n      rawList.Count == 0 &&\n      rawList.originNames != null &&\n      rawList.originNames.length > 0\n    ) {\n      writer.WritePropertyStart(\"origins\");\n      writer.WriteArrayStart();\n      for (let name of rawList.originNames) writer.Write(name);\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n  }\n\n  public static ListDefinitionsToJToken(origin: ListDefinitionsOrigin) {\n    let result: Record<string, any> = {};\n\n    for (let def of origin.lists) {\n      let listDefJson: Record<string, any> = {};\n\n      for (let [key, val] of def.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.itemName === null) {\n          return throwNullException(\"item.itemName\");\n        }\n        listDefJson[item.itemName] = val;\n      }\n\n      result[def.name] = listDefJson;\n    }\n\n    return result;\n  }\n\n  public static JTokenToListDefinitions(obj: Record<string, any>) {\n    // var defsObj = (Dictionary<string, object>)obj;\n    let defsObj = obj;\n\n    let allDefs: ListDefinition[] = [];\n\n    for (let key in defsObj) {\n      if (defsObj.hasOwnProperty(key)) {\n        let name = key.toString();\n        // var listDefJson = (Dictionary<string, object>)kv.Value;\n        let listDefJson = defsObj[key] as Record<string, any>;\n\n        // Cast (string, object) to (string, int) for items\n        let items: Map<string, number> = new Map();\n\n        for (let nameValueKey in listDefJson) {\n          if (defsObj.hasOwnProperty(key)) {\n            let nameValue = listDefJson[nameValueKey];\n            items.set(nameValueKey, parseInt(nameValue));\n          }\n        }\n\n        let def = new ListDefinition(name, items);\n        allDefs.push(def);\n      }\n    }\n\n    return new ListDefinitionsOrigin(allDefs);\n  }\n\n  private static _controlCommandNames = (() => {\n    let _controlCommandNames: string[] = [];\n\n    _controlCommandNames[ControlCommand.CommandType.EvalStart] = \"ev\";\n    _controlCommandNames[ControlCommand.CommandType.EvalOutput] = \"out\";\n    _controlCommandNames[ControlCommand.CommandType.EvalEnd] = \"/ev\";\n    _controlCommandNames[ControlCommand.CommandType.Duplicate] = \"du\";\n    _controlCommandNames[ControlCommand.CommandType.PopEvaluatedValue] = \"pop\";\n    _controlCommandNames[ControlCommand.CommandType.PopFunction] = \"~ret\";\n    _controlCommandNames[ControlCommand.CommandType.PopTunnel] = \"->->\";\n    _controlCommandNames[ControlCommand.CommandType.BeginString] = \"str\";\n    _controlCommandNames[ControlCommand.CommandType.EndString] = \"/str\";\n    _controlCommandNames[ControlCommand.CommandType.NoOp] = \"nop\";\n    _controlCommandNames[ControlCommand.CommandType.ChoiceCount] = \"choiceCnt\";\n    _controlCommandNames[ControlCommand.CommandType.Turns] = \"turn\";\n    _controlCommandNames[ControlCommand.CommandType.TurnsSince] = \"turns\";\n    _controlCommandNames[ControlCommand.CommandType.ReadCount] = \"readc\";\n    _controlCommandNames[ControlCommand.CommandType.Random] = \"rnd\";\n    _controlCommandNames[ControlCommand.CommandType.SeedRandom] = \"srnd\";\n    _controlCommandNames[ControlCommand.CommandType.VisitIndex] = \"visit\";\n    _controlCommandNames[ControlCommand.CommandType.SequenceShuffleIndex] =\n      \"seq\";\n    _controlCommandNames[ControlCommand.CommandType.StartThread] = \"thread\";\n    _controlCommandNames[ControlCommand.CommandType.Done] = \"done\";\n    _controlCommandNames[ControlCommand.CommandType.End] = \"end\";\n    _controlCommandNames[ControlCommand.CommandType.ListFromInt] = \"listInt\";\n    _controlCommandNames[ControlCommand.CommandType.ListRange] = \"range\";\n    _controlCommandNames[ControlCommand.CommandType.ListRandom] = \"lrnd\";\n\n    for (let i = 0; i < ControlCommand.CommandType.TOTAL_VALUES; ++i) {\n      if (_controlCommandNames[i] == null)\n        throw new Error(\"Control command not accounted for in serialisation\");\n    }\n\n    return _controlCommandNames;\n  })();\n}\n","import { PushPopType } from \"./PushPop\";\nimport { Path } from \"./Path\";\nimport { Story } from \"./Story\";\nimport { StoryException } from \"./StoryException\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { ListValue } from \"./Value\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { Pointer } from \"./Pointer\";\nimport { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class CallStack {\n  get elements() {\n    return this.callStack;\n  }\n\n  get depth() {\n    return this.elements.length;\n  }\n\n  get currentElement() {\n    let thread = this._threads[this._threads.length - 1];\n    let cs = thread.callstack;\n    return cs[cs.length - 1];\n  }\n\n  get currentElementIndex() {\n    return this.callStack.length - 1;\n  }\n\n  get currentThread(): CallStack.Thread {\n    return this._threads[this._threads.length - 1];\n  }\n  set currentThread(value: CallStack.Thread) {\n    Debug.Assert(\n      this._threads.length == 1,\n      \"Shouldn't be directly setting the current thread when we have a stack of them\"\n    );\n\n    this._threads.length = 0;\n    this._threads.push(value);\n  }\n\n  get canPop() {\n    return this.callStack.length > 1;\n  }\n\n  constructor(storyContext: Story);\n  constructor(toCopy: CallStack);\n  constructor() {\n    if (arguments[0] instanceof Story) {\n      let storyContext = arguments[0] as Story;\n\n      this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n      this.Reset();\n    } else {\n      let toCopy = arguments[0] as CallStack;\n\n      this._threads = [];\n      for (let otherThread of toCopy._threads) {\n        this._threads.push(otherThread.Copy());\n      }\n      this._threadCounter = toCopy._threadCounter;\n      this._startOfRoot = toCopy._startOfRoot;\n    }\n  }\n\n  public Reset() {\n    this._threads = [];\n    this._threads.push(new CallStack.Thread());\n\n    this._threads[0].callstack.push(\n      new CallStack.Element(PushPopType.Tunnel, this._startOfRoot)\n    );\n  }\n\n  public SetJsonToken(jObject: Record<string, any>, storyContext: Story) {\n    this._threads.length = 0;\n\n    // TODO: (List<object>) jObject [\"threads\"];\n    let jThreads: any[] = jObject[\"threads\"];\n\n    for (let jThreadTok of jThreads) {\n      // TODO: var jThreadObj = (Dictionary<string, object>)jThreadTok;\n      let jThreadObj = jThreadTok;\n      let thread = new CallStack.Thread(jThreadObj, storyContext);\n      this._threads.push(thread);\n    }\n\n    // TODO: (int)jObject [\"threadCounter\"];\n    this._threadCounter = parseInt(jObject[\"threadCounter\"]);\n    this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n  }\n  public WriteJson(w: SimpleJson.Writer) {\n    w.WriteObject((writer) => {\n      writer.WritePropertyStart(\"threads\");\n      writer.WriteArrayStart();\n\n      for (let thread of this._threads) {\n        thread.WriteJson(writer);\n      }\n\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WritePropertyStart(\"threadCounter\");\n      writer.WriteInt(this._threadCounter);\n      writer.WritePropertyEnd();\n    });\n  }\n\n  public PushThread() {\n    let newThread = this.currentThread.Copy();\n    this._threadCounter++;\n    newThread.threadIndex = this._threadCounter;\n    this._threads.push(newThread);\n  }\n\n  public ForkThread() {\n    let forkedThread = this.currentThread.Copy();\n    this._threadCounter++;\n    forkedThread.threadIndex = this._threadCounter;\n    return forkedThread;\n  }\n\n  public PopThread() {\n    if (this.canPopThread) {\n      this._threads.splice(this._threads.indexOf(this.currentThread), 1); // should be equivalent to a pop()\n    } else {\n      throw new Error(\"Can't pop thread\");\n    }\n  }\n\n  get canPopThread() {\n    return this._threads.length > 1 && !this.elementIsEvaluateFromGame;\n  }\n\n  get elementIsEvaluateFromGame() {\n    return this.currentElement.type == PushPopType.FunctionEvaluationFromGame;\n  }\n\n  public Push(\n    type: PushPopType,\n    externalEvaluationStackHeight: number = 0,\n    outputStreamLengthWithPushed: number = 0\n  ) {\n    let element = new CallStack.Element(\n      type,\n      this.currentElement.currentPointer,\n      false\n    );\n\n    element.evaluationStackHeightWhenPushed = externalEvaluationStackHeight;\n    element.functionStartInOutputStream = outputStreamLengthWithPushed;\n\n    this.callStack.push(element);\n  }\n\n  public CanPop(type: PushPopType | null = null) {\n    if (!this.canPop) return false;\n\n    if (type == null) return true;\n\n    return this.currentElement.type == type;\n  }\n\n  public Pop(type: PushPopType | null = null) {\n    if (this.CanPop(type)) {\n      this.callStack.pop();\n      return;\n    } else {\n      throw new Error(\"Mismatched push/pop in Callstack\");\n    }\n  }\n\n  public GetTemporaryVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ) {\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    let varValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (varValue.exists) {\n      return varValue.result;\n    } else {\n      return null;\n    }\n  }\n\n  public SetTemporaryVariable(\n    name: string,\n    value: any,\n    declareNew: boolean,\n    contextIndex: number = -1\n  ) {\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    if (!declareNew && !contextElement.temporaryVariables.get(name)) {\n      throw new StoryException(\n        \"Could not find temporary variable to set: \" + name\n      );\n    }\n\n    let oldValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (oldValue.exists)\n      ListValue.RetainListOriginsForAssignment(oldValue.result, value);\n\n    contextElement.temporaryVariables.set(name, value);\n  }\n\n  public ContextForVariableNamed(name: string) {\n    if (this.currentElement.temporaryVariables.get(name)) {\n      return this.currentElementIndex + 1;\n    } else {\n      return 0;\n    }\n  }\n\n  public ThreadWithIndex(index: number) {\n    let filtered = this._threads.filter((t) => {\n      if (t.threadIndex == index) return t;\n    });\n\n    return filtered.length > 0 ? filtered[0] : null;\n  }\n\n  get callStack() {\n    return this.currentThread.callstack;\n  }\n\n  get callStackTrace() {\n    let sb = new StringBuilder();\n\n    for (let t = 0; t < this._threads.length; t++) {\n      let thread = this._threads[t];\n      let isCurrent = t == this._threads.length - 1;\n      sb.AppendFormat(\n        \"=== THREAD {0}/{1} {2}===\\n\",\n        t + 1,\n        this._threads.length,\n        isCurrent ? \"(current) \" : \"\"\n      );\n\n      for (let i = 0; i < thread.callstack.length; i++) {\n        if (thread.callstack[i].type == PushPopType.Function)\n          sb.Append(\"  [FUNCTION] \");\n        else sb.Append(\"  [TUNNEL] \");\n\n        let pointer = thread.callstack[i].currentPointer;\n        if (!pointer.isNull) {\n          sb.Append(\"<SOMEWHERE IN \");\n          if (pointer.container === null) {\n            return throwNullException(\"pointer.container\");\n          }\n          sb.Append(pointer.container.path.toString());\n          sb.AppendLine(\">\");\n        }\n      }\n    }\n\n    return sb.toString();\n  }\n\n  public _threads!: CallStack.Thread[]; // Banged because it's initialized in Reset().\n  public _threadCounter: number = 0;\n  public _startOfRoot: Pointer = Pointer.Null;\n}\n\nexport namespace CallStack {\n  export class Element {\n    public currentPointer: Pointer;\n    public inExpressionEvaluation: boolean;\n    public temporaryVariables: Map<string, InkObject>;\n    public type: PushPopType;\n\n    public evaluationStackHeightWhenPushed: number = 0;\n    public functionStartInOutputStream: number = 0;\n\n    constructor(\n      type: PushPopType,\n      pointer: Pointer,\n      inExpressionEvaluation: boolean = false\n    ) {\n      this.currentPointer = pointer.copy();\n      this.inExpressionEvaluation = inExpressionEvaluation;\n      this.temporaryVariables = new Map();\n      this.type = type;\n    }\n\n    public Copy() {\n      let copy = new Element(\n        this.type,\n        this.currentPointer,\n        this.inExpressionEvaluation\n      );\n      copy.temporaryVariables = new Map(this.temporaryVariables);\n      copy.evaluationStackHeightWhenPushed = this.evaluationStackHeightWhenPushed;\n      copy.functionStartInOutputStream = this.functionStartInOutputStream;\n      return copy;\n    }\n  }\n\n  export class Thread {\n    public callstack: Element[];\n    public threadIndex: number = 0;\n    public previousPointer: Pointer = Pointer.Null;\n\n    constructor();\n    constructor(jThreadObj: any, storyContext: Story);\n    constructor() {\n      this.callstack = [];\n\n      if (arguments[0] && arguments[1]) {\n        let jThreadObj = arguments[0];\n        let storyContext = arguments[1];\n\n        // TODO: (int) jThreadObj['threadIndex'] can raise;\n        this.threadIndex = parseInt(jThreadObj[\"threadIndex\"]);\n\n        let jThreadCallstack = jThreadObj[\"callstack\"];\n\n        for (let jElTok of jThreadCallstack) {\n          let jElementObj = jElTok;\n\n          // TODO: (int) jElementObj['type'] can raise;\n          let pushPopType: PushPopType = parseInt(jElementObj[\"type\"]);\n\n          let pointer = Pointer.Null;\n\n          let currentContainerPathStr: string;\n          // TODO: jElementObj.TryGetValue (\"cPath\", out currentContainerPathStrToken);\n          let currentContainerPathStrToken = jElementObj[\"cPath\"];\n          if (typeof currentContainerPathStrToken !== \"undefined\") {\n            currentContainerPathStr = currentContainerPathStrToken.toString();\n\n            let threadPointerResult = storyContext.ContentAtPath(\n              new Path(currentContainerPathStr)\n            );\n            pointer.container = threadPointerResult.container;\n            pointer.index = parseInt(jElementObj[\"idx\"]);\n\n            if (threadPointerResult.obj == null)\n              throw new Error(\n                \"When loading state, internal story location couldn't be found: \" +\n                  currentContainerPathStr +\n                  \". Has the story changed since this save data was created?\"\n              );\n            else if (threadPointerResult.approximate) {\n              if (pointer.container === null) {\n                return throwNullException(\"pointer.container\");\n              }\n              storyContext.Warning(\n                \"When loading state, exact internal story location couldn't be found: '\" +\n                  currentContainerPathStr +\n                  \"', so it was approximated to '\" +\n                  pointer.container.path.toString() +\n                  \"' to recover. Has the story changed since this save data was created?\"\n              );\n            }\n          }\n\n          let inExpressionEvaluation = !!jElementObj[\"exp\"];\n\n          let el = new Element(pushPopType, pointer, inExpressionEvaluation);\n\n          let temps = jElementObj[\"temp\"];\n          if (typeof temps !== \"undefined\") {\n            el.temporaryVariables = JsonSerialisation.JObjectToDictionaryRuntimeObjs(\n              temps\n            );\n          } else {\n            el.temporaryVariables.clear();\n          }\n\n          this.callstack.push(el);\n        }\n\n        let prevContentObjPath = jThreadObj[\"previousContentObject\"];\n        if (typeof prevContentObjPath !== \"undefined\") {\n          let prevPath = new Path(prevContentObjPath.toString());\n          this.previousPointer = storyContext.PointerAtPath(prevPath);\n        }\n      }\n    }\n\n    public Copy() {\n      let copy = new Thread();\n      copy.threadIndex = this.threadIndex;\n      for (let e of this.callstack) {\n        copy.callstack.push(e.Copy());\n      }\n      copy.previousPointer = this.previousPointer.copy();\n      return copy;\n    }\n\n    public WriteJson(writer: SimpleJson.Writer) {\n      writer.WriteObjectStart();\n\n      writer.WritePropertyStart(\"callstack\");\n      writer.WriteArrayStart();\n      for (let el of this.callstack) {\n        writer.WriteObjectStart();\n        if (!el.currentPointer.isNull) {\n          if (el.currentPointer.container === null) {\n            return throwNullException(\"el.currentPointer.container\");\n          }\n          writer.WriteProperty(\n            \"cPath\",\n            el.currentPointer.container.path.componentsString\n          );\n          writer.WriteIntProperty(\"idx\", el.currentPointer.index);\n        }\n\n        writer.WriteProperty(\"exp\", el.inExpressionEvaluation);\n        writer.WriteIntProperty(\"type\", el.type);\n\n        if (el.temporaryVariables.size > 0) {\n          writer.WritePropertyStart(\"temp\");\n          JsonSerialisation.WriteDictionaryRuntimeObjs(\n            writer,\n            el.temporaryVariables\n          );\n          writer.WritePropertyEnd();\n        }\n\n        writer.WriteObjectEnd();\n      }\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WriteIntProperty(\"threadIndex\", this.threadIndex);\n\n      if (!this.previousPointer.isNull) {\n        let resolvedPointer = this.previousPointer.Resolve();\n        if (resolvedPointer === null) {\n          return throwNullException(\"this.previousPointer.Resolve()\");\n        }\n        writer.WriteProperty(\n          \"previousContentObject\",\n          resolvedPointer.path.toString()\n        );\n      }\n\n      writer.WriteObjectEnd();\n    }\n  }\n}\n","import {\n  AbstractValue,\n  Value,\n  VariablePointerValue,\n  ListValue,\n  IntValue,\n  FloatValue,\n} from \"./Value\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { InkObject } from \"./Object\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { StoryException } from \"./StoryException\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { asOrThrows, asOrNull, isEquatable } from \"./TypeAssertion\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { CallStack } from \"./CallStack\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class VariablesState {\n  // The way variableChangedEvent is a bit different than the reference implementation.\n  // Originally it uses the C# += operator to add delegates, but in js we need to maintain\n  // an actual collection of delegates (ie. callbacks) to register a new one, there is a\n  // special ObserveVariableChange method below.\n  public variableChangedEventCallbacks: Array<\n    (variableName: string, newValue: InkObject) => void\n  > = [];\n  public variableChangedEvent(variableName: string, newValue: InkObject): void {\n    for (let callback of this.variableChangedEventCallbacks) {\n      callback(variableName, newValue);\n    }\n  }\n\n  public patch: StatePatch | null = null;\n\n  get batchObservingVariableChanges() {\n    return this._batchObservingVariableChanges;\n  }\n  set batchObservingVariableChanges(value: boolean) {\n    this._batchObservingVariableChanges = value;\n    if (value) {\n      this._changedVariablesForBatchObs = new Set();\n    } else {\n      if (this._changedVariablesForBatchObs != null) {\n        for (let variableName of this._changedVariablesForBatchObs) {\n          let currentValue = this._globalVariables.get(variableName);\n          if (!currentValue) {\n            throwNullException(\"currentValue\");\n          } else {\n            this.variableChangedEvent(variableName, currentValue);\n          }\n        }\n\n        this._changedVariablesForBatchObs = null;\n      }\n    }\n  }\n\n  get callStack() {\n    return this._callStack;\n  }\n  set callStack(callStack) {\n    this._callStack = callStack;\n  }\n\n  private _batchObservingVariableChanges: boolean = false;\n\n  // the original code uses a magic getter and setter for global variables,\n  // allowing things like variableState['varname]. This is not quite possible\n  // in js without a Proxy, so it is replaced with this $ function.\n  public $(variableName: string, value: any) {\n    if (typeof value === \"undefined\") {\n      let varContents = null;\n\n      if (this.patch !== null) {\n        varContents = this.patch.TryGetGlobal(variableName, null);\n        if (varContents.exists)\n          return (varContents.result as AbstractValue).valueObject;\n      }\n\n      varContents = this._globalVariables.get(variableName);\n\n      if (typeof varContents === \"undefined\") {\n        varContents = this._defaultGlobalVariables.get(variableName);\n      }\n\n      if (typeof varContents !== \"undefined\")\n        return (varContents as AbstractValue).valueObject;\n      else return null;\n    } else {\n      if (typeof this._defaultGlobalVariables.get(variableName) === \"undefined\")\n        throw new StoryException(\n          \"Cannot assign to a variable (\" +\n            variableName +\n            \") that hasn't been declared in the story\"\n        );\n\n      let val = Value.Create(value);\n      if (val == null) {\n        if (value == null) {\n          throw new StoryException(\"Cannot pass null to VariableState\");\n        } else {\n          throw new StoryException(\n            \"Invalid value passed to VariableState: \" + value.toString()\n          );\n        }\n      }\n\n      this.SetGlobal(variableName, val);\n    }\n  }\n\n  constructor(\n    callStack: CallStack,\n    listDefsOrigin: ListDefinitionsOrigin | null\n  ) {\n    this._globalVariables = new Map();\n    this._callStack = callStack;\n    this._listDefsOrigin = listDefsOrigin;\n\n    // if es6 proxies are available, use them.\n    try {\n      // the proxy is used to allow direct manipulation of global variables.\n      // It first tries to access the objects own property, and if none is\n      // found it delegates the call to the $ method, defined below\n      let p = new Proxy(this, {\n        get(target: any, name) {\n          return name in target ? target[name] : target.$(name);\n        },\n        set(target: any, name, value) {\n          if (name in target) target[name] = value;\n          else target.$(name, value);\n          return true; // returning a falsy value make the trap fail\n        },\n      });\n\n      return p;\n    } catch (e) {\n      // thr proxy object is not available in this context. we should warn the\n      // dev but writting to the console feels a bit intrusive.\n      // console.log(\"ES6 Proxy not available - direct manipulation of global variables can't work, use $() instead.\");\n    }\n  }\n\n  public ApplyPatch() {\n    if (this.patch === null) {\n      return throwNullException(\"this.patch\");\n    }\n\n    for (let [namedVarKey, namedVarValue] of this.patch.globals) {\n      this._globalVariables.set(namedVarKey, namedVarValue);\n    }\n\n    if (this._changedVariablesForBatchObs !== null) {\n      for (let name of this.patch.changedVariables) {\n        this._changedVariablesForBatchObs.add(name);\n      }\n    }\n\n    this.patch = null;\n  }\n\n  public SetJsonToken(jToken: Record<string, any>) {\n    this._globalVariables.clear();\n\n    for (let [varValKey, varValValue] of this._defaultGlobalVariables) {\n      let loadedToken = jToken[varValKey];\n      if (typeof loadedToken !== \"undefined\") {\n        let tokenInkObject = JsonSerialisation.JTokenToRuntimeObject(\n          loadedToken\n        );\n        if (tokenInkObject === null) {\n          return throwNullException(\"tokenInkObject\");\n        }\n        this._globalVariables.set(varValKey, tokenInkObject);\n      } else {\n        this._globalVariables.set(varValKey, varValValue);\n      }\n    }\n  }\n\n  public static dontSaveDefaultValues: boolean = true;\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n    for (let [keyValKey, keyValValue] of this._globalVariables) {\n      let name = keyValKey;\n      let val = keyValValue;\n\n      if (VariablesState.dontSaveDefaultValues) {\n        if (this._defaultGlobalVariables.has(name)) {\n          let defaultVal = this._defaultGlobalVariables.get(name)!;\n          if (this.RuntimeObjectsEqual(val, defaultVal)) continue;\n        }\n      }\n\n      writer.WritePropertyStart(name);\n      JsonSerialisation.WriteRuntimeObject(writer, val);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public RuntimeObjectsEqual(\n    obj1: InkObject | null,\n    obj2: InkObject | null\n  ): boolean {\n    if (obj1 === null) {\n      return throwNullException(\"obj1\");\n    }\n    if (obj2 === null) {\n      return throwNullException(\"obj2\");\n    }\n\n    if (obj1.constructor !== obj2.constructor) return false;\n\n    let intVal = asOrNull(obj1, IntValue);\n    if (intVal !== null) {\n      return intVal.value === asOrThrows(obj2, IntValue).value;\n    }\n\n    let floatVal = asOrNull(obj1, FloatValue);\n    if (floatVal !== null) {\n      return floatVal.value === asOrThrows(obj2, FloatValue).value;\n    }\n\n    let val1 = asOrNull(obj1, Value);\n    let val2 = asOrNull(obj2, Value);\n    if (val1 !== null && val2 !== null) {\n      if (isEquatable(val1.valueObject) && isEquatable(val2.valueObject)) {\n        return val1.valueObject.Equals(val2.valueObject);\n      } else {\n        return val1.valueObject === val2.valueObject;\n      }\n    }\n\n    throw new Error(\n      \"FastRoughDefinitelyEquals: Unsupported runtime object type: \" +\n        obj1.constructor.name\n    );\n  }\n\n  public GetVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ): InkObject | null {\n    let varValue = this.GetRawVariableWithName(name, contextIndex);\n\n    // var varPointer = varValue as VariablePointerValue;\n    let varPointer = asOrNull(varValue, VariablePointerValue);\n    if (varPointer !== null) {\n      varValue = this.ValueAtVariablePointer(varPointer);\n    }\n\n    return varValue;\n  }\n\n  public TryGetDefaultVariableValue(name: string | null): InkObject | null {\n    let val = tryGetValueFromMap(this._defaultGlobalVariables, name, null);\n    return val.exists ? val.result : null;\n  }\n\n  public GlobalVariableExistsWithName(name: string) {\n    return (\n      this._globalVariables.has(name) ||\n      (this._defaultGlobalVariables !== null &&\n        this._defaultGlobalVariables.has(name))\n    );\n  }\n\n  public GetRawVariableWithName(name: string | null, contextIndex: number) {\n    let varValue: InkObject | null = null;\n\n    if (contextIndex == 0 || contextIndex == -1) {\n      let variableValue = null;\n      if (this.patch !== null) {\n        variableValue = this.patch.TryGetGlobal(name, null);\n        if (variableValue.exists) return variableValue.result!;\n      }\n\n      // this is a conditional assignment\n      variableValue = tryGetValueFromMap(this._globalVariables, name, null);\n      if (variableValue.exists) return variableValue.result;\n\n      if (this._defaultGlobalVariables !== null) {\n        variableValue = tryGetValueFromMap(\n          this._defaultGlobalVariables,\n          name,\n          null\n        );\n        if (variableValue.exists) return variableValue.result;\n      }\n\n      if (this._listDefsOrigin === null)\n        return throwNullException(\"VariablesState._listDefsOrigin\");\n      let listItemValue = this._listDefsOrigin.FindSingleItemListWithName(name);\n      if (listItemValue) return listItemValue;\n    }\n\n    varValue = this._callStack.GetTemporaryVariableWithName(name, contextIndex);\n\n    return varValue;\n  }\n\n  public ValueAtVariablePointer(pointer: VariablePointerValue) {\n    return this.GetVariableWithName(pointer.variableName, pointer.contextIndex);\n  }\n\n  public Assign(varAss: VariableAssignment, value: InkObject) {\n    let name = varAss.variableName;\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let contextIndex = -1;\n\n    let setGlobal = false;\n    if (varAss.isNewDeclaration) {\n      setGlobal = varAss.isGlobal;\n    } else {\n      setGlobal = this.GlobalVariableExistsWithName(name);\n    }\n\n    if (varAss.isNewDeclaration) {\n      // var varPointer = value as VariablePointerValue;\n      let varPointer = asOrNull(value, VariablePointerValue);\n      if (varPointer !== null) {\n        let fullyResolvedVariablePointer = this.ResolveVariablePointer(\n          varPointer\n        );\n        value = fullyResolvedVariablePointer;\n      }\n    } else {\n      let existingPointer = null;\n      do {\n        // existingPointer = GetRawVariableWithName (name, contextIndex) as VariablePointerValue;\n        existingPointer = asOrNull(\n          this.GetRawVariableWithName(name, contextIndex),\n          VariablePointerValue\n        );\n        if (existingPointer != null) {\n          name = existingPointer.variableName;\n          contextIndex = existingPointer.contextIndex;\n          setGlobal = contextIndex == 0;\n        }\n      } while (existingPointer != null);\n    }\n\n    if (setGlobal) {\n      this.SetGlobal(name, value);\n    } else {\n      this._callStack.SetTemporaryVariable(\n        name,\n        value,\n        varAss.isNewDeclaration,\n        contextIndex\n      );\n    }\n  }\n\n  public SnapshotDefaultGlobals() {\n    this._defaultGlobalVariables = new Map(this._globalVariables);\n  }\n\n  public RetainListOriginsForAssignment(\n    oldValue: InkObject,\n    newValue: InkObject\n  ) {\n    let oldList = asOrThrows(oldValue, ListValue);\n    let newList = asOrThrows(newValue, ListValue);\n\n    if (oldList.value && newList.value && newList.value.Count == 0) {\n      newList.value.SetInitialOriginNames(oldList.value.originNames);\n    }\n  }\n\n  public SetGlobal(variableName: string | null, value: InkObject) {\n    let oldValue = null;\n\n    if (this.patch === null) {\n      oldValue = tryGetValueFromMap(this._globalVariables, variableName, null);\n    }\n\n    if (this.patch !== null) {\n      oldValue = this.patch.TryGetGlobal(variableName, null);\n      if (!oldValue.exists) {\n        oldValue = tryGetValueFromMap(\n          this._globalVariables,\n          variableName,\n          null\n        );\n      }\n    }\n\n    ListValue.RetainListOriginsForAssignment(oldValue!.result!, value);\n\n    if (variableName === null) {\n      return throwNullException(\"variableName\");\n    }\n\n    if (this.patch !== null) {\n      this.patch.SetGlobal(variableName, value);\n    } else {\n      this._globalVariables.set(variableName, value);\n    }\n\n    // TODO: Not sure !== is equivalent to !value.Equals(oldValue)\n    if (\n      this.variableChangedEvent !== null &&\n      oldValue !== null &&\n      value !== oldValue.result\n    ) {\n      if (this.batchObservingVariableChanges) {\n        if (this._changedVariablesForBatchObs === null) {\n          return throwNullException(\"this._changedVariablesForBatchObs\");\n        }\n\n        if (this.patch !== null) {\n          this.patch.AddChangedVariable(variableName);\n        } else if (this._changedVariablesForBatchObs !== null) {\n          this._changedVariablesForBatchObs.add(variableName);\n        }\n      } else {\n        this.variableChangedEvent(variableName, value);\n      }\n    }\n  }\n\n  public ResolveVariablePointer(varPointer: VariablePointerValue) {\n    let contextIndex = varPointer.contextIndex;\n\n    if (contextIndex == -1)\n      contextIndex = this.GetContextIndexOfVariableNamed(\n        varPointer.variableName\n      );\n\n    let valueOfVariablePointedTo = this.GetRawVariableWithName(\n      varPointer.variableName,\n      contextIndex\n    );\n\n    // var doubleRedirectionPointer = valueOfVariablePointedTo as VariablePointerValue;\n    let doubleRedirectionPointer = asOrNull(\n      valueOfVariablePointedTo,\n      VariablePointerValue\n    );\n    if (doubleRedirectionPointer != null) {\n      return doubleRedirectionPointer;\n    } else {\n      return new VariablePointerValue(varPointer.variableName, contextIndex);\n    }\n  }\n\n  public GetContextIndexOfVariableNamed(varName: string) {\n    if (this.GlobalVariableExistsWithName(varName)) return 0;\n\n    return this._callStack.currentElementIndex;\n  }\n\n  /**\n   * This function is specific to the js version of ink. It allows to register a\n   * callback that will be called when a variable changes. The original code uses\n   * `state.variableChangedEvent += callback` instead.\n   *\n   * @param {function} callback\n   */\n  public ObserveVariableChange(\n    callback: (variableName: string, newValue: InkObject) => void\n  ) {\n    this.variableChangedEventCallbacks.push(callback);\n  }\n\n  private _globalVariables: Map<string, InkObject>;\n  private _defaultGlobalVariables: Map<string, InkObject> = new Map();\n\n  private _callStack: CallStack;\n  private _changedVariablesForBatchObs: Set<string> | null = new Set();\n  private _listDefsOrigin: ListDefinitionsOrigin | null;\n}\n","// Taken from https://gist.github.com/blixt/f17b47c62508be59987b\n// Ink uses a seedable PRNG of which there is none in native javascript.\nexport class PRNG {\n  private seed: number;\n\n  constructor(seed: number) {\n    this.seed = seed % 2147483647;\n    if (this.seed <= 0) this.seed += 2147483646;\n  }\n  public next(): number {\n    return (this.seed = (this.seed * 16807) % 2147483647);\n  }\n  public nextFloat(): number {\n    return (this.next() - 1) / 2147483646;\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class StatePatch {\n  get globals() {\n    return this._globals;\n  }\n  get changedVariables() {\n    return this._changedVariables;\n  }\n  get visitCounts() {\n    return this._visitCounts;\n  }\n  get turnIndices() {\n    return this._turnIndices;\n  }\n\n  constructor();\n  constructor(toCopy: StatePatch | null);\n  constructor() {\n    if (arguments.length === 1 && arguments[0] !== null) {\n      let toCopy = arguments[0] as StatePatch;\n      this._globals = new Map(toCopy._globals);\n      this._changedVariables = new Set(toCopy._changedVariables);\n      this._visitCounts = new Map(toCopy._visitCounts);\n      this._turnIndices = new Map(toCopy._turnIndices);\n    } else {\n      this._globals = new Map();\n      this._changedVariables = new Set();\n      this._visitCounts = new Map();\n      this._turnIndices = new Map();\n    }\n  }\n\n  public TryGetGlobal(name: string | null, /* out */ value: InkObject | null) {\n    if (name !== null && this._globals.has(name)) {\n      return { result: this._globals.get(name), exists: true };\n    }\n\n    return { result: value, exists: false };\n  }\n\n  public SetGlobal(name: string, value: InkObject) {\n    this._globals.set(name, value);\n  }\n\n  public AddChangedVariable(name: string) {\n    return this._changedVariables.add(name);\n  }\n\n  public TryGetVisitCount(container: Container, /* out */ count: number) {\n    if (this._visitCounts.has(container)) {\n      return { result: this._visitCounts.get(container), exists: true };\n    }\n\n    return { result: count, exists: false };\n  }\n\n  public SetVisitCount(container: Container, count: number) {\n    this._visitCounts.set(container, count);\n  }\n\n  public SetTurnIndex(container: Container, index: number) {\n    this._turnIndices.set(container, index);\n  }\n\n  public TryGetTurnIndex(container: Container, /* out */ index: number) {\n    if (this._turnIndices.has(container)) {\n      return { result: this._turnIndices.get(container), exists: true };\n    }\n\n    return { result: index, exists: false };\n  }\n\n  private _globals: Map<string, InkObject>;\n  private _changedVariables: Set<string> = new Set();\n  private _visitCounts: Map<Container, number> = new Map();\n  private _turnIndices: Map<Container, number> = new Map();\n}\n","export class SimpleJson {\n  public static TextToDictionary(text: string) {\n    return new SimpleJson.Reader(text).ToDictionary();\n  }\n\n  public static TextToArray(text: string) {\n    return new SimpleJson.Reader(text).ToArray();\n  }\n}\n\nexport namespace SimpleJson {\n  export class Reader {\n    constructor(text: string) {\n      this._rootObject = JSON.parse(text);\n    }\n\n    public ToDictionary() {\n      return this._rootObject as Record<string, any>;\n    }\n\n    public ToArray() {\n      return this._rootObject as any[];\n    }\n\n    private _rootObject: any[] | Record<string, any>;\n  }\n\n  // In C#, this class writes json tokens directly to a StringWriter or\n  // another stream. Here, a temporary hierarchy is created in the form\n  // of a javascript object, which is serialised in the `toString` method.\n  // See individual methods and properties for more information.\n  export class Writer {\n    public WriteObject(inner: (w: Writer) => void) {\n      this.WriteObjectStart();\n      inner(this);\n      this.WriteObjectEnd();\n    }\n\n    // Add a new object.\n    public WriteObjectStart() {\n      this.StartNewObject(true);\n\n      let newObject: Record<string, any> = {};\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This object is created as the value of a property,\n        // inside an other object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This object is created as the child of an array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This object is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Object)\n      );\n    }\n\n    public WriteObjectEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Write a property name / value pair to the current object.\n    public WriteProperty(\n      name: any,\n      innerOrContent: ((w: Writer) => void) | string | boolean | null\n    ) {\n      this.WritePropertyStart(name);\n      if (arguments[1] instanceof Function) {\n        let inner = arguments[1];\n        inner(this);\n      } else {\n        let content: string | boolean | null = arguments[1];\n        this.Write(content);\n      }\n      this.WritePropertyEnd();\n    }\n\n    // Int and Float are separate calls, since there both are\n    // numbers in JavaScript, but need to be handled differently.\n\n    public WriteIntProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteInt(content);\n      this.WritePropertyEnd();\n    }\n\n    public WriteFloatProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteFloat(content);\n      this.WritePropertyEnd();\n    }\n\n    // Prepare a new property name, which will be use to add the\n    // new object when calling _addToCurrentObject() from a Write\n    // method.\n    public WritePropertyStart(name: any) {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._propertyNameStack.push(name);\n\n      this.IncrementChildCount();\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n    }\n\n    public WritePropertyEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Property);\n      this.Assert(this.childCount === 1);\n      this._stateStack.pop();\n    }\n\n    // Prepare a new property name, except this time, the property name\n    // will be created by concatenating all the strings passed to\n    // WritePropertyNameInner.\n    public WritePropertyNameStart() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this.IncrementChildCount();\n\n      this._currentPropertyName = \"\";\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.PropertyName)\n      );\n    }\n\n    public WritePropertyNameEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._propertyNameStack.push(this._currentPropertyName!);\n      this._currentPropertyName = null;\n      this._stateStack.pop();\n    }\n\n    public WritePropertyNameInner(str: string) {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._currentPropertyName += str;\n    }\n\n    // Add a new array.\n    public WriteArrayStart() {\n      this.StartNewObject(true);\n\n      let newObject: any[] = [];\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This array is created as the value of a property,\n        // inside an object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This array is created as the child of another array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This array is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Array)\n      );\n    }\n\n    public WriteArrayEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Array);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Add the value to the appropriate collection (array / object), given the current\n    // context.\n    public Write(\n      value: number | string | boolean | null,\n      escape: boolean = true\n    ) {\n      if (value === null) {\n        console.error(\"Warning: trying to write a null string\");\n        return;\n      }\n\n      this.StartNewObject(false);\n      this._addToCurrentObject(value);\n    }\n\n    public WriteInt(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n\n      // Math.floor is used as a precaution:\n      //     1. to ensure that the value is written as an integer\n      //        (without a fractional part -> 1 instead of 1.0), even\n      //        though it should be the default behaviour of\n      //        JSON.serialize;\n      //     2. to ensure that if a floating number is passed\n      //        accidentally, it's converted to an integer.\n      //\n      // This guarantees savegame compatibility with the reference\n      // implementation.\n      this._addToCurrentObject(Math.floor(value));\n    }\n\n    // Since JSON doesn't support NaN and Infinity, these values\n    // are converted here.\n    public WriteFloat(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n      if (value == Number.POSITIVE_INFINITY) {\n        this._addToCurrentObject(3.4e38);\n      } else if (value == Number.NEGATIVE_INFINITY) {\n        this._addToCurrentObject(-3.4e38);\n      } else if (isNaN(value)) {\n        this._addToCurrentObject(0.0);\n      } else {\n        this._addToCurrentObject(value);\n      }\n    }\n\n    public WriteNull() {\n      this.StartNewObject(false);\n      this._addToCurrentObject(null);\n    }\n\n    // Prepare a string before adding it to the current collection in\n    // WriteStringEnd(). The string will be a concatenation of all the\n    // strings passed to WriteStringInner.\n    public WriteStringStart() {\n      this.StartNewObject(false);\n      this._currentString = \"\";\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.String)\n      );\n    }\n\n    public WriteStringEnd() {\n      this.Assert(this.state == SimpleJson.Writer.State.String);\n      this._stateStack.pop();\n      this._addToCurrentObject(this._currentString);\n      this._currentString = null;\n    }\n\n    public WriteStringInner(str: string | null, escape: boolean = true) {\n      this.Assert(this.state === SimpleJson.Writer.State.String);\n\n      if (str === null) {\n        console.error(\"Warning: trying to write a null string\");\n        return;\n      }\n\n      this._currentString += str;\n    }\n\n    // Serialise the root object into a JSON string.\n    public ToString() {\n      if (this._jsonObject === null) {\n        return \"\";\n      }\n\n      return JSON.stringify(this._jsonObject);\n    }\n\n    // Prepare the state stack when adding new objects / values.\n    private StartNewObject(container: boolean) {\n      if (container) {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.None ||\n            this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      } else {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      }\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(this.childCount === 0);\n      }\n\n      if (\n        this.state === SimpleJson.Writer.State.Array ||\n        this.state === SimpleJson.Writer.State.Property\n      ) {\n        this.IncrementChildCount();\n      }\n    }\n\n    // These getters peek all the different stacks.\n\n    private get state() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].type;\n      } else {\n        return SimpleJson.Writer.State.None;\n      }\n    }\n\n    private get childCount() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].childCount;\n      } else {\n        return 0;\n      }\n    }\n\n    private get currentCollection() {\n      if (this._collectionStack.length > 0) {\n        return this._collectionStack[this._collectionStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private get currentPropertyName() {\n      if (this._propertyNameStack.length > 0) {\n        return this._propertyNameStack[this._propertyNameStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private IncrementChildCount() {\n      this.Assert(this._stateStack.length > 0);\n      let currEl = this._stateStack.pop()!;\n      currEl.childCount++;\n      this._stateStack.push(currEl);\n    }\n\n    private Assert(condition: boolean) {\n      if (!condition) throw Error(\"Assert failed while writing JSON\");\n    }\n\n    // This method did not exist in the original C# code. It adds\n    // the given value to the current collection (used by Write methods).\n    private _addToCurrentObject(value: number | string | boolean | null) {\n      this.Assert(this.currentCollection !== null);\n      if (this.state === SimpleJson.Writer.State.Array) {\n        this.Assert(Array.isArray(this.currentCollection));\n        (this.currentCollection as any[]).push(value);\n      } else if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(!Array.isArray(this.currentCollection));\n        this.Assert(this.currentPropertyName !== null);\n        (this.currentCollection as Record<string, any>)[\n          this.currentPropertyName!\n        ] = value;\n        this._propertyNameStack.pop();\n      }\n    }\n\n    // In addition to `_stateStack` present in the original code,\n    // this implementation of SimpleJson use two other stacks and two\n    // temporary variables holding the current context.\n\n    // Used to keep track of the current property name being built\n    // with `WritePropertyNameStart`, `WritePropertyNameInner` and\n    // `WritePropertyNameEnd`.\n    private _currentPropertyName: string | null = null;\n\n    // Used to keep track of the current string value being built\n    // with `WriteStringStart`, `WriteStringInner` and\n    // `WriteStringEnd`.\n    private _currentString: string | null = null;\n\n    private _stateStack: SimpleJson.Writer.StateElement[] = [];\n\n    // Keep track of the current collection being built (either an array\n    // or an object). For instance, at the '?' step during the hiarchy\n    // creation, this hierarchy:\n    // [3, {a: [b, ?]}] will have this corresponding stack:\n    // (bottom) [Array, Object, Array] (top)\n    private _collectionStack: Array<any[] | Record<string, any>> = [];\n\n    // Keep track of the current property being assigned. For instance, at\n    // the '?' step during the hiarchy creation, this hierarchy:\n    // [3, {a: [b, {c: ?}]}] will have this corresponding stack:\n    // (bottom) [a, c] (top)\n    private _propertyNameStack: string[] = [];\n\n    // Object containing the entire hiearchy.\n    private _jsonObject: Record<string, any> | any[] | null = null;\n  }\n\n  export namespace Writer {\n    export enum State {\n      None,\n      Object,\n      Array,\n      Property,\n      PropertyName,\n      String,\n    }\n\n    export class StateElement {\n      public type: SimpleJson.Writer.State = SimpleJson.Writer.State.None;\n      public childCount: number = 0;\n\n      constructor(type: SimpleJson.Writer.State) {\n        this.type = type;\n      }\n    }\n  }\n}\n","import { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { StoryState } from \"./StoryState\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { Choice } from \"./Choice\";\nimport { Divert } from \"./Divert\";\nimport {\n  Value,\n  StringValue,\n  IntValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n} from \"./Value\";\nimport { Path } from \"./Path\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { VariableReference } from \"./VariableReference\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { StoryException } from \"./StoryException\";\nimport { PRNG } from \"./PRNG\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Stopwatch } from \"./StopWatch\";\nimport { Pointer } from \"./Pointer\";\nimport { InkList, InkListItem, KeyValuePair } from \"./InkList\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { DebugMetadata } from \"./DebugMetadata\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport { InkList } from \"./InkList\";\n\nif (!Number.isInteger) {\n  Number.isInteger = function isInteger(nVal: any) {\n    return (\n      typeof nVal === \"number\" &&\n      isFinite(nVal) &&\n      nVal > -9007199254740992 &&\n      nVal < 9007199254740992 &&\n      Math.floor(nVal) === nVal\n    );\n  };\n}\n\nexport class Story extends InkObject {\n  public static inkVersionCurrent = 19;\n\n  public inkVersionMinimumCompatible = 18;\n\n  get currentChoices() {\n    let choices: Choice[] = [];\n\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    for (let c of this._state.currentChoices) {\n      if (!c.isInvisibleDefault) {\n        c.index = choices.length;\n        choices.push(c);\n      }\n    }\n\n    return choices;\n  }\n\n  get currentText() {\n    this.IfAsyncWeCant(\"call currentText since it's a work in progress\");\n    return this.state.currentText;\n  }\n\n  get currentTags() {\n    this.IfAsyncWeCant(\"call currentTags since it's a work in progress\");\n    return this.state.currentTags;\n  }\n\n  get currentErrors() {\n    return this.state.currentErrors;\n  }\n\n  get currentWarnings() {\n    return this.state.currentWarnings;\n  }\n\n  get hasError() {\n    return this.state.hasError;\n  }\n\n  get hasWarning() {\n    return this.state.hasWarning;\n  }\n\n  get variablesState() {\n    return this.state.variablesState;\n  }\n\n  get listDefinitions() {\n    return this._listDefinitions;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  // TODO: Implement Profiler\n  public StartProfiling() {\n    /* */\n  }\n  public EndProfiling() {\n    /* */\n  }\n\n  constructor(contentContainer: Container, lists: ListDefinition[] | null);\n  constructor(jsonString: string);\n  constructor(json: Record<string, any>);\n  constructor() {\n    super();\n\n    // Discrimination between constructors\n    let contentContainer: Container;\n    let lists: ListDefinition[] | null = null;\n    let json: Record<string, any> | null = null;\n\n    if (arguments[0] instanceof Container) {\n      contentContainer = arguments[0] as Container;\n\n      if (typeof arguments[1] !== \"undefined\") {\n        lists = arguments[1] as ListDefinition[];\n      }\n\n      // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n      this._mainContentContainer = contentContainer;\n      // ------\n    } else {\n      if (typeof arguments[0] === \"string\") {\n        let jsonString = arguments[0] as string;\n        json = SimpleJson.TextToDictionary(jsonString);\n      } else {\n        json = arguments[0] as Record<string, any>;\n      }\n    }\n\n    // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n    if (lists != null) this._listDefinitions = new ListDefinitionsOrigin(lists);\n\n    this._externals = new Map();\n    // ------\n\n    // ------ Story(string jsonString) : this((Container)null)\n    if (json !== null) {\n      let rootObject: Record<string, any> = json;\n\n      let versionObj = rootObject[\"inkVersion\"];\n      if (versionObj == null)\n        throw new Error(\n          \"ink version number not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let formatFromFile = parseInt(versionObj);\n      if (formatFromFile > Story.inkVersionCurrent) {\n        throw new Error(\n          \"Version of ink used to build story was newer than the current version of the engine\"\n        );\n      } else if (formatFromFile < this.inkVersionMinimumCompatible) {\n        throw new Error(\n          \"Version of ink used to build story is too old to be loaded by this version of the engine\"\n        );\n      } else if (formatFromFile != Story.inkVersionCurrent) {\n        console.warn(\n          \"WARNING: Version of ink used to build story doesn't match current version of engine. Non-critical, but recommend synchronising.\"\n        );\n      }\n\n      let rootToken = rootObject[\"root\"];\n      if (rootToken == null)\n        throw new Error(\n          \"Root node for ink not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let listDefsObj;\n      if ((listDefsObj = rootObject[\"listDefs\"])) {\n        this._listDefinitions = JsonSerialisation.JTokenToListDefinitions(\n          listDefsObj\n        );\n      }\n\n      this._mainContentContainer = asOrThrows(\n        JsonSerialisation.JTokenToRuntimeObject(rootToken),\n        Container\n      );\n\n      this.ResetState();\n    }\n    // ------\n  }\n\n  // Merge together `public string ToJson()` and `void ToJson(SimpleJson.Writer writer)`.\n  // Will only return a value if writer was not provided.\n  public ToJson(writer?: SimpleJson.Writer): string | void {\n    let shouldReturn = false;\n\n    if (!writer) {\n      shouldReturn = true;\n      writer = new SimpleJson.Writer();\n    }\n\n    writer.WriteObjectStart();\n\n    writer.WriteIntProperty(\"inkVersion\", Story.inkVersionCurrent);\n\n    writer.WriteProperty(\"root\", (w) =>\n      JsonSerialisation.WriteRuntimeContainer(w, this._mainContentContainer)\n    );\n\n    if (this._listDefinitions != null) {\n      writer.WritePropertyStart(\"listDefs\");\n      writer.WriteObjectStart();\n\n      for (let def of this._listDefinitions.lists) {\n        writer.WritePropertyStart(def.name);\n        writer.WriteObjectStart();\n\n        for (let [key, value] of def.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          let val = value;\n          writer.WriteIntProperty(item.itemName, val);\n        }\n\n        writer.WriteObjectEnd();\n        writer.WritePropertyEnd();\n      }\n\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    if (shouldReturn) return writer.ToString();\n  }\n\n  public ResetState() {\n    this.IfAsyncWeCant(\"ResetState\");\n\n    this._state = new StoryState(this);\n    this._state.variablesState.ObserveVariableChange(\n      this.VariableStateDidChangeEvent.bind(this)\n    );\n\n    this.ResetGlobals();\n  }\n\n  public ResetErrors() {\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ResetErrors();\n  }\n\n  public ResetCallstack() {\n    this.IfAsyncWeCant(\"ResetCallstack\");\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ForceEnd();\n  }\n\n  public ResetGlobals() {\n    if (this._mainContentContainer.namedContent.get(\"global decl\")) {\n      let originalPointer = this.state.currentPointer.copy();\n\n      this.ChoosePath(new Path(\"global decl\"), false);\n\n      this.ContinueInternal();\n\n      this.state.currentPointer = originalPointer;\n    }\n\n    this.state.variablesState.SnapshotDefaultGlobals();\n  }\n\n  public Continue() {\n    this.ContinueAsync(0);\n    return this.currentText;\n  }\n\n  get canContinue() {\n    return this.state.canContinue;\n  }\n\n  get asyncContinueComplete() {\n    return !this._asyncContinueActive;\n  }\n\n  public ContinueAsync(millisecsLimitAsync: number) {\n    if (!this._hasValidatedExternals) this.ValidateExternalBindings();\n\n    this.ContinueInternal(millisecsLimitAsync);\n  }\n\n  public ContinueInternal(millisecsLimitAsync = 0) {\n    if (this._profiler != null) this._profiler.PreContinue();\n\n    let isAsyncTimeLimited = millisecsLimitAsync > 0;\n    this._recursiveContinueCount++;\n\n    if (!this._asyncContinueActive) {\n      this._asyncContinueActive = isAsyncTimeLimited;\n\n      if (!this.canContinue) {\n        throw new StoryException(\n          \"Can't continue - should check canContinue before calling Continue\"\n        );\n      }\n\n      this._state.didSafeExit = false;\n      this._state.ResetOutput();\n\n      if (this._recursiveContinueCount == 1)\n        this._state.variablesState.batchObservingVariableChanges = true;\n    }\n\n    let durationStopwatch = new Stopwatch();\n    durationStopwatch.Start();\n\n    let outputStreamEndsInNewline = false;\n    do {\n      try {\n        outputStreamEndsInNewline = this.ContinueSingleStep();\n      } catch (e) {\n        if (!(e instanceof StoryException)) throw e;\n\n        this.AddError(e.message, undefined, e.useEndLineNumber);\n        break;\n      }\n\n      if (outputStreamEndsInNewline) break;\n\n      if (\n        this._asyncContinueActive &&\n        durationStopwatch.ElapsedMilliseconds > millisecsLimitAsync\n      ) {\n        break;\n      }\n    } while (this.canContinue);\n\n    durationStopwatch.Stop();\n\n    if (outputStreamEndsInNewline || !this.canContinue) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        this.RestoreStateSnapshot();\n      }\n\n      if (!this.canContinue) {\n        if (this.state.callStack.canPopThread)\n          this.AddError(\n            \"Thread available to pop, threads should always be flat by the end of evaluation?\"\n          );\n\n        if (\n          this.state.generatedChoices.length == 0 &&\n          !this.state.didSafeExit &&\n          this._temporaryEvaluationContainer == null\n        ) {\n          if (this.state.callStack.CanPop(PushPopType.Tunnel))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '->->' to return from a tunnel?\"\n            );\n          else if (this.state.callStack.CanPop(PushPopType.Function))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '~ return'?\"\n            );\n          else if (!this.state.callStack.canPop)\n            this.AddError(\n              \"ran out of content. Do you need a '-> DONE' or '-> END'?\"\n            );\n          else\n            this.AddError(\n              \"unexpectedly reached end of content for unknown reason. Please debug compiler!\"\n            );\n        }\n      }\n\n      this.state.didSafeExit = false;\n\n      if (this._recursiveContinueCount == 1)\n        this._state.variablesState.batchObservingVariableChanges = false;\n\n      this._asyncContinueActive = false;\n    }\n\n    this._recursiveContinueCount--;\n\n    if (this._profiler != null) this._profiler.PostContinue();\n  }\n\n  public ContinueSingleStep() {\n    if (this._profiler != null) this._profiler.PreStep();\n\n    this.Step();\n\n    if (this._profiler != null) this._profiler.PostStep();\n\n    if (!this.canContinue && !this.state.callStack.elementIsEvaluateFromGame) {\n      this.TryFollowDefaultInvisibleChoice();\n    }\n\n    if (this._profiler != null) this._profiler.PreSnapshot();\n\n    if (!this.state.inStringEvaluation) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        if (this._stateSnapshotAtLastNewline.currentTags === null) {\n          return throwNullException(\"this._stateAtLastNewline.currentTags\");\n        }\n        if (this.state.currentTags === null) {\n          return throwNullException(\"this.state.currentTags\");\n        }\n\n        let change = this.CalculateNewlineOutputStateChange(\n          this._stateSnapshotAtLastNewline.currentText,\n          this.state.currentText,\n          this._stateSnapshotAtLastNewline.currentTags.length,\n          this.state.currentTags.length\n        );\n\n        if (change == Story.OutputStateChange.ExtendedBeyondNewline) {\n          this.RestoreStateSnapshot();\n\n          return true;\n        } else if (change == Story.OutputStateChange.NewlineRemoved) {\n          this.DiscardSnapshot();\n        }\n      }\n\n      if (this.state.outputStreamEndsInNewline) {\n        if (this.canContinue) {\n          if (this._stateSnapshotAtLastNewline == null) this.StateSnapshot();\n        } else {\n          this.DiscardSnapshot();\n        }\n      }\n    }\n\n    if (this._profiler != null) this._profiler.PostSnapshot();\n\n    return false;\n  }\n\n  public CalculateNewlineOutputStateChange(\n    prevText: string | null,\n    currText: string | null,\n    prevTagCount: number,\n    currTagCount: number\n  ) {\n    if (prevText === null) {\n      return throwNullException(\"prevText\");\n    }\n    if (currText === null) {\n      return throwNullException(\"currText\");\n    }\n\n    let newlineStillExists =\n      currText.length >= prevText.length &&\n      currText.charAt(prevText.length - 1) == \"\\n\";\n    if (\n      prevTagCount == currTagCount &&\n      prevText.length == currText.length &&\n      newlineStillExists\n    )\n      return Story.OutputStateChange.NoChange;\n\n    if (!newlineStillExists) {\n      return Story.OutputStateChange.NewlineRemoved;\n    }\n\n    if (currTagCount > prevTagCount)\n      return Story.OutputStateChange.ExtendedBeyondNewline;\n\n    for (let i = prevText.length; i < currText.length; i++) {\n      let c = currText.charAt(i);\n      if (c != \" \" && c != \"\\t\") {\n        return Story.OutputStateChange.ExtendedBeyondNewline;\n      }\n    }\n\n    return Story.OutputStateChange.NoChange;\n  }\n\n  public ContinueMaximally() {\n    this.IfAsyncWeCant(\"ContinueMaximally\");\n\n    let sb = new StringBuilder();\n\n    while (this.canContinue) {\n      sb.Append(this.Continue());\n    }\n\n    return sb.toString();\n  }\n\n  public ContentAtPath(path: Path) {\n    return this.mainContentContainer.ContentAtPath(path);\n  }\n\n  public KnotContainerWithName(name: string) {\n    let namedContainer = this.mainContentContainer.namedContent.get(name);\n    if (namedContainer instanceof Container) return namedContainer;\n    else return null;\n  }\n\n  public PointerAtPath(path: Path) {\n    if (path.length == 0) return Pointer.Null;\n\n    let p = new Pointer();\n\n    let pathLengthToUse = path.length;\n\n    let result = null;\n    if (path.lastComponent === null) {\n      return throwNullException(\"path.lastComponent\");\n    }\n\n    if (path.lastComponent.isIndex) {\n      pathLengthToUse = path.length - 1;\n      result = this.mainContentContainer.ContentAtPath(\n        path,\n        undefined,\n        pathLengthToUse\n      );\n      p.container = result.container;\n      p.index = path.lastComponent.index;\n    } else {\n      result = this.mainContentContainer.ContentAtPath(path);\n      p.container = result.container;\n      p.index = -1;\n    }\n\n    if (\n      result.obj == null ||\n      (result.obj == this.mainContentContainer && pathLengthToUse > 0)\n    ) {\n      this.Error(\n        \"Failed to find content at path '\" +\n          path +\n          \"', and no approximation of it was possible.\"\n      );\n    } else if (result.approximate)\n      this.Warning(\n        \"Failed to find content at path '\" +\n          path +\n          \"', so it was approximated to: '\" +\n          result.obj.path +\n          \"'.\"\n      );\n\n    return p;\n  }\n\n  public StateSnapshot() {\n    this._stateSnapshotAtLastNewline = this._state;\n    this._state = this._state.CopyAndStartPatching();\n  }\n\n  public RestoreStateSnapshot() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      throwNullException(\"_stateSnapshotAtLastNewline\");\n    }\n    this._stateSnapshotAtLastNewline.RestoreAfterPatch();\n\n    this._state = this._stateSnapshotAtLastNewline;\n    this._stateSnapshotAtLastNewline = null;\n\n    if (!this._asyncSaving) {\n      this._state.ApplyAnyPatch();\n    }\n  }\n\n  public DiscardSnapshot() {\n    if (!this._asyncSaving) this._state.ApplyAnyPatch();\n\n    this._stateSnapshotAtLastNewline = null;\n  }\n\n  public CopyStateForBackgroundThreadSave() {\n    this.IfAsyncWeCant(\"start saving on a background thread\");\n\n    if (this._asyncSaving)\n      throw new Error(\n        \"Story is already in background saving mode, can't call CopyStateForBackgroundThreadSave again!\"\n      );\n\n    let stateToSave = this._state;\n    this._state = this._state.CopyAndStartPatching();\n    this._asyncSaving = true;\n    return stateToSave;\n  }\n\n  public BackgroundSaveComplete() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      this._state.ApplyAnyPatch();\n    }\n\n    this._asyncSaving = false;\n  }\n\n  public Step() {\n    let shouldAddToStream = true;\n\n    let pointer = this.state.currentPointer.copy();\n    if (pointer.isNull) {\n      return;\n    }\n\n    // Container containerToEnter = pointer.Resolve () as Container;\n    let containerToEnter = asOrNull(pointer.Resolve(), Container);\n\n    while (containerToEnter) {\n      this.VisitContainer(containerToEnter, true);\n\n      // No content? the most we can do is step past it\n      if (containerToEnter.content.length == 0) {\n        break;\n      }\n\n      pointer = Pointer.StartOf(containerToEnter);\n      // containerToEnter = pointer.Resolve() as Container;\n      containerToEnter = asOrNull(pointer.Resolve(), Container);\n    }\n\n    this.state.currentPointer = pointer.copy();\n\n    if (this._profiler != null) this._profiler.Step(this.state.callStack);\n\n    // Is the current content object:\n    //  - Normal content\n    //  - Or a logic/flow statement - if so, do it\n    // Stop flow if we hit a stack pop when we're unable to pop (e.g. return/done statement in knot\n    // that was diverted to rather than called as a function)\n    let currentContentObj = pointer.Resolve();\n    let isLogicOrFlowControl = this.PerformLogicAndFlowControl(\n      currentContentObj\n    );\n\n    // Has flow been forced to end by flow control above?\n    if (this.state.currentPointer.isNull) {\n      return;\n    }\n\n    if (isLogicOrFlowControl) {\n      shouldAddToStream = false;\n    }\n\n    // Choice with condition?\n    // var choicePoint = currentContentObj as ChoicePoint;\n    let choicePoint = asOrNull(currentContentObj, ChoicePoint);\n    if (choicePoint) {\n      let choice = this.ProcessChoice(choicePoint);\n      if (choice) {\n        this.state.generatedChoices.push(choice);\n      }\n\n      currentContentObj = null;\n      shouldAddToStream = false;\n    }\n\n    // If the container has no content, then it will be\n    // the \"content\" itself, but we skip over it.\n    if (currentContentObj instanceof Container) {\n      shouldAddToStream = false;\n    }\n\n    // Content to add to evaluation stack or the output stream\n    if (shouldAddToStream) {\n      // If we're pushing a variable pointer onto the evaluation stack, ensure that it's specific\n      // to our current (possibly temporary) context index. And make a copy of the pointer\n      // so that we're not editing the original runtime object.\n      // var varPointer = currentContentObj as VariablePointerValue;\n      let varPointer = asOrNull(currentContentObj, VariablePointerValue);\n      if (varPointer && varPointer.contextIndex == -1) {\n        // Create new object so we're not overwriting the story's own data\n        let contextIdx = this.state.callStack.ContextForVariableNamed(\n          varPointer.variableName\n        );\n        currentContentObj = new VariablePointerValue(\n          varPointer.variableName,\n          contextIdx\n        );\n      }\n\n      // Expression evaluation content\n      if (this.state.inExpressionEvaluation) {\n        this.state.PushEvaluationStack(currentContentObj);\n      }\n      // Output stream content (i.e. not expression evaluation)\n      else {\n        this.state.PushToOutputStream(currentContentObj);\n      }\n    }\n\n    // Increment the content pointer, following diverts if necessary\n    this.NextContent();\n\n    // Starting a thread should be done after the increment to the content pointer,\n    // so that when returning from the thread, it returns to the content after this instruction.\n    // var controlCmd = currentContentObj as ;\n    let controlCmd = asOrNull(currentContentObj, ControlCommand);\n    if (\n      controlCmd &&\n      controlCmd.commandType == ControlCommand.CommandType.StartThread\n    ) {\n      this.state.callStack.PushThread();\n    }\n  }\n\n  public VisitContainer(container: Container, atStart: boolean) {\n    if (!container.countingAtStartOnly || atStart) {\n      if (container.visitsShouldBeCounted)\n        this.state.IncrementVisitCountForContainer(container);\n\n      if (container.turnIndexShouldBeCounted)\n        this.state.RecordTurnIndexVisitToContainer(container);\n    }\n  }\n\n  private _prevContainers: Container[] = [];\n  public VisitChangedContainersDueToDivert() {\n    let previousPointer = this.state.previousPointer.copy();\n    let pointer = this.state.currentPointer.copy();\n\n    if (pointer.isNull || pointer.index == -1) return;\n\n    this._prevContainers.length = 0;\n    if (!previousPointer.isNull) {\n      // Container prevAncestor = previousPointer.Resolve() as Container ?? previousPointer.container as Container;\n      let resolvedPreviousAncestor = previousPointer.Resolve();\n      let prevAncestor =\n        asOrNull(resolvedPreviousAncestor, Container) ||\n        asOrNull(previousPointer.container, Container);\n      while (prevAncestor) {\n        this._prevContainers.push(prevAncestor);\n        // prevAncestor = prevAncestor.parent as Container;\n        prevAncestor = asOrNull(prevAncestor.parent, Container);\n      }\n    }\n\n    let currentChildOfContainer = pointer.Resolve();\n\n    if (currentChildOfContainer == null) return;\n\n    // Container currentContainerAncestor = currentChildOfContainer.parent as Container;\n    let currentContainerAncestor = asOrNull(\n      currentChildOfContainer.parent,\n      Container\n    );\n    while (\n      currentContainerAncestor &&\n      (this._prevContainers.indexOf(currentContainerAncestor) < 0 ||\n        currentContainerAncestor.countingAtStartOnly)\n    ) {\n      // Check whether this ancestor container is being entered at the start,\n      // by checking whether the child object is the first.\n      let enteringAtStart =\n        currentContainerAncestor.content.length > 0 &&\n        currentChildOfContainer == currentContainerAncestor.content[0];\n\n      // Mark a visit to this container\n      this.VisitContainer(currentContainerAncestor, enteringAtStart);\n\n      currentChildOfContainer = currentContainerAncestor;\n      // currentContainerAncestor = currentContainerAncestor.parent as Container;\n      currentContainerAncestor = asOrNull(\n        currentContainerAncestor.parent,\n        Container\n      );\n    }\n  }\n\n  public ProcessChoice(choicePoint: ChoicePoint) {\n    let showChoice = true;\n\n    // Don't create choice if choice point doesn't pass conditional\n    if (choicePoint.hasCondition) {\n      let conditionValue = this.state.PopEvaluationStack();\n      if (!this.IsTruthy(conditionValue)) {\n        showChoice = false;\n      }\n    }\n\n    let startText = \"\";\n    let choiceOnlyText = \"\";\n\n    if (choicePoint.hasChoiceOnlyContent) {\n      // var choiceOnlyStrVal = state.PopEvaluationStack () as StringValue;\n      let choiceOnlyStrVal = asOrThrows(\n        this.state.PopEvaluationStack(),\n        StringValue\n      );\n      choiceOnlyText = choiceOnlyStrVal.value || \"\";\n    }\n\n    if (choicePoint.hasStartContent) {\n      // var startStrVal = state.PopEvaluationStack () as StringValue;\n      let startStrVal = asOrThrows(\n        this.state.PopEvaluationStack(),\n        StringValue\n      );\n      startText = startStrVal.value || \"\";\n    }\n\n    // Don't create choice if player has already read this content\n    if (choicePoint.onceOnly) {\n      let visitCount = this.state.VisitCountForContainer(\n        choicePoint.choiceTarget\n      );\n      if (visitCount > 0) {\n        showChoice = false;\n      }\n    }\n\n    // We go through the full process of creating the choice above so\n    // that we consume the content for it, since otherwise it'll\n    // be shown on the output stream.\n    if (!showChoice) {\n      return null;\n    }\n\n    let choice = new Choice();\n    choice.targetPath = choicePoint.pathOnChoice;\n    choice.sourcePath = choicePoint.path.toString();\n    choice.isInvisibleDefault = choicePoint.isInvisibleDefault;\n    choice.threadAtGeneration = this.state.callStack.ForkThread();\n\n    choice.text = (startText + choiceOnlyText).replace(/^[ \\t]+|[ \\t]+$/g, \"\");\n\n    return choice;\n  }\n\n  public IsTruthy(obj: InkObject) {\n    let truthy = false;\n    if (obj instanceof Value) {\n      let val = obj;\n\n      if (val instanceof DivertTargetValue) {\n        let divTarget = val;\n        this.Error(\n          \"Shouldn't use a divert target (to \" +\n            divTarget.targetPath +\n            \") as a conditional value. Did you intend a function call 'likeThis()' or a read count check 'likeThis'? (no arrows)\"\n        );\n        return false;\n      }\n\n      return val.isTruthy;\n    }\n    return truthy;\n  }\n\n  public PerformLogicAndFlowControl(contentObj: InkObject | null) {\n    if (contentObj == null) {\n      return false;\n    }\n\n    // Divert\n    if (contentObj instanceof Divert) {\n      let currentDivert = contentObj;\n\n      if (currentDivert.isConditional) {\n        let conditionValue = this.state.PopEvaluationStack();\n\n        // False conditional? Cancel divert\n        if (!this.IsTruthy(conditionValue)) return true;\n      }\n\n      if (currentDivert.hasVariableTarget) {\n        let varName = currentDivert.variableDivertName;\n\n        let varContents = this.state.variablesState.GetVariableWithName(\n          varName\n        );\n\n        if (varContents == null) {\n          this.Error(\n            \"Tried to divert using a target from a variable that could not be found (\" +\n              varName +\n              \")\"\n          );\n        } else if (!(varContents instanceof DivertTargetValue)) {\n          // var intContent = varContents as IntValue;\n          let intContent = asOrNull(varContents, IntValue);\n\n          let errorMessage =\n            \"Tried to divert to a target from a variable, but the variable (\" +\n            varName +\n            \") didn't contain a divert target, it \";\n          if (intContent instanceof IntValue && intContent.value == 0) {\n            errorMessage += \"was empty/null (the value 0).\";\n          } else {\n            errorMessage += \"contained '\" + varContents + \"'.\";\n          }\n\n          this.Error(errorMessage);\n        }\n\n        let target = asOrThrows(varContents, DivertTargetValue);\n        this.state.divertedPointer = this.PointerAtPath(target.targetPath);\n      } else if (currentDivert.isExternal) {\n        this.CallExternalFunction(\n          currentDivert.targetPathString,\n          currentDivert.externalArgs\n        );\n        return true;\n      } else {\n        this.state.divertedPointer = currentDivert.targetPointer.copy();\n      }\n\n      if (currentDivert.pushesToStack) {\n        this.state.callStack.Push(\n          currentDivert.stackPushType,\n          undefined,\n          this.state.outputStream.length\n        );\n      }\n\n      if (this.state.divertedPointer.isNull && !currentDivert.isExternal) {\n        if (\n          currentDivert &&\n          currentDivert.debugMetadata &&\n          currentDivert.debugMetadata.sourceName != null\n        ) {\n          this.Error(\n            \"Divert target doesn't exist: \" +\n              currentDivert.debugMetadata.sourceName\n          );\n        } else {\n          this.Error(\"Divert resolution failed: \" + currentDivert);\n        }\n      }\n\n      return true;\n    }\n\n    // Start/end an expression evaluation? Or print out the result?\n    else if (contentObj instanceof ControlCommand) {\n      let evalCommand = contentObj;\n\n      switch (evalCommand.commandType) {\n        case ControlCommand.CommandType.EvalStart:\n          this.Assert(\n            this.state.inExpressionEvaluation === false,\n            \"Already in expression evaluation?\"\n          );\n          this.state.inExpressionEvaluation = true;\n          break;\n\n        case ControlCommand.CommandType.EvalEnd:\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Not in expression evaluation mode\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        case ControlCommand.CommandType.EvalOutput:\n          // If the expression turned out to be empty, there may not be anything on the stack\n          if (this.state.evaluationStack.length > 0) {\n            let output = this.state.PopEvaluationStack();\n\n            // Functions may evaluate to Void, in which case we skip output\n            if (!(output instanceof Void)) {\n              // TODO: Should we really always blanket convert to string?\n              // It would be okay to have numbers in the output stream the\n              // only problem is when exporting text for viewing, it skips over numbers etc.\n              let text = new StringValue(output.toString());\n\n              this.state.PushToOutputStream(text);\n            }\n          }\n          break;\n\n        case ControlCommand.CommandType.NoOp:\n          break;\n\n        case ControlCommand.CommandType.Duplicate:\n          this.state.PushEvaluationStack(this.state.PeekEvaluationStack());\n          break;\n\n        case ControlCommand.CommandType.PopEvaluatedValue:\n          this.state.PopEvaluationStack();\n          break;\n\n        case ControlCommand.CommandType.PopFunction:\n        case ControlCommand.CommandType.PopTunnel:\n          let popType =\n            evalCommand.commandType == ControlCommand.CommandType.PopFunction\n              ? PushPopType.Function\n              : PushPopType.Tunnel;\n\n          let overrideTunnelReturnTarget: DivertTargetValue | null = null;\n          if (popType == PushPopType.Tunnel) {\n            let popped = this.state.PopEvaluationStack();\n            // overrideTunnelReturnTarget = popped as DivertTargetValue;\n            overrideTunnelReturnTarget = asOrNull(popped, DivertTargetValue);\n            if (overrideTunnelReturnTarget === null) {\n              this.Assert(\n                popped instanceof Void,\n                \"Expected void if ->-> doesn't override target\"\n              );\n            }\n          }\n\n          if (this.state.TryExitFunctionEvaluationFromGame()) {\n            break;\n          } else if (\n            this.state.callStack.currentElement.type != popType ||\n            !this.state.callStack.canPop\n          ) {\n            let names: Map<PushPopType, string> = new Map();\n            names.set(\n              PushPopType.Function,\n              \"function return statement (~ return)\"\n            );\n            names.set(PushPopType.Tunnel, \"tunnel onwards statement (->->)\");\n\n            let expected = names.get(this.state.callStack.currentElement.type);\n            if (!this.state.callStack.canPop) {\n              expected = \"end of flow (-> END or choice)\";\n            }\n\n            let errorMsg =\n              \"Found \" + names.get(popType) + \", when expected \" + expected;\n\n            this.Error(errorMsg);\n          } else {\n            this.state.PopCallStack();\n\n            if (overrideTunnelReturnTarget)\n              this.state.divertedPointer = this.PointerAtPath(\n                overrideTunnelReturnTarget.targetPath\n              );\n          }\n          break;\n\n        case ControlCommand.CommandType.BeginString:\n          this.state.PushToOutputStream(evalCommand);\n\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Expected to be in an expression when evaluating a string\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        case ControlCommand.CommandType.EndString:\n          let contentStackForString: InkObject[] = [];\n\n          let outputCountConsumed = 0;\n          for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n            let obj = this.state.outputStream[i];\n\n            outputCountConsumed++;\n\n            // var command = obj as ControlCommand;\n            let command = asOrNull(obj, ControlCommand);\n            if (\n              command &&\n              command.commandType == ControlCommand.CommandType.BeginString\n            ) {\n              break;\n            }\n\n            if (obj instanceof StringValue) {\n              contentStackForString.push(obj);\n            }\n          }\n\n          // Consume the content that was produced for this string\n          this.state.PopFromOutputStream(outputCountConsumed);\n\n          // The C# version uses a Stack for contentStackForString, but we're\n          // using a simple array, so we need to reverse it before using it\n          contentStackForString = contentStackForString.reverse();\n\n          // Build string out of the content we collected\n          let sb = new StringBuilder();\n          for (let c of contentStackForString) {\n            sb.Append(c.toString());\n          }\n\n          // Return to expression evaluation (from content mode)\n          this.state.inExpressionEvaluation = true;\n          this.state.PushEvaluationStack(new StringValue(sb.toString()));\n          break;\n\n        case ControlCommand.CommandType.ChoiceCount:\n          let choiceCount = this.state.generatedChoices.length;\n          this.state.PushEvaluationStack(new IntValue(choiceCount));\n          break;\n\n        case ControlCommand.CommandType.Turns:\n          this.state.PushEvaluationStack(\n            new IntValue(this.state.currentTurnIndex + 1)\n          );\n          break;\n\n        case ControlCommand.CommandType.TurnsSince:\n        case ControlCommand.CommandType.ReadCount:\n          let target = this.state.PopEvaluationStack();\n          if (!(target instanceof DivertTargetValue)) {\n            let extraNote = \"\";\n            if (target instanceof IntValue)\n              extraNote =\n                \". Did you accidentally pass a read count ('knot_name') instead of a target ('-> knot_name')?\";\n            this.Error(\n              \"TURNS_SINCE / READ_COUNT expected a divert target (knot, stitch, label name), but saw \" +\n                target +\n                extraNote\n            );\n            break;\n          }\n\n          // var divertTarget = target as DivertTargetValue;\n          let divertTarget = asOrThrows(target, DivertTargetValue);\n          // var container = ContentAtPath (divertTarget.targetPath).correctObj as Container;\n          let container = asOrNull(\n            this.ContentAtPath(divertTarget.targetPath).correctObj,\n            Container\n          );\n\n          let eitherCount;\n          if (container != null) {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = this.state.TurnsSinceForContainer(container);\n            else eitherCount = this.state.VisitCountForContainer(container);\n          } else {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = -1;\n            else eitherCount = 0;\n\n            this.Warning(\n              \"Failed to find container for \" +\n                evalCommand.toString() +\n                \" lookup at \" +\n                divertTarget.targetPath.toString()\n            );\n          }\n\n          this.state.PushEvaluationStack(new IntValue(eitherCount));\n          break;\n\n        case ControlCommand.CommandType.Random: {\n          let maxInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          let minInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n\n          if (minInt == null || minInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for minimum parameter of RANDOM(min, max)\"\n            );\n\n          if (maxInt == null || minInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for maximum parameter of RANDOM(min, max)\"\n            );\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (maxInt.value === null) {\n            return throwNullException(\"maxInt.value\");\n          }\n          if (minInt.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          let randomRange = maxInt.value - minInt.value + 1;\n          if (randomRange <= 0)\n            this.Error(\n              \"RANDOM was called with minimum as \" +\n                minInt.value +\n                \" and maximum as \" +\n                maxInt.value +\n                \". The maximum must be larger\"\n            );\n\n          let resultSeed = this.state.storySeed + this.state.previousRandom;\n          let random = new PRNG(resultSeed);\n\n          let nextRandom = random.next();\n          let chosenValue = (nextRandom % randomRange) + minInt.value;\n          this.state.PushEvaluationStack(new IntValue(chosenValue));\n\n          // Next random number (rather than keeping the Random object around)\n          this.state.previousRandom = nextRandom;\n          break;\n        }\n\n        case ControlCommand.CommandType.SeedRandom:\n          let seed = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          if (seed == null || seed instanceof IntValue === false)\n            return this.Error(\"Invalid value passed to SEED_RANDOM\");\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (seed.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          this.state.storySeed = seed.value;\n          this.state.previousRandom = 0;\n\n          this.state.PushEvaluationStack(new Void());\n          break;\n\n        case ControlCommand.CommandType.VisitIndex:\n          let count =\n            this.state.VisitCountForContainer(\n              this.state.currentPointer.container\n            ) - 1; // index not count\n          this.state.PushEvaluationStack(new IntValue(count));\n          break;\n\n        case ControlCommand.CommandType.SequenceShuffleIndex:\n          let shuffleIndex = this.NextSequenceShuffleIndex();\n          this.state.PushEvaluationStack(new IntValue(shuffleIndex));\n          break;\n\n        case ControlCommand.CommandType.StartThread:\n          // Handled in main step function\n          break;\n\n        case ControlCommand.CommandType.Done:\n          // We may exist in the context of the initial\n          // act of creating the thread, or in the context of\n          // evaluating the content.\n          if (this.state.callStack.canPopThread) {\n            this.state.callStack.PopThread();\n          }\n\n          // In normal flow - allow safe exit without warning\n          else {\n            this.state.didSafeExit = true;\n\n            // Stop flow in current thread\n            this.state.currentPointer = Pointer.Null;\n          }\n\n          break;\n\n        // Force flow to end completely\n        case ControlCommand.CommandType.End:\n          this.state.ForceEnd();\n          break;\n\n        case ControlCommand.CommandType.ListFromInt:\n          // var intVal = state.PopEvaluationStack () as IntValue;\n          let intVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          // var listNameVal = state.PopEvaluationStack () as StringValue;\n          let listNameVal = asOrThrows(\n            this.state.PopEvaluationStack(),\n            StringValue\n          );\n\n          if (intVal === null) {\n            throw new StoryException(\n              \"Passed non-integer when creating a list element from a numerical value.\"\n            );\n          }\n\n          let generatedListValue = null;\n\n          if (this.listDefinitions === null) {\n            return throwNullException(\"this.listDefinitions\");\n          }\n          let foundListDef = this.listDefinitions.TryListGetDefinition(\n            listNameVal.value,\n            null\n          );\n          if (foundListDef.exists) {\n            // Originally a primitive type, but here, can be null.\n            // TODO: Replace by default value?\n            if (intVal.value === null) {\n              return throwNullException(\"minInt.value\");\n            }\n\n            let foundItem = foundListDef.result!.TryGetItemWithValue(\n              intVal.value,\n              InkListItem.Null\n            );\n            if (foundItem.exists) {\n              generatedListValue = new ListValue(\n                foundItem.result!,\n                intVal.value\n              );\n            }\n          } else {\n            throw new StoryException(\n              \"Failed to find LIST called \" + listNameVal.value\n            );\n          }\n\n          if (generatedListValue == null) generatedListValue = new ListValue();\n\n          this.state.PushEvaluationStack(generatedListValue);\n          break;\n\n        case ControlCommand.CommandType.ListRange:\n          let max = asOrNull(this.state.PopEvaluationStack(), Value);\n          let min = asOrNull(this.state.PopEvaluationStack(), Value);\n\n          // var targetList = state.PopEvaluationStack () as ListValue;\n          let targetList = asOrNull(this.state.PopEvaluationStack(), ListValue);\n\n          if (targetList === null || min === null || max === null)\n            throw new StoryException(\n              \"Expected list, minimum and maximum for LIST_RANGE\"\n            );\n\n          if (targetList.value === null) {\n            return throwNullException(\"targetList.value\");\n          }\n          let result = targetList.value.ListWithSubRange(\n            min.valueObject,\n            max.valueObject\n          );\n\n          this.state.PushEvaluationStack(new ListValue(result));\n          break;\n\n        case ControlCommand.CommandType.ListRandom: {\n          let listVal = this.state.PopEvaluationStack() as ListValue;\n          if (listVal === null)\n            throw new StoryException(\"Expected list for LIST_RANDOM\");\n\n          let list = listVal.value;\n\n          let newList: InkList | null = null;\n\n          if (list === null) {\n            throw throwNullException(\"list\");\n          }\n          if (list.Count == 0) {\n            newList = new InkList();\n          } else {\n            // Generate a random index for the element to take\n            let resultSeed = this.state.storySeed + this.state.previousRandom;\n            let random = new PRNG(resultSeed);\n\n            let nextRandom = random.next();\n            let listItemIndex = nextRandom % list.Count;\n\n            // This bit is a little different from the original\n            // C# code, since iterators do not work in the same way.\n            // First, we iterate listItemIndex - 1 times, calling next().\n            // The listItemIndex-th time is made outside of the loop,\n            // in order to retrieve the value.\n            let listEnumerator = list.entries();\n            for (let i = 0; i <= listItemIndex - 1; i++) {\n              listEnumerator.next();\n            }\n            let value = listEnumerator.next().value;\n            let randomItem: KeyValuePair<InkListItem, number> = {\n              Key: InkListItem.fromSerializedKey(value[0]),\n              Value: value[1],\n            };\n\n            // Origin list is simply the origin of the one element\n            if (randomItem.Key.originName === null) {\n              return throwNullException(\"randomItem.Key.originName\");\n            }\n            newList = new InkList(randomItem.Key.originName, this);\n            newList.Add(randomItem.Key, randomItem.Value);\n\n            this.state.previousRandom = nextRandom;\n          }\n\n          this.state.PushEvaluationStack(new ListValue(newList));\n          break;\n        }\n\n        default:\n          this.Error(\"unhandled ControlCommand: \" + evalCommand);\n          break;\n      }\n\n      return true;\n    }\n\n    // Variable assignment\n    else if (contentObj instanceof VariableAssignment) {\n      let varAss = contentObj;\n      let assignedVal = this.state.PopEvaluationStack();\n\n      this.state.variablesState.Assign(varAss, assignedVal);\n\n      return true;\n    }\n\n    // Variable reference\n    else if (contentObj instanceof VariableReference) {\n      let varRef = contentObj;\n      let foundValue = null;\n\n      // Explicit read count value\n      if (varRef.pathForCount != null) {\n        let container = varRef.containerForCount;\n        let count = this.state.VisitCountForContainer(container);\n        foundValue = new IntValue(count);\n      }\n\n      // Normal variable reference\n      else {\n        foundValue = this.state.variablesState.GetVariableWithName(varRef.name);\n\n        if (foundValue == null) {\n          this.Warning(\n            \"Variable not found: '\" +\n              varRef.name +\n              \"'. Using default value of 0 (false). This can happen with temporary variables if the declaration hasn't yet been hit. Globals are always given a default value on load if a value doesn't exist in the save state.\"\n          );\n          foundValue = new IntValue(0);\n        }\n      }\n\n      this.state.PushEvaluationStack(foundValue);\n\n      return true;\n    }\n\n    // Native function call\n    else if (contentObj instanceof NativeFunctionCall) {\n      let func = contentObj;\n      let funcParams = this.state.PopEvaluationStack(func.numberOfParameters);\n      let result = func.Call(funcParams);\n      this.state.PushEvaluationStack(result);\n      return true;\n    }\n\n    // No control content, must be ordinary content\n    return false;\n  }\n\n  public ChoosePathString(\n    path: string,\n    resetCallstack = true,\n    args: any[] = []\n  ) {\n    this.IfAsyncWeCant(\"call ChoosePathString right now\");\n\n    if (resetCallstack) {\n      this.ResetCallstack();\n    } else {\n      if (this.state.callStack.currentElement.type == PushPopType.Function) {\n        let funcDetail = \"\";\n        let container = this.state.callStack.currentElement.currentPointer\n          .container;\n        if (container != null) {\n          funcDetail = \"(\" + container.path.toString() + \") \";\n        }\n        throw new Error(\n          \"Story was running a function \" +\n            funcDetail +\n            \"when you called ChoosePathString(\" +\n            path +\n            \") - this is almost certainly not not what you want! Full stack trace: \\n\" +\n            this.state.callStack.callStackTrace\n        );\n      }\n    }\n\n    this.state.PassArgumentsToEvaluationStack(args);\n    this.ChoosePath(new Path(path));\n  }\n\n  public IfAsyncWeCant(activityStr: string) {\n    if (this._asyncContinueActive)\n      throw new Error(\n        \"Can't \" +\n          activityStr +\n          \". Story is in the middle of a ContinueAsync(). Make more ContinueAsync() calls or a single Continue() call beforehand.\"\n      );\n  }\n\n  public ChoosePath(p: Path, incrementingTurnIndex: boolean = true) {\n    this.state.SetChosenPath(p, incrementingTurnIndex);\n\n    // Take a note of newly visited containers for read counts etc\n    this.VisitChangedContainersDueToDivert();\n  }\n\n  public ChooseChoiceIndex(choiceIdx: number) {\n    choiceIdx = choiceIdx;\n    let choices = this.currentChoices;\n    this.Assert(\n      choiceIdx >= 0 && choiceIdx < choices.length,\n      \"choice out of range\"\n    );\n\n    let choiceToChoose = choices[choiceIdx];\n    if (choiceToChoose.threadAtGeneration === null) {\n      return throwNullException(\"choiceToChoose.threadAtGeneration\");\n    }\n    if (choiceToChoose.targetPath === null) {\n      return throwNullException(\"choiceToChoose.targetPath\");\n    }\n\n    this.state.callStack.currentThread = choiceToChoose.threadAtGeneration;\n\n    this.ChoosePath(choiceToChoose.targetPath);\n  }\n\n  public HasFunction(functionName: string) {\n    try {\n      return this.KnotContainerWithName(functionName) != null;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  public EvaluateFunction(\n    functionName: string,\n    args: any[] = [],\n    returnTextOutput: boolean = false\n  ): Story.EvaluateFunctionTextOutput | any {\n    // EvaluateFunction behaves slightly differently than the C# version.\n    // In C#, you can pass a (second) parameter `out textOutput` to get the\n    // text outputted by the function. This is not possible in js. Instead,\n    // we maintain the regular signature (functionName, args), plus an\n    // optional third parameter returnTextOutput. If set to true, we will\n    // return both the textOutput and the returned value, as an object.\n\n    this.IfAsyncWeCant(\"evaluate a function\");\n\n    if (functionName == null) {\n      throw new Error(\"Function is null\");\n    } else if (functionName == \"\" || functionName.trim() == \"\") {\n      throw new Error(\"Function is empty or white space.\");\n    }\n\n    let funcContainer = this.KnotContainerWithName(functionName);\n    if (funcContainer == null) {\n      throw new Error(\"Function doesn't exist: '\" + functionName + \"'\");\n    }\n\n    let outputStreamBefore: InkObject[] = [];\n    outputStreamBefore.push.apply(outputStreamBefore, this.state.outputStream);\n    this._state.ResetOutput();\n\n    this.state.StartFunctionEvaluationFromGame(funcContainer, args);\n\n    // Evaluate the function, and collect the string output\n    let stringOutput = new StringBuilder();\n    while (this.canContinue) {\n      stringOutput.Append(this.Continue());\n    }\n    let textOutput = stringOutput.toString();\n\n    this._state.ResetOutput(outputStreamBefore);\n\n    let result = this.state.CompleteFunctionEvaluationFromGame();\n\n    return returnTextOutput ? { returned: result, output: textOutput } : result;\n  }\n\n  public EvaluateExpression(exprContainer: Container) {\n    let startCallStackHeight = this.state.callStack.elements.length;\n\n    this.state.callStack.Push(PushPopType.Tunnel);\n\n    this._temporaryEvaluationContainer = exprContainer;\n\n    this.state.GoToStart();\n\n    let evalStackHeight = this.state.evaluationStack.length;\n\n    this.Continue();\n\n    this._temporaryEvaluationContainer = null;\n\n    // Should have fallen off the end of the Container, which should\n    // have auto-popped, but just in case we didn't for some reason,\n    // manually pop to restore the state (including currentPath).\n    if (this.state.callStack.elements.length > startCallStackHeight) {\n      this.state.PopCallStack();\n    }\n\n    let endStackHeight = this.state.evaluationStack.length;\n    if (endStackHeight > evalStackHeight) {\n      return this.state.PopEvaluationStack();\n    } else {\n      return null;\n    }\n  }\n\n  public allowExternalFunctionFallbacks: boolean = false;\n\n  public CallExternalFunction(\n    funcName: string | null,\n    numberOfArguments: number\n  ) {\n    if (funcName === null) {\n      return throwNullException(\"funcName\");\n    }\n    let func = this._externals.get(funcName);\n    let fallbackFunctionContainer = null;\n\n    let foundExternal = typeof func !== \"undefined\";\n\n    // Try to use fallback function?\n    if (!foundExternal) {\n      if (this.allowExternalFunctionFallbacks) {\n        fallbackFunctionContainer = this.KnotContainerWithName(funcName);\n        this.Assert(\n          fallbackFunctionContainer !== null,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound, and fallback ink function could not be found.\"\n        );\n\n        // Divert direct into fallback function and we're done\n        this.state.callStack.Push(\n          PushPopType.Function,\n          undefined,\n          this.state.outputStream.length\n        );\n        this.state.divertedPointer = Pointer.StartOf(fallbackFunctionContainer);\n        return;\n      } else {\n        this.Assert(\n          false,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound (and ink fallbacks disabled).\"\n        );\n      }\n    }\n\n    // Pop arguments\n    let args: any[] = [];\n    for (let i = 0; i < numberOfArguments; ++i) {\n      // var poppedObj = state.PopEvaluationStack () as Value;\n      let poppedObj = asOrThrows(this.state.PopEvaluationStack(), Value);\n      let valueObj = poppedObj.valueObject;\n      args.push(valueObj);\n    }\n\n    // Reverse arguments from the order they were popped,\n    // so they're the right way round again.\n    args.reverse();\n\n    // Run the function!\n    let funcResult = func!(args);\n\n    // Convert return value (if any) to the a type that the ink engine can use\n    let returnObj = null;\n    if (funcResult != null) {\n      returnObj = Value.Create(funcResult);\n      this.Assert(\n        returnObj !== null,\n        \"Could not create ink value from returned object of type \" +\n          typeof funcResult\n      );\n    } else {\n      returnObj = new Void();\n    }\n\n    this.state.PushEvaluationStack(returnObj);\n  }\n\n  public BindExternalFunctionGeneral(\n    funcName: string,\n    func: Story.ExternalFunction\n  ) {\n    this.IfAsyncWeCant(\"bind an external function\");\n    this.Assert(\n      !this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has already been bound.\"\n    );\n    this._externals.set(funcName, func);\n  }\n\n  public TryCoerce(value: any) {\n    // We're skipping type coercition in this implementation. First of, js\n    // is loosely typed, so it's not that important. Secondly, there is no\n    // clean way (AFAIK) for the user to describe what type of parameters\n    // they expect.\n    return value;\n  }\n\n  public BindExternalFunction(funcName: string, func: Story.ExternalFunction) {\n    this.Assert(func != null, \"Can't bind a null function\");\n\n    this.BindExternalFunctionGeneral(funcName, (args: any) => {\n      this.Assert(\n        args.length >= func.length,\n        \"External function expected \" + func.length + \" arguments\"\n      );\n\n      let coercedArgs = [];\n      for (let i = 0, l = args.length; i < l; i++) {\n        coercedArgs[i] = this.TryCoerce(args[i]);\n      }\n      return func.apply(null, coercedArgs);\n    });\n  }\n\n  public UnbindExternalFunction(funcName: string) {\n    this.IfAsyncWeCant(\"unbind an external a function\");\n    this.Assert(\n      this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has not been bound.\"\n    );\n    this._externals.delete(funcName);\n  }\n\n  public ValidateExternalBindings(): void;\n  public ValidateExternalBindings(\n    c: Container | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings(\n    o: InkObject | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings() {\n    let c: Container | null = null;\n    let o: InkObject | null = null;\n    let missingExternals: Set<string> = arguments[1] || new Set();\n\n    if (arguments[0] instanceof Container) {\n      c = arguments[0];\n    }\n\n    if (arguments[0] instanceof InkObject) {\n      o = arguments[0];\n    }\n\n    if (c === null && o === null) {\n      this.ValidateExternalBindings(\n        this._mainContentContainer,\n        missingExternals\n      );\n      this._hasValidatedExternals = true;\n\n      // No problem! Validation complete\n      if (missingExternals.size == 0) {\n        this._hasValidatedExternals = true;\n      } else {\n        let message = \"Error: Missing function binding for external\";\n        message += missingExternals.size > 1 ? \"s\" : \"\";\n        message += \": '\";\n        message += Array.from(missingExternals).join(\"', '\");\n        message += \"' \";\n        message += this.allowExternalFunctionFallbacks\n          ? \", and no fallback ink function found.\"\n          : \" (ink fallbacks disabled)\";\n\n        this.Error(message);\n      }\n    } else if (c != null) {\n      for (let innerContent of c.content) {\n        let container = innerContent as Container;\n        if (container == null || !container.hasValidName)\n          this.ValidateExternalBindings(innerContent, missingExternals);\n      }\n      for (let [, value] of c.namedContent) {\n        this.ValidateExternalBindings(\n          asOrNull(value, InkObject),\n          missingExternals\n        );\n      }\n    } else if (o != null) {\n      let divert = asOrNull(o, Divert);\n      if (divert && divert.isExternal) {\n        let name = divert.targetPathString;\n        if (name === null) {\n          return throwNullException(\"name\");\n        }\n        if (!this._externals.has(name)) {\n          if (this.allowExternalFunctionFallbacks) {\n            let fallbackFound = this.mainContentContainer.namedContent.has(\n              name\n            );\n            if (!fallbackFound) {\n              missingExternals.add(name);\n            }\n          } else {\n            missingExternals.add(name);\n          }\n        }\n      }\n    }\n  }\n\n  public ObserveVariable(\n    variableName: string,\n    observer: Story.VariableObserver\n  ) {\n    this.IfAsyncWeCant(\"observe a new variable\");\n\n    if (this._variableObservers === null) this._variableObservers = new Map();\n\n    if (!this.state.variablesState.GlobalVariableExistsWithName(variableName))\n      throw new StoryException(\n        \"Cannot observe variable '\" +\n          variableName +\n          \"' because it wasn't declared in the ink story.\"\n      );\n\n    if (this._variableObservers.has(variableName)) {\n      this._variableObservers.get(variableName)!.push(observer);\n    } else {\n      this._variableObservers.set(variableName, [observer]);\n    }\n  }\n\n  public ObserveVariables(\n    variableNames: string[],\n    observers: Story.VariableObserver[]\n  ) {\n    for (let i = 0, l = variableNames.length; i < l; i++) {\n      this.ObserveVariable(variableNames[i], observers[i]);\n    }\n  }\n\n  public RemoveVariableObserver(\n    observer: Story.VariableObserver,\n    specificVariableName: string\n  ) {\n    this.IfAsyncWeCant(\"remove a variable observer\");\n\n    if (this._variableObservers === null) return;\n\n    if (typeof specificVariableName !== \"undefined\") {\n      if (this._variableObservers.has(specificVariableName)) {\n        let observers = this._variableObservers.get(specificVariableName)!;\n\n        if (observer !== null) {\n          observers.splice(observers.indexOf(observer), 1);\n        } else {\n          this._variableObservers.delete(specificVariableName);\n        }\n      }\n    } else if (observer !== null) {\n      let keys = this._variableObservers.keys();\n\n      for (let varName of keys) {\n        let observers = this._variableObservers.get(varName)!;\n        observers.splice(observers.indexOf(observer), 1);\n      }\n    }\n  }\n\n  public VariableStateDidChangeEvent(\n    variableName: string,\n    newValueObj: InkObject\n  ) {\n    if (this._variableObservers === null) return;\n\n    let observers = this._variableObservers.get(variableName);\n    if (typeof observers !== \"undefined\") {\n      if (!(newValueObj instanceof Value)) {\n        throw new Error(\n          \"Tried to get the value of a variable that isn't a standard type\"\n        );\n      }\n      // var val = newValueObj as Value;\n      let val = asOrThrows(newValueObj, Value);\n\n      for (let observer of observers) {\n        observer(variableName, val.valueObject);\n      }\n    }\n  }\n\n  get globalTags() {\n    return this.TagsAtStartOfFlowContainerWithPathString(\"\");\n  }\n\n  public TagsForContentAtPath(path: string) {\n    return this.TagsAtStartOfFlowContainerWithPathString(path);\n  }\n\n  public TagsAtStartOfFlowContainerWithPathString(pathString: string) {\n    let path = new Path(pathString);\n\n    let flowContainer = this.ContentAtPath(path).container;\n    if (flowContainer === null) {\n      return throwNullException(\"flowContainer\");\n    }\n    while (true) {\n      let firstContent: InkObject = flowContainer.content[0];\n      if (firstContent instanceof Container) flowContainer = firstContent;\n      else break;\n    }\n\n    let tags: string[] | null = null;\n\n    for (let c of flowContainer.content) {\n      // var tag = c as Runtime.Tag;\n      let tag = asOrNull(c, Tag);\n      if (tag) {\n        if (tags == null) tags = [];\n        tags.push(tag.text);\n      } else break;\n    }\n\n    return tags;\n  }\n\n  public BuildStringOfHierarchy() {\n    let sb = new StringBuilder();\n\n    this.mainContentContainer.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n\n    return sb.toString();\n  }\n\n  public BuildStringOfContainer(container: Container) {\n    let sb = new StringBuilder();\n    container.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n    return sb.toString();\n  }\n\n  public NextContent() {\n    this.state.previousPointer = this.state.currentPointer.copy();\n\n    if (!this.state.divertedPointer.isNull) {\n      this.state.currentPointer = this.state.divertedPointer.copy();\n      this.state.divertedPointer = Pointer.Null;\n\n      this.VisitChangedContainersDueToDivert();\n\n      if (!this.state.currentPointer.isNull) {\n        return;\n      }\n    }\n\n    let successfulPointerIncrement = this.IncrementContentPointer();\n\n    if (!successfulPointerIncrement) {\n      let didPop = false;\n\n      if (this.state.callStack.CanPop(PushPopType.Function)) {\n        this.state.PopCallStack(PushPopType.Function);\n\n        if (this.state.inExpressionEvaluation) {\n          this.state.PushEvaluationStack(new Void());\n        }\n\n        didPop = true;\n      } else if (this.state.callStack.canPopThread) {\n        this.state.callStack.PopThread();\n\n        didPop = true;\n      } else {\n        this.state.TryExitFunctionEvaluationFromGame();\n      }\n\n      if (didPop && !this.state.currentPointer.isNull) {\n        this.NextContent();\n      }\n    }\n  }\n\n  public IncrementContentPointer() {\n    let successfulIncrement = true;\n\n    let pointer = this.state.callStack.currentElement.currentPointer.copy();\n    pointer.index++;\n\n    if (pointer.container === null) {\n      return throwNullException(\"pointer.container\");\n    }\n    while (pointer.index >= pointer.container.content.length) {\n      successfulIncrement = false;\n\n      // Container nextAncestor = pointer.container.parent as Container;\n      let nextAncestor = asOrNull(pointer.container.parent, Container);\n      if (nextAncestor instanceof Container === false) {\n        break;\n      }\n\n      let indexInAncestor = nextAncestor!.content.indexOf(pointer.container);\n      if (indexInAncestor == -1) {\n        break;\n      }\n\n      pointer = new Pointer(nextAncestor, indexInAncestor);\n\n      pointer.index++;\n\n      successfulIncrement = true;\n      if (pointer.container === null) {\n        return throwNullException(\"pointer.container\");\n      }\n    }\n\n    if (!successfulIncrement) pointer = Pointer.Null;\n\n    this.state.callStack.currentElement.currentPointer = pointer.copy();\n\n    return successfulIncrement;\n  }\n\n  public TryFollowDefaultInvisibleChoice() {\n    let allChoices = this._state.currentChoices;\n\n    let invisibleChoices = allChoices.filter((c) => c.isInvisibleDefault);\n\n    if (\n      invisibleChoices.length == 0 ||\n      allChoices.length > invisibleChoices.length\n    )\n      return false;\n\n    let choice = invisibleChoices[0];\n\n    if (choice.targetPath === null) {\n      return throwNullException(\"choice.targetPath\");\n    }\n\n    if (choice.threadAtGeneration === null) {\n      return throwNullException(\"choice.threadAtGeneration\");\n    }\n\n    this.state.callStack.currentThread = choice.threadAtGeneration;\n\n    this.ChoosePath(choice.targetPath, false);\n\n    return true;\n  }\n\n  public NextSequenceShuffleIndex() {\n    // var numElementsIntVal = state.PopEvaluationStack () as IntValue;\n    let numElementsIntVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n    if (!(numElementsIntVal instanceof IntValue)) {\n      this.Error(\"expected number of elements in sequence for shuffle index\");\n      return 0;\n    }\n\n    let seqContainer = this.state.currentPointer.container;\n    if (seqContainer === null) {\n      return throwNullException(\"seqContainer\");\n    }\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (numElementsIntVal.value === null) {\n      return throwNullException(\"numElementsIntVal.value\");\n    }\n    let numElements = numElementsIntVal.value;\n\n    // var seqCountVal = state.PopEvaluationStack () as IntValue;\n    let seqCountVal = asOrThrows(this.state.PopEvaluationStack(), IntValue);\n    let seqCount = seqCountVal.value;\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (seqCount === null) {\n      return throwNullException(\"seqCount\");\n    }\n\n    let loopIndex = seqCount / numElements;\n    let iterationIndex = seqCount % numElements;\n\n    let seqPathStr = seqContainer.path.toString();\n    let sequenceHash = 0;\n    for (let i = 0, l = seqPathStr.length; i < l; i++) {\n      sequenceHash += seqPathStr.charCodeAt(i) || 0;\n    }\n    let randomSeed = sequenceHash + loopIndex + this.state.storySeed;\n    let random = new PRNG(Math.floor(randomSeed));\n\n    let unpickedIndices = [];\n    for (let i = 0; i < numElements; ++i) {\n      unpickedIndices.push(i);\n    }\n\n    for (let i = 0; i <= iterationIndex; ++i) {\n      let chosen = random.next() % unpickedIndices.length;\n      let chosenIndex = unpickedIndices[chosen];\n      unpickedIndices.splice(chosen, 1);\n\n      if (i == iterationIndex) {\n        return chosenIndex;\n      }\n    }\n\n    throw new Error(\"Should never reach here\");\n  }\n\n  public Error(message: string, useEndLineNumber = false): never {\n    let e = new StoryException(message);\n    e.useEndLineNumber = useEndLineNumber;\n    throw e;\n  }\n\n  public Warning(message: string) {\n    this.AddError(message, true);\n  }\n\n  public AddError(\n    message: string,\n    isWarning = false,\n    useEndLineNumber = false\n  ) {\n    let dm = this.currentDebugMetadata;\n\n    let errorTypeStr = isWarning ? \"WARNING\" : \"ERROR\";\n\n    if (dm != null) {\n      let lineNum = useEndLineNumber ? dm.endLineNumber : dm.startLineNumber;\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": '\" +\n        dm.fileName +\n        \"' line \" +\n        lineNum +\n        \": \" +\n        message;\n    } else if (!this.state.currentPointer.isNull) {\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": (\" +\n        this.state.currentPointer +\n        \"): \" +\n        message;\n    } else {\n      message = \"RUNTIME \" + errorTypeStr + \": \" + message;\n    }\n\n    this.state.AddError(message, isWarning);\n\n    // In a broken state don't need to know about any other errors.\n    if (!isWarning) this.state.ForceEnd();\n  }\n\n  public Assert(condition: boolean, message: string | null = null) {\n    if (condition == false) {\n      if (message == null) {\n        message = \"Story assert\";\n      }\n\n      throw new Error(message + \" \" + this.currentDebugMetadata);\n    }\n  }\n\n  get currentDebugMetadata(): DebugMetadata | null {\n    let dm: DebugMetadata | null;\n\n    let pointer = this.state.currentPointer;\n    if (!pointer.isNull && pointer.Resolve() !== null) {\n      dm = pointer.Resolve()!.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    for (let i = this.state.callStack.elements.length - 1; i >= 0; --i) {\n      pointer = this.state.callStack.elements[i].currentPointer;\n      if (!pointer.isNull && pointer.Resolve() !== null) {\n        dm = pointer.Resolve()!.debugMetadata;\n        if (dm !== null) {\n          return dm;\n        }\n      }\n    }\n\n    for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n      let outputObj = this.state.outputStream[i];\n      dm = outputObj.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    return null;\n  }\n\n  get mainContentContainer() {\n    if (this._temporaryEvaluationContainer) {\n      return this._temporaryEvaluationContainer;\n    } else {\n      return this._mainContentContainer;\n    }\n  }\n\n  /**\n   * `_mainContentContainer` is almost guaranteed to be set in the\n   * constructor, unless the json is malformed.\n   */\n  private _mainContentContainer!: Container;\n  private _listDefinitions: ListDefinitionsOrigin | null = null;\n\n  private _externals: Map<string, Story.ExternalFunction>;\n  private _variableObservers: Map<\n    string,\n    Story.VariableObserver[]\n  > | null = null;\n  private _hasValidatedExternals: boolean = false;\n\n  private _temporaryEvaluationContainer: Container | null = null;\n\n  /**\n   * `state` is almost guaranteed to be set in the constructor, unless\n   * using the compiler-specific constructor which will likely not be used in\n   * the real world.\n   */\n  private _state!: StoryState;\n\n  private _asyncContinueActive: boolean = false;\n  private _stateSnapshotAtLastNewline: StoryState | null = null;\n\n  private _recursiveContinueCount: number = 0;\n\n  private _asyncSaving: boolean = false;\n\n  private _profiler: any | null = null; // TODO: Profiler\n}\n\nexport namespace Story {\n  export enum OutputStateChange {\n    NoChange = 0,\n    ExtendedBeyondNewline = 1,\n    NewlineRemoved = 2,\n  }\n\n  export interface EvaluateFunctionTextOutput {\n    returned: any;\n    output: string;\n  }\n\n  export type VariableObserver = (variableName: string, newValue: any) => void;\n  export type ExternalFunction = (...args: any) => any;\n}\n","import { CallStack } from \"./CallStack\";\nimport { VariablesState } from \"./VariablesState\";\nimport { ValueType, Value, StringValue, ListValue } from \"./Value\";\nimport { PushPopType } from \"./PushPop\";\nimport { Tag } from \"./Tag\";\nimport { Glue } from \"./Glue\";\nimport { Path } from \"./Path\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { StoryException } from \"./StoryException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { PRNG } from \"./PRNG\";\nimport { Void } from \"./Void\";\nimport { Pointer } from \"./Pointer\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { Choice } from \"./Choice\";\nimport { asOrNull, asOrThrows, nullIfUndefined } from \"./TypeAssertion\";\nimport { Debug } from \"./Debug\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { throwNullException } from \"./NullException\";\nimport { Story } from \"./Story\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class StoryState {\n  public readonly kInkSaveStateVersion = 8;\n  public readonly kMinCompatibleLoadVersion = 8;\n\n  public ToJson(indented: boolean = false) {\n    let writer = new SimpleJson.Writer();\n    this.WriteJson(writer);\n    return writer.ToString();\n  }\n  public toJson(indented: boolean = false) {\n    return this.ToJson(indented);\n  }\n\n  public LoadJson(json: string) {\n    let jObject = SimpleJson.TextToDictionary(json);\n    this.LoadJsonObj(jObject);\n  }\n\n  public VisitCountAtPathString(pathString: string) {\n    let visitCountOut;\n\n    if (this._patch !== null) {\n      let container = this.story.ContentAtPath(new Path(pathString)).container;\n      if (container === null)\n        throw new Error(\"Content at path not found: \" + pathString);\n\n      visitCountOut = this._patch.TryGetVisitCount(container, 0);\n      if (visitCountOut.exists) return visitCountOut.result;\n    }\n\n    visitCountOut = tryGetValueFromMap(this._visitCounts, pathString, null);\n    if (visitCountOut.exists) return visitCountOut.result;\n\n    return 0;\n  }\n\n  public VisitCountForContainer(container: Container | null): number {\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    if (!container.visitsShouldBeCounted) {\n      this.story.Error(\n        \"Read count for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n      return 0;\n    }\n\n    if (this._patch !== null) {\n      let count = this._patch.TryGetVisitCount(container, 0);\n      if (count.exists) {\n        return count.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let count2 = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count2.exists) {\n      return count2.result!;\n    }\n\n    return 0;\n  }\n\n  public IncrementVisitCountForContainer(container: Container) {\n    if (this._patch !== null) {\n      let currCount = this.VisitCountForContainer(container);\n      currCount++;\n      this._patch.SetVisitCount(container, currCount);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    let count = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count.exists) {\n      this._visitCounts.set(containerPathStr, count.result! + 1);\n    } else {\n      this._visitCounts.set(containerPathStr, 1);\n    }\n  }\n\n  public RecordTurnIndexVisitToContainer(container: Container) {\n    if (this._patch !== null) {\n      this._patch.SetTurnIndex(container, this.currentTurnIndex);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    this._turnIndices.set(containerPathStr, this.currentTurnIndex);\n  }\n\n  public TurnsSinceForContainer(container: Container) {\n    if (!container.turnIndexShouldBeCounted) {\n      this.story.Error(\n        \"TURNS_SINCE() for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n    }\n\n    if (this._patch !== null) {\n      let index = this._patch.TryGetTurnIndex(container, 0);\n      if (index.exists) {\n        return this.currentTurnIndex - index.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let index2 = tryGetValueFromMap(this._turnIndices, containerPathStr, 0);\n    if (index2.exists) {\n      return this.currentTurnIndex - index2.result!;\n    } else {\n      return -1;\n    }\n  }\n\n  get callstackDepth() {\n    return this.callStack.depth;\n  }\n\n  get outputStream() {\n    return this._outputStream;\n  }\n\n  get currentChoices() {\n    // If we can continue generating text content rather than choices,\n    // then we reflect the choice list as being empty, since choices\n    // should always come at the end.\n    if (this.canContinue) return [];\n    return this._currentChoices;\n  }\n\n  get generatedChoices() {\n    return this._currentChoices;\n  }\n\n  get currentErrors() {\n    return this._currentErrors;\n  }\n  private _currentErrors: string[] | null = null;\n\n  get currentWarnings() {\n    return this._currentWarnings;\n  }\n  private _currentWarnings: string[] | null = null;\n\n  get variablesState() {\n    return this._variablesState;\n  }\n  set variablesState(value) {\n    this._variablesState = value;\n  }\n  private _variablesState: VariablesState;\n\n  public callStack: CallStack;\n\n  get evaluationStack() {\n    return this._evaluationStack;\n  }\n  private _evaluationStack: InkObject[];\n\n  public divertedPointer: Pointer = Pointer.Null;\n\n  get visitCounts() {\n    return this._visitCounts;\n  }\n\n  get turnIndices() {\n    return this._turnIndices;\n  }\n\n  get currentTurnIndex() {\n    return this._currentTurnIndex;\n  }\n  set currentTurnIndex(value) {\n    this._currentTurnIndex = value;\n  }\n  private _currentTurnIndex: number = 0;\n\n  public storySeed: number = 0;\n  public previousRandom: number = 0;\n  public didSafeExit: boolean = false;\n\n  public story: Story;\n\n  get currentPathString() {\n    let pointer = this.currentPointer;\n    if (pointer.isNull) {\n      return null;\n    } else {\n      if (pointer.path === null) {\n        return throwNullException(\"pointer.path\");\n      }\n      return pointer.path.toString();\n    }\n  }\n\n  get currentPointer() {\n    return this.callStack.currentElement.currentPointer.copy();\n  }\n\n  set currentPointer(value) {\n    this.callStack.currentElement.currentPointer = value.copy();\n  }\n\n  get previousPointer() {\n    return this.callStack.currentThread.previousPointer.copy();\n  }\n\n  set previousPointer(value) {\n    this.callStack.currentThread.previousPointer = value.copy();\n  }\n\n  get canContinue() {\n    return !this.currentPointer.isNull && !this.hasError;\n  }\n\n  get hasError() {\n    return this.currentErrors != null && this.currentErrors.length > 0;\n  }\n\n  get hasWarning() {\n    return this.currentWarnings != null && this.currentWarnings.length > 0;\n  }\n\n  get currentText() {\n    if (this._outputStreamTextDirty) {\n      let sb = new StringBuilder();\n\n      for (let outputObj of this._outputStream) {\n        // var textContent = outputObj as StringValue;\n        let textContent = asOrNull(outputObj, StringValue);\n        if (textContent !== null) {\n          sb.Append(textContent.value);\n        }\n      }\n\n      this._currentText = this.CleanOutputWhitespace(sb.toString());\n      this._outputStreamTextDirty = false;\n    }\n\n    return this._currentText;\n  }\n  private _currentText: string | null = null;\n\n  public CleanOutputWhitespace(str: string) {\n    let sb = new StringBuilder();\n\n    let currentWhitespaceStart = -1;\n    let startOfLine = 0;\n\n    for (let i = 0; i < str.length; i++) {\n      let c = str.charAt(i);\n\n      let isInlineWhitespace = c == \" \" || c == \"\\t\";\n\n      if (isInlineWhitespace && currentWhitespaceStart == -1)\n        currentWhitespaceStart = i;\n\n      if (!isInlineWhitespace) {\n        if (\n          c != \"\\n\" &&\n          currentWhitespaceStart > 0 &&\n          currentWhitespaceStart != startOfLine\n        ) {\n          sb.Append(\" \");\n        }\n        currentWhitespaceStart = -1;\n      }\n\n      if (c == \"\\n\") startOfLine = i + 1;\n\n      if (!isInlineWhitespace) sb.Append(c);\n    }\n\n    return sb.toString();\n  }\n\n  get currentTags() {\n    if (this._outputStreamTagsDirty) {\n      this._currentTags = [];\n\n      for (let outputObj of this._outputStream) {\n        // var tag = outputObj as Tag;\n        let tag = asOrNull(outputObj, Tag);\n        if (tag !== null) {\n          this._currentTags.push(tag.text);\n        }\n      }\n\n      this._outputStreamTagsDirty = false;\n    }\n\n    return this._currentTags;\n  }\n  private _currentTags: string[] | null = null;\n\n  get inExpressionEvaluation() {\n    return this.callStack.currentElement.inExpressionEvaluation;\n  }\n  set inExpressionEvaluation(value) {\n    this.callStack.currentElement.inExpressionEvaluation = value;\n  }\n\n  constructor(story: Story) {\n    this.story = story;\n\n    this._outputStream = [];\n    this.OutputStreamDirty();\n\n    this._evaluationStack = [];\n\n    this.callStack = new CallStack(story);\n    this._variablesState = new VariablesState(\n      this.callStack,\n      story.listDefinitions\n    );\n\n    this._visitCounts = new Map();\n    this._turnIndices = new Map();\n    this.currentTurnIndex = -1;\n\n    let timeSeed = new Date().getTime();\n    this.storySeed = new PRNG(timeSeed).next() % 100;\n    this.previousRandom = 0;\n\n    this._currentChoices = [];\n\n    this.GoToStart();\n  }\n\n  public GoToStart() {\n    this.callStack.currentElement.currentPointer = Pointer.StartOf(\n      this.story.mainContentContainer\n    );\n  }\n\n  public CopyAndStartPatching() {\n    let copy = new StoryState(this.story);\n\n    copy._patch = new StatePatch(this._patch);\n\n    copy.outputStream.push.apply(copy.outputStream, this._outputStream);\n    copy.OutputStreamDirty();\n\n    copy._currentChoices.push.apply(copy._currentChoices, this._currentChoices);\n\n    if (this.hasError) {\n      copy._currentErrors = [];\n      copy._currentErrors.push.apply(\n        copy._currentErrors,\n        this.currentErrors || []\n      );\n    }\n\n    if (this.hasWarning) {\n      copy._currentWarnings = [];\n      copy._currentWarnings.push.apply(\n        copy._currentWarnings,\n        this.currentWarnings || []\n      );\n    }\n\n    copy.callStack = new CallStack(this.callStack);\n\n    copy.variablesState = this.variablesState;\n    copy.variablesState.callStack = copy.callStack;\n    copy.variablesState.patch = copy._patch;\n\n    copy.evaluationStack.push.apply(copy.evaluationStack, this.evaluationStack);\n\n    if (!this.divertedPointer.isNull)\n      copy.divertedPointer = this.divertedPointer.copy();\n\n    copy.previousPointer = this.previousPointer.copy();\n\n    copy._visitCounts = this._visitCounts;\n    copy._turnIndices = this._turnIndices;\n\n    copy.currentTurnIndex = this.currentTurnIndex;\n    copy.storySeed = this.storySeed;\n    copy.previousRandom = this.previousRandom;\n\n    copy.didSafeExit = this.didSafeExit;\n\n    return copy;\n  }\n\n  public RestoreAfterPatch() {\n    this.variablesState.callStack = this.callStack;\n    this.variablesState.patch = this._patch;\n  }\n\n  public ApplyAnyPatch() {\n    if (this._patch === null) return;\n\n    this.variablesState.ApplyPatch();\n\n    for (let [key, value] of this._patch.visitCounts)\n      this.ApplyCountChanges(key, value, true);\n\n    for (let [key, value] of this._patch.turnIndices)\n      this.ApplyCountChanges(key, value, false);\n\n    this._patch = null;\n  }\n\n  public ApplyCountChanges(\n    container: Container,\n    newCount: number,\n    isVisit: boolean\n  ) {\n    let counts = isVisit ? this._visitCounts : this._turnIndices;\n    counts.set(container.path.toString(), newCount);\n  }\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n\n    let hasChoiceThreads = false;\n    for (let c of this._currentChoices) {\n      if (c.threadAtGeneration === null) {\n        return throwNullException(\"c.threadAtGeneration\");\n      }\n      c.originalThreadIndex = c.threadAtGeneration.threadIndex;\n\n      if (this.callStack.ThreadWithIndex(c.originalThreadIndex) === null) {\n        if (!hasChoiceThreads) {\n          hasChoiceThreads = true;\n          writer.WritePropertyStart(\"choiceThreads\");\n          writer.WriteObjectStart();\n        }\n\n        writer.WritePropertyStart(c.originalThreadIndex);\n        c.threadAtGeneration.WriteJson(writer);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (hasChoiceThreads) {\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    // In the following two calls, `WriteJson` is called inside an arrow\n    // function to make sure `this` is correctly bound and passed down\n    // the call hierarchy.\n\n    writer.WriteProperty(\"callstackThreads\", (w) =>\n      this.callStack.WriteJson(w)\n    );\n\n    writer.WriteProperty(\"variablesState\", (w) =>\n      this.variablesState.WriteJson(w)\n    );\n\n    writer.WriteProperty(\"evalStack\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this.evaluationStack)\n    );\n\n    writer.WriteProperty(\"outputStream\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this._outputStream)\n    );\n\n    writer.WriteProperty(\"currentChoices\", (w) => {\n      w.WriteArrayStart();\n      for (let c of this._currentChoices) JsonSerialisation.WriteChoice(w, c);\n      w.WriteArrayEnd();\n    });\n\n    if (!this.divertedPointer.isNull) {\n      if (this.divertedPointer.path === null) {\n        return throwNullException(\"divertedPointer\");\n      }\n      writer.WriteProperty(\n        \"currentDivertTarget\",\n        this.divertedPointer.path.componentsString\n      );\n    }\n\n    writer.WriteProperty(\"visitCounts\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._visitCounts)\n    );\n    writer.WriteProperty(\"turnIndices\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._turnIndices)\n    );\n\n    writer.WriteIntProperty(\"turnIdx\", this.currentTurnIndex);\n    writer.WriteIntProperty(\"storySeed\", this.storySeed);\n    writer.WriteIntProperty(\"previousRandom\", this.previousRandom);\n\n    writer.WriteIntProperty(\"inkSaveVersion\", this.kInkSaveStateVersion);\n\n    writer.WriteIntProperty(\"inkFormatVersion\", Story.inkVersionCurrent);\n\n    writer.WriteObjectEnd();\n  }\n\n  public LoadJsonObj(value: Record<string, any>) {\n    let jObject = value;\n\n    let jSaveVersion = jObject[\"inkSaveVersion\"];\n    if (jSaveVersion == null) {\n      throw new StoryException(\"ink save format incorrect, can't load.\");\n    } else if (parseInt(jSaveVersion) < this.kMinCompatibleLoadVersion) {\n      throw new StoryException(\n        \"Ink save format isn't compatible with the current version (saw '\" +\n          jSaveVersion +\n          \"', but minimum is \" +\n          this.kMinCompatibleLoadVersion +\n          \"), so can't load.\"\n      );\n    }\n\n    this.callStack.SetJsonToken(jObject[\"callstackThreads\"], this.story);\n    this.variablesState.SetJsonToken(jObject[\"variablesState\"]);\n\n    this._evaluationStack = JsonSerialisation.JArrayToRuntimeObjList(\n      jObject[\"evalStack\"]\n    );\n\n    this._outputStream = JsonSerialisation.JArrayToRuntimeObjList(\n      jObject[\"outputStream\"]\n    );\n    this.OutputStreamDirty();\n\n    // currentChoices = Json.JArrayToRuntimeObjList<Choice>((JArray)jObject [\"currentChoices\"]);\n    this._currentChoices = JsonSerialisation.JArrayToRuntimeObjList(\n      jObject[\"currentChoices\"]\n    ) as Choice[];\n\n    let currentDivertTargetPath = jObject[\"currentDivertTarget\"];\n    if (currentDivertTargetPath != null) {\n      let divertPath = new Path(currentDivertTargetPath.toString());\n      this.divertedPointer = this.story.PointerAtPath(divertPath);\n    }\n\n    this._visitCounts = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"visitCounts\"]\n    );\n    this._turnIndices = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"turnIndices\"]\n    );\n    this.currentTurnIndex = parseInt(jObject[\"turnIdx\"]);\n    this.storySeed = parseInt(jObject[\"storySeed\"]);\n    this.previousRandom = parseInt(jObject[\"previousRandom\"]);\n\n    // var jChoiceThreads = jObject[\"choiceThreads\"] as JObject;\n    let jChoiceThreads = jObject[\"choiceThreads\"] as Record<string, any>;\n\n    for (let c of this._currentChoices) {\n      let foundActiveThread = this.callStack.ThreadWithIndex(\n        c.originalThreadIndex\n      );\n      if (foundActiveThread != null) {\n        c.threadAtGeneration = foundActiveThread.Copy();\n      } else {\n        let jSavedChoiceThread =\n          jChoiceThreads[c.originalThreadIndex.toString()];\n        c.threadAtGeneration = new CallStack.Thread(\n          jSavedChoiceThread,\n          this.story\n        );\n      }\n    }\n  }\n\n  public ResetErrors() {\n    this._currentErrors = null;\n    this._currentWarnings = null;\n  }\n  public ResetOutput(objs: InkObject[] | null = null) {\n    this._outputStream.length = 0;\n    if (objs !== null) this._outputStream.push.apply(this._outputStream, objs);\n    this.OutputStreamDirty();\n  }\n\n  public PushToOutputStream(obj: InkObject | null) {\n    // var text = obj as StringValue;\n    let text = asOrNull(obj, StringValue);\n    if (text !== null) {\n      let listText = this.TrySplittingHeadTailWhitespace(text);\n      if (listText !== null) {\n        for (let textObj of listText) {\n          this.PushToOutputStreamIndividual(textObj);\n        }\n        this.OutputStreamDirty();\n        return;\n      }\n    }\n\n    this.PushToOutputStreamIndividual(obj);\n    this.OutputStreamDirty();\n  }\n\n  public PopFromOutputStream(count: number) {\n    this.outputStream.splice(this.outputStream.length - count, count);\n    this.OutputStreamDirty();\n  }\n\n  public TrySplittingHeadTailWhitespace(single: StringValue) {\n    let str = single.value;\n    if (str === null) {\n      return throwNullException(\"single.value\");\n    }\n\n    let headFirstNewlineIdx = -1;\n    let headLastNewlineIdx = -1;\n    for (let i = 0; i < str.length; ++i) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (headFirstNewlineIdx == -1) headFirstNewlineIdx = i;\n        headLastNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    let tailLastNewlineIdx = -1;\n    let tailFirstNewlineIdx = -1;\n    for (let i = 0; i < str.length; ++i) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (tailLastNewlineIdx == -1) tailLastNewlineIdx = i;\n        tailFirstNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    // No splitting to be done?\n    if (headFirstNewlineIdx == -1 && tailLastNewlineIdx == -1) return null;\n\n    let listTexts: StringValue[] = [];\n    let innerStrStart = 0;\n    let innerStrEnd = str.length;\n\n    if (headFirstNewlineIdx != -1) {\n      if (headFirstNewlineIdx > 0) {\n        let leadingSpaces = new StringValue(\n          str.substring(0, headFirstNewlineIdx)\n        );\n        listTexts.push(leadingSpaces);\n      }\n      listTexts.push(new StringValue(\"\\n\"));\n      innerStrStart = headLastNewlineIdx + 1;\n    }\n\n    if (tailLastNewlineIdx != -1) {\n      innerStrEnd = tailFirstNewlineIdx;\n    }\n\n    if (innerStrEnd > innerStrStart) {\n      let innerStrText = str.substring(\n        innerStrStart,\n        innerStrEnd - innerStrStart\n      );\n      listTexts.push(new StringValue(innerStrText));\n    }\n\n    if (tailLastNewlineIdx != -1 && tailFirstNewlineIdx > headLastNewlineIdx) {\n      listTexts.push(new StringValue(\"\\n\"));\n      if (tailLastNewlineIdx < str.length - 1) {\n        let numSpaces = str.length - tailLastNewlineIdx - 1;\n        let trailingSpaces = new StringValue(\n          str.substring(tailLastNewlineIdx + 1, numSpaces)\n        );\n        listTexts.push(trailingSpaces);\n      }\n    }\n\n    return listTexts;\n  }\n\n  public PushToOutputStreamIndividual(obj: InkObject | null) {\n    let glue = asOrNull(obj, Glue);\n    let text = asOrNull(obj, StringValue);\n\n    let includeInOutput = true;\n\n    if (glue) {\n      this.TrimNewlinesFromOutputStream();\n      includeInOutput = true;\n    } else if (text) {\n      let functionTrimIndex = -1;\n      let currEl = this.callStack.currentElement;\n      if (currEl.type == PushPopType.Function) {\n        functionTrimIndex = currEl.functionStartInOutputStream;\n      }\n\n      let glueTrimIndex = -1;\n      for (let i = this._outputStream.length - 1; i >= 0; i--) {\n        let o = this._outputStream[i];\n        let c = o instanceof ControlCommand ? o : null;\n        let g = o instanceof Glue ? o : null;\n\n        if (g != null) {\n          glueTrimIndex = i;\n          break;\n        } else if (\n          c != null &&\n          c.commandType == ControlCommand.CommandType.BeginString\n        ) {\n          if (i >= functionTrimIndex) {\n            functionTrimIndex = -1;\n          }\n          break;\n        }\n      }\n\n      let trimIndex = -1;\n      if (glueTrimIndex != -1 && functionTrimIndex != -1)\n        trimIndex = Math.min(functionTrimIndex, glueTrimIndex);\n      else if (glueTrimIndex != -1) trimIndex = glueTrimIndex;\n      else trimIndex = functionTrimIndex;\n\n      if (trimIndex != -1) {\n        if (text.isNewline) {\n          includeInOutput = false;\n        } else if (text.isNonWhitespace) {\n          if (glueTrimIndex > -1) this.RemoveExistingGlue();\n\n          if (functionTrimIndex > -1) {\n            let callStackElements = this.callStack.elements;\n            for (let i = callStackElements.length - 1; i >= 0; i--) {\n              let el = callStackElements[i];\n              if (el.type == PushPopType.Function) {\n                el.functionStartInOutputStream = -1;\n              } else {\n                break;\n              }\n            }\n          }\n        }\n      } else if (text.isNewline) {\n        if (this.outputStreamEndsInNewline || !this.outputStreamContainsContent)\n          includeInOutput = false;\n      }\n    }\n\n    if (includeInOutput) {\n      if (obj === null) {\n        return throwNullException(\"obj\");\n      }\n      this._outputStream.push(obj);\n      this.OutputStreamDirty();\n    }\n  }\n\n  public TrimNewlinesFromOutputStream() {\n    let removeWhitespaceFrom = -1;\n\n    let i = this._outputStream.length - 1;\n    while (i >= 0) {\n      let obj = this._outputStream[i];\n      let cmd = asOrNull(obj, ControlCommand);\n      let txt = asOrNull(obj, StringValue);\n\n      if (cmd != null || (txt != null && txt.isNonWhitespace)) {\n        break;\n      } else if (txt != null && txt.isNewline) {\n        removeWhitespaceFrom = i;\n      }\n      i--;\n    }\n\n    // Remove the whitespace\n    if (removeWhitespaceFrom >= 0) {\n      i = removeWhitespaceFrom;\n      while (i < this._outputStream.length) {\n        let text = asOrNull(this._outputStream[i], StringValue);\n        if (text) {\n          this._outputStream.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  public RemoveExistingGlue() {\n    for (let i = this._outputStream.length - 1; i >= 0; i--) {\n      let c = this._outputStream[i];\n      if (c instanceof Glue) {\n        this._outputStream.splice(i, 1);\n      } else if (c instanceof ControlCommand) {\n        break;\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  get outputStreamEndsInNewline() {\n    if (this._outputStream.length > 0) {\n      for (let i = this._outputStream.length - 1; i >= 0; i--) {\n        let obj = this._outputStream[i];\n        if (obj instanceof ControlCommand) break;\n        let text = this._outputStream[i];\n        if (text instanceof StringValue) {\n          if (text.isNewline) return true;\n          else if (text.isNonWhitespace) break;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  get outputStreamContainsContent() {\n    for (let i = 0; i < this._outputStream.length; i++) {\n      if (this._outputStream[i] instanceof StringValue) return true;\n    }\n    return false;\n  }\n\n  get inStringEvaluation() {\n    for (let i = this._outputStream.length - 1; i >= 0; i--) {\n      // var cmd = this._outputStream[i] as ControlCommand;\n      let cmd = asOrNull(this._outputStream[i], ControlCommand);\n      if (\n        cmd instanceof ControlCommand &&\n        cmd.commandType == ControlCommand.CommandType.BeginString\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public PushEvaluationStack(obj: InkObject | null) {\n    // var listValue = obj as ListValue;\n    let listValue = asOrNull(obj, ListValue);\n    if (listValue) {\n      // Update origin when list is has something to indicate the list origin\n      let rawList = listValue.value;\n      if (rawList === null) {\n        return throwNullException(\"rawList\");\n      }\n\n      if (rawList.originNames != null) {\n        if (!rawList.origins) rawList.origins = [];\n        rawList.origins.length = 0;\n\n        for (let n of rawList.originNames) {\n          if (this.story.listDefinitions === null)\n            return throwNullException(\"StoryState.story.listDefinitions\");\n          let def = this.story.listDefinitions.TryListGetDefinition(n, null);\n          if (def.result === null)\n            return throwNullException(\"StoryState def.result\");\n          if (rawList.origins.indexOf(def.result) < 0)\n            rawList.origins.push(def.result);\n        }\n      }\n    }\n\n    if (obj === null) {\n      return throwNullException(\"obj\");\n    }\n    this.evaluationStack.push(obj);\n  }\n\n  public PopEvaluationStack(): InkObject;\n  public PopEvaluationStack(numberOfObjects: number): InkObject[];\n  public PopEvaluationStack(numberOfObjects?: number) {\n    if (typeof numberOfObjects === \"undefined\") {\n      let obj = this.evaluationStack.pop();\n      return nullIfUndefined(obj);\n    } else {\n      if (numberOfObjects > this.evaluationStack.length) {\n        throw new Error(\"trying to pop too many objects\");\n      }\n\n      let popped = this.evaluationStack.splice(\n        this.evaluationStack.length - numberOfObjects,\n        numberOfObjects\n      );\n      return nullIfUndefined(popped);\n    }\n  }\n\n  public PeekEvaluationStack() {\n    return this.evaluationStack[this.evaluationStack.length - 1];\n  }\n\n  public ForceEnd() {\n    this.callStack.Reset();\n\n    this._currentChoices.length = 0;\n\n    this.currentPointer = Pointer.Null;\n    this.previousPointer = Pointer.Null;\n\n    this.didSafeExit = true;\n  }\n\n  public TrimWhitespaceFromFunctionEnd() {\n    Debug.Assert(this.callStack.currentElement.type == PushPopType.Function);\n    let functionStartPoint = this.callStack.currentElement\n      .functionStartInOutputStream;\n\n    if (functionStartPoint == -1) {\n      functionStartPoint = 0;\n    }\n\n    for (let i = this._outputStream.length - 1; i >= functionStartPoint; i--) {\n      let obj = this._outputStream[i];\n      let txt = asOrNull(obj, StringValue);\n      let cmd = asOrNull(obj, ControlCommand);\n\n      if (txt == null) continue;\n      if (cmd) break;\n\n      if (txt.isNewline || txt.isInlineWhitespace) {\n        this._outputStream.splice(i, 1);\n        this.OutputStreamDirty();\n      } else {\n        break;\n      }\n    }\n  }\n\n  public PopCallStack(popType: PushPopType | null = null) {\n    if (this.callStack.currentElement.type == PushPopType.Function)\n      this.TrimWhitespaceFromFunctionEnd();\n\n    this.callStack.Pop(popType);\n  }\n\n  public SetChosenPath(path: Path, incrementingTurnIndex: boolean) {\n    // Changing direction, assume we need to clear current set of choices\n    this._currentChoices.length = 0;\n\n    let newPointer = this.story.PointerAtPath(path);\n    if (!newPointer.isNull && newPointer.index == -1) newPointer.index = 0;\n\n    this.currentPointer = newPointer;\n\n    if (incrementingTurnIndex) {\n      this.currentTurnIndex++;\n    }\n  }\n\n  public StartFunctionEvaluationFromGame(\n    funcContainer: Container,\n    args: any[]\n  ) {\n    this.callStack.Push(\n      PushPopType.FunctionEvaluationFromGame,\n      this.evaluationStack.length\n    );\n    this.callStack.currentElement.currentPointer = Pointer.StartOf(\n      funcContainer\n    );\n\n    this.PassArgumentsToEvaluationStack(args);\n  }\n\n  public PassArgumentsToEvaluationStack(args: any[]) {\n    // Pass arguments onto the evaluation stack\n    if (args != null) {\n      for (let i = 0; i < args.length; i++) {\n        if (!(typeof args[i] === \"number\" || typeof args[i] === \"string\")) {\n          throw new Error(\n            \"ink arguments when calling EvaluateFunction / ChoosePathStringWithParameters  must be int, float or string\"\n          );\n        }\n\n        this.PushEvaluationStack(Value.Create(args[i]));\n      }\n    }\n  }\n\n  public TryExitFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type ==\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      this.currentPointer = Pointer.Null;\n      this.didSafeExit = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  public CompleteFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type !=\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      throw new StoryException(\n        \"Expected external function evaluation to be complete. Stack trace: \" +\n          this.callStack.callStackTrace\n      );\n    }\n\n    let originalEvaluationStackHeight = this.callStack.currentElement\n      .evaluationStackHeightWhenPushed;\n\n    let returnedObj: InkObject | null = null;\n    while (this.evaluationStack.length > originalEvaluationStackHeight) {\n      let poppedObj = this.PopEvaluationStack();\n      if (returnedObj === null) returnedObj = poppedObj;\n    }\n\n    this.PopCallStack(PushPopType.FunctionEvaluationFromGame);\n\n    if (returnedObj) {\n      if (returnedObj instanceof Void) return null;\n\n      // Some kind of value, if not void\n      // var returnVal = returnedObj as Runtime.Value;\n      let returnVal = asOrThrows(returnedObj, Value);\n\n      // DivertTargets get returned as the string of components\n      // (rather than a Path, which isn't public)\n      if (returnVal.valueType == ValueType.DivertTarget) {\n        return returnVal.valueObject.toString();\n      }\n\n      // Other types can just have their exact object type:\n      // int, float, string. VariablePointers get returned as strings.\n      return returnVal.valueObject;\n    }\n\n    return null;\n  }\n\n  public AddError(message: string, isWarning: boolean) {\n    if (!isWarning) {\n      if (this._currentErrors == null) this._currentErrors = [];\n      this._currentErrors.push(message);\n    } else {\n      if (this._currentWarnings == null) this._currentWarnings = [];\n      this._currentWarnings.push(message);\n    }\n  }\n\n  public OutputStreamDirty() {\n    this._outputStreamTextDirty = true;\n    this._outputStreamTagsDirty = true;\n  }\n\n  private _visitCounts: Map<string, number>;\n  private _turnIndices: Map<string, number>;\n\n  private _outputStream: InkObject[];\n  private _outputStreamTextDirty = true;\n  private _outputStreamTagsDirty = true;\n  private _currentChoices: Choice[];\n\n  private _patch: StatePatch | null = null;\n}\n","// This is simple replacement of the Stopwatch class from the .NET Framework.\n// The original class can count time with much more accuracy than the Javascript version.\n// It might be worth considering using `window.performance` in the browser\n// or `process.hrtime()` in node.\nexport class Stopwatch {\n  private startTime: number | undefined;\n\n  constructor() {\n    this.startTime = undefined;\n  }\n\n  get ElapsedMilliseconds(): number {\n    if (typeof this.startTime === \"undefined\") {\n      return 0;\n    }\n    return new Date().getTime() - this.startTime;\n  }\n\n  public Start() {\n    this.startTime = new Date().getTime();\n  }\n  public Stop() {\n    this.startTime = undefined;\n  }\n}\n"],"names":["Path","Component","Debug","componentsString","head","tail","relative","_components","_componentsString","_isRelative","arguments","push","this","concat","Array","index","pathToAppend","p","upwardMoves","i","length","isParent","otherPath","isRelative","l","Equals","c","apply","slice","self","lastComponentIdx","isIndex","join","value","substring","split","str","test","parseInt","path","Assert","condition","message","console","warn","trace","Error","asOrNull","obj","type","asOrThrows","asINamedContentOrNull","hasValidName","name","nullIfUndefined","isEquatable","_typeof","indexOrName","toString","otherComp","parentId","variable","NullException","throwNullException","InkObject","root","rootContentContainer","targetContent","ContentAtPath","dm","debugMetadata","startLineNumber","nearestContainer","Container","parent","GetComponent","contentContainer","globalPath","ownPath","minPathLength","Math","min","lastSharedPathCompIndex","ownComp","numUpwardsMoves","componentCount","newPathComps","up","ToParent","down","globalPathStr","relativePathStr","PathByAppendingPath","ConvertPathToRelative","prop","_debugMetadata","_path","comps","child","container","namedChild","unshift","content","indexOf","ancestor","StringBuilder","string","Append","format","args","replace","match","num","InkListItem","originName","itemName","nameParts","fullName","JSON","stringify","key","parse","isLikeInkListItem","Null","item","hasOwnProperty","InkList","Map","singleElement","otherList","_originNames","singleOriginListName","originStory","SetInitialOriginName","def","listDefinitions","TryListGetDefinition","exists","origins","result","Add","Key","Value","itemOrItemName","AddItem","origin","intVal","TryGetValueForItem","foundListDef","ContainsItemWithName","itemVal","ValueForItem","fromSerializedKey","has","serialized","serializedKey","set","initialOriginName","initialOriginNames","union","intersection","listToRemove","Count","minItem","maxItem","minBound","maxBound","ordered","orderedItems","minValue","maxValue","Number","MAX_SAFE_INTEGER","isInteger","subList","SetInitialOriginNames","originNames","otherInkList","sb","NaN","size","maxOriginName","every","max","isNull","list","items","ContainsKey","sort","x","y","localeCompare","StoryException","useEndLineNumber","tryGetValueFromMap","map","val","get","ValueType","AbstractValue","Create","targetType","valueObject","valueType","preferredNumberType","Int","IntValue","Float","isNaN","FloatValue","StringValue","String","DivertTargetValue","ListValue","newType","BadCastException","_isNewline","_this2","_isInlineWhitespace","parsedInt","defaultValue","tryParseInt","parsedFloat","parseFloat","tryParseFloat","isNewline","isInlineWhitespace","targetPath","DivertTarget","VariablePointerValue","variableName","contextIndex","_contextIndex","VariablePointer","listOrSingleItem","singleValue","List","oldValue","newValue","oldList","newList","CountFlags","SearchResult","searchResult","approximate","contentObjOrList","AddContent","contentObj","_content","TryAddNamedContent","namedContentObj","AddToNamedContentOnly","AssertType","namedContent","partialPathStart","partialPathLength","currentContainer","currentObj","comp","foundObj","ContentWithPathComponent","otherContainer","component","foundContent","BuildStringOfHierarchy","indentation","pointedObj","appendIndentation","AppendFormat","AppendLine","onlyNamed","namedOnlyContentDict","inkObject","named","existingNamedOnly","namedOnlyContent","flags","visitsShouldBeCounted","Visits","turnIndexShouldBeCounted","Turns","countingAtStartOnly","CountStartOnly","flag","_pathToFirstLeafContent","internalPathToFirstLeafContent","components","ControlCommand","CommandType","PushPopType","Glue","commandType","NotSet","_commandType","EvalStart","EvalOutput","EvalEnd","Duplicate","PopEvaluatedValue","PopFunction","PopTunnel","BeginString","EndString","NoOp","ChoiceCount","TurnsSince","ReadCount","Random","SeedRandom","VisitIndex","SequenceShuffleIndex","StartThread","Done","End","ListFromInt","ListRange","ListRandom","Pointer","PathByAppendingComponent","Divert","stackPushType","pushesToStack","otherDivert","hasVariableTarget","variableDivertName","targetStr","isConditional","Function","targetPathString","targetObj","_targetPath","targetPointer","Resolve","_targetPointer","ResolvePath","lastComponent","StartOf","copy","CompactPathString","ChoicePoint","onceOnly","pathOnChoice","choiceTargetObj","_pathOnChoice","choiceTarget","hasCondition","hasStartContent","hasChoiceOnlyContent","isInvisibleDefault","VariableReference","pathStringForCount","pathForCount","VariableAssignment","isNewDeclaration","isGlobal","Void","NativeFunctionCall","numberOfParameters","GenerateNativeFunctionsIfNecessary","_isPrototype","parameters","_prototype","Call","hasList","CallBinaryListOperation","coercedParams","CoerceValuesToSingleType","coercedType","CallType","parametersOfSingleType","param1","valType","val1","paramCount","_operationFuncs","opForTypeObj","val2","opForType","resultVal","CallListIncrementOperation","v1","v2","op","isTruthy","listIntParams","listVal","resultInkList","listItemKey","listItemValue","listItem","intOp","targetInt","itemOrigin","incrementedItem","TryGetItemWithValue","parametersIn","specialCaseList","parametersOut","originOfMaxItem","castedValue","Cast","_name","_nativeFunctions","_numberOfParameters","functionName","t","AddIntBinaryOp","Subtract","Multiply","Divide","floor","Mod","AddIntUnaryOp","Negate","Equal","Greater","Less","GreaterThanOrEquals","LessThanOrEquals","NotEquals","Not","And","Or","Max","Min","Pow","pow","Floor","Identity","Ceiling","AddFloatBinaryOp","AddFloatUnaryOp","ceil","AddStringBinaryOp","Has","includes","Hasnt","AddListBinaryOp","Union","Without","Contains","Intersect","GreaterThan","LessThan","AddListUnaryOp","Invert","inverse","All","all","ListMin","MinAsList","ListMax","MaxAsList","ValueOfList","AddOpToNativeFunc","d1","d2","nativeFunc","AddOpFuncForType","Tag","tagText","text","Choice","ListDefinition","_items","_itemNameToValues","ListDefinitionsOrigin","lists","_lists","_allUnambiguousListValueCache","listValue","definition","listOfLists","JsonSerialisation","jArray","skipLast","count","jTok","runtimeObj","JTokenToRuntimeObject","writer","dictionary","WriteObjectStart","WritePropertyStart","WriteRuntimeObject","WritePropertyEnd","WriteObjectEnd","WriteArrayStart","WriteArrayEnd","dict","WriteIntProperty","WriteRuntimeContainer","divert","divTypeKey","isExternal","Tunnel","WriteProperty","externalArgs","choicePoint","pathStringOnChoice","WriteInt","floatVal","WriteFloat","strVal","Write","WriteStringStart","WriteStringInner","WriteStringEnd","WriteInkList","divTargetVal","varPtrVal","controlCmd","_controlCommandNames","varRef","readCountPath","varAss","tag","choice","WriteChoice","jObject","token","firstChar","CallExistsWithName","CallWithName","isArray","propValue","varPtr","isDivert","divPushType","external","target","readCountVarRef","isVarAss","isGlobalVar","varName","isNewDecl","undefined","nameToVal","listContent","rawList","JObjectToChoice","JArrayToContainer","withoutName","countFlags","hasNameProperty","hasTerminator","namedContainer","WriteNull","JArrayToRuntimeObjList","terminatingObj","namedContentItem","namedSubContainer","jObj","sourcePath","originalThreadIndex","WritePropertyNameStart","WritePropertyNameInner","WritePropertyNameEnd","listDefJson","defsObj","allDefs","nameValue","nameValueKey","TOTAL_VALUES","CallStack","Story","storyContext","_startOfRoot","Reset","toCopy","_threads","otherThread","Copy","_threadCounter","Thread","callstack","Element","jThreadTok","thread","w","WriteObject","_this","WriteJson","newThread","currentThread","threadIndex","forkedThread","canPopThread","splice","externalEvaluationStackHeight","outputStreamLengthWithPushed","element","currentElement","currentPointer","evaluationStackHeightWhenPushed","functionStartInOutputStream","callStack","canPop","CanPop","pop","currentElementIndex","varValue","temporaryVariables","declareNew","contextElement","RetainListOriginsForAssignment","filtered","filter","elements","cs","elementIsEvaluateFromGame","FunctionEvaluationFromGame","isCurrent","pointer","inExpressionEvaluation","jThreadObj","jElementObj","pushPopType","currentContainerPathStr","currentContainerPathStrToken","threadPointerResult","Warning","el","temps","JObjectToDictionaryRuntimeObjs","clear","prevPath","prevContentObjPath","previousPointer","PointerAtPath","e","WriteDictionaryRuntimeObjs","resolvedPointer","VariablesState","listDefsOrigin","Set","_globalVariables","_callStack","_listDefsOrigin","Proxy","$","variableChangedEventCallbacks","callback","varContents","patch","TryGetGlobal","_defaultGlobalVariables","SetGlobal","globals","namedVarKey","namedVarValue","_changedVariablesForBatchObs","changedVariables","add","jToken","varValKey","varValValue","loadedToken","tokenInkObject","keyValKey","keyValValue","dontSaveDefaultValues","defaultVal","RuntimeObjectsEqual","obj1","obj2","constructor","GetRawVariableWithName","varPointer","ValueAtVariablePointer","variableValue","FindSingleItemListWithName","GetTemporaryVariableWithName","GetVariableWithName","setGlobal","GlobalVariableExistsWithName","ResolveVariablePointer","existingPointer","SetTemporaryVariable","variableChangedEvent","batchObservingVariableChanges","AddChangedVariable","GetContextIndexOfVariableNamed","doubleRedirectionPointer","_batchObservingVariableChanges","currentValue","PRNG","seed","next","StatePatch","_globals","_changedVariables","_visitCounts","_turnIndices","SimpleJson","Reader","ToDictionary","ToArray","_rootObject","Writer","inner","StartNewObject","propertyName","newObject","state","State","Property","currentCollection","currentPropertyName","_propertyNameStack","None","_jsonObject","_collectionStack","_stateStack","StateElement","Object","innerOrContent","IncrementChildCount","childCount","_currentPropertyName","PropertyName","_addToCurrentObject","error","POSITIVE_INFINITY","NEGATIVE_INFINITY","_currentString","currEl","OutputStateChange","StoryState","story","_outputStream","OutputStreamDirty","_evaluationStack","_variablesState","currentTurnIndex","timeSeed","Date","getTime","storySeed","previousRandom","_currentChoices","GoToStart","ToString","indented","ToJson","json","TextToDictionary","LoadJsonObj","pathString","visitCountOut","_patch","TryGetVisitCount","containerPathStr","count2","currCount","VisitCountForContainer","SetVisitCount","SetTurnIndex","TryGetTurnIndex","index2","currentWhitespaceStart","startOfLine","charAt","mainContentContainer","outputStream","hasError","_currentErrors","currentErrors","hasWarning","_currentWarnings","currentWarnings","variablesState","evaluationStack","divertedPointer","didSafeExit","ApplyPatch","visitCounts","ApplyCountChanges","turnIndices","newCount","isVisit","hasChoiceThreads","threadAtGeneration","ThreadWithIndex","WriteListRuntimeObjs","WriteIntDictionary","kInkSaveStateVersion","inkVersionCurrent","jSaveVersion","kMinCompatibleLoadVersion","SetJsonToken","divertPath","currentDivertTargetPath","JObjectToIntDictionary","jChoiceThreads","jSavedChoiceThread","foundActiveThread","objs","listText","TrySplittingHeadTailWhitespace","textObj","PushToOutputStreamIndividual","single","headFirstNewlineIdx","headLastNewlineIdx","tailLastNewlineIdx","tailFirstNewlineIdx","leadingSpaces","innerStrText","numSpaces","trailingSpaces","listTexts","innerStrStart","innerStrEnd","glue","includeInOutput","TrimNewlinesFromOutputStream","functionTrimIndex","glueTrimIndex","o","isNonWhitespace","RemoveExistingGlue","callStackElements","outputStreamEndsInNewline","outputStreamContainsContent","removeWhitespaceFrom","cmd","txt","n","numberOfObjects","functionStartPoint","popType","TrimWhitespaceFromFunctionEnd","Pop","incrementingTurnIndex","newPointer","funcContainer","Push","PassArgumentsToEvaluationStack","PushEvaluationStack","callStackTrace","originalEvaluationStackHeight","returnedObj","poppedObj","PopEvaluationStack","PopCallStack","returnVal","isWarning","_outputStreamTextDirty","_outputStreamTagsDirty","depth","canContinue","_currentTurnIndex","textContent","_currentText","CleanOutputWhitespace","_currentTags","Stopwatch","startTime","nVal","isFinite","jsonString","_mainContentContainer","_listDefinitions","_externals","rootObject","versionObj","formatFromFile","inkVersionMinimumCompatible","listDefsObj","rootToken","JTokenToListDefinitions","ResetState","shouldReturn","IfAsyncWeCant","_state","ObserveVariableChange","VariableStateDidChangeEvent","bind","ResetGlobals","ResetErrors","ForceEnd","originalPointer","ChoosePath","ContinueInternal","SnapshotDefaultGlobals","ContinueAsync","currentText","millisecsLimitAsync","_hasValidatedExternals","ValidateExternalBindings","_profiler","PreContinue","isAsyncTimeLimited","_recursiveContinueCount","_asyncContinueActive","ResetOutput","durationStopwatch","Start","ContinueSingleStep","AddError","ElapsedMilliseconds","Stop","_stateSnapshotAtLastNewline","RestoreStateSnapshot","generatedChoices","_temporaryEvaluationContainer","PostContinue","PreStep","Step","PostStep","TryFollowDefaultInvisibleChoice","PreSnapshot","inStringEvaluation","currentTags","change","CalculateNewlineOutputStateChange","ExtendedBeyondNewline","NewlineRemoved","DiscardSnapshot","StateSnapshot","PostSnapshot","prevText","currText","prevTagCount","currTagCount","newlineStillExists","NoChange","Continue","pathLengthToUse","CopyAndStartPatching","RestoreAfterPatch","_asyncSaving","ApplyAnyPatch","stateToSave","shouldAddToStream","containerToEnter","VisitContainer","contextIdx","currentContentObj","isLogicOrFlowControl","PerformLogicAndFlowControl","ProcessChoice","ContextForVariableNamed","PushToOutputStream","NextContent","PushThread","atStart","IncrementVisitCountForContainer","RecordTurnIndexVisitToContainer","_prevContainers","prevAncestor","currentChildOfContainer","currentContainerAncestor","enteringAtStart","conditionValue","showChoice","IsTruthy","startText","choiceOnlyText","ForkThread","currentDivert","intContent","errorMessage","CallExternalFunction","sourceName","output","evalCommand","PeekEvaluationStack","popped","names","expected","errorMsg","overrideTunnelReturnTarget","TryExitFunctionEvaluationFromGame","contentStackForString","outputCountConsumed","command","PopFromOutputStream","reverse","choiceCount","extraNote","eitherCount","divertTarget","correctObj","TurnsSinceForContainer","maxInt","minInt","randomRange","resultSeed","nextRandom","chosenValue","shuffleIndex","NextSequenceShuffleIndex","PopThread","listNameVal","generatedListValue","foundItem","targetList","ListWithSubRange","listItemIndex","listEnumerator","entries","randomItem","assignedVal","Assign","foundValue","containerForCount","func","funcParams","resetCallstack","ResetCallstack","funcDetail","activityStr","SetChosenPath","VisitChangedContainersDueToDivert","choiceIdx","choices","currentChoices","choiceToChoose","KnotContainerWithName","returnTextOutput","trim","outputStreamBefore","StartFunctionEvaluationFromGame","stringOutput","textOutput","CompleteFunctionEvaluationFromGame","returned","exprContainer","startCallStackHeight","evalStackHeight","funcName","numberOfArguments","fallbackFunctionContainer","allowExternalFunctionFallbacks","valueObj","funcResult","returnObj","BindExternalFunctionGeneral","_this3","coercedArgs","TryCoerce","missingExternals","from","innerContent","observer","_variableObservers","variableNames","observers","ObserveVariable","specificVariableName","keys","newValueObj","TagsAtStartOfFlowContainerWithPathString","flowContainer","firstContent","tags","didPop","IncrementContentPointer","successfulIncrement","nextAncestor","indexInAncestor","allChoices","invisibleChoices","numElementsIntVal","seqContainer","numElements","seqCount","loopIndex","iterationIndex","seqPathStr","sequenceHash","charCodeAt","randomSeed","random","unpickedIndices","chosen","chosenIndex","lineNum","currentDebugMetadata","errorTypeStr","endLineNumber","fileName"],"mappings":"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"}